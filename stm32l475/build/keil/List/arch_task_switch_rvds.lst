


ARM Macro Assembler    Page 1 


    1 00000000         ;/**
    2 00000000         ;*******************************************************
                       ********************************************************
                       ********
    3 00000000         ;* Copyright (c) 2020, China Mobile Communications Group
                        Co.,Ltd.
    4 00000000         ;*
    5 00000000         ;* Licensed under the Apache License, Version 2.0 (the "
                       License"); you may not use this file except in complianc
                       e with 
    6 00000000         ;* the License. You may obtain a copy of the License at
    7 00000000         ;*
    8 00000000         ;*     http://www.apache.org/licenses/LICENSE-2.0
    9 00000000         ;*
   10 00000000         ;* Unless required by applicable law or agreed to in wri
                       ting, software distributed under the License is distribu
                       ted on 
   11 00000000         ;* an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
                        ANY KIND, either express or implied. See the License fo
                       r the 
   12 00000000         ;* specific language governing permissions and limitatio
                       ns under the License.
   13 00000000         ;*
   14 00000000         ;* @file        os_arch_task_switch_rvds.S
   15 00000000         ;*
   16 00000000         ;* @brief       This file provides context switch functi
                       ons related to the ARMv7-M architecture, 
   17 00000000         ;*              and the compiler uses armcc.
   18 00000000         ;*
   19 00000000         ;* @revision
   20 00000000         ;* Date         Author          Notes
   21 00000000         ;* 2020-10-10   OneOS Team      First version.
   22 00000000         ;*******************************************************
                       ********************************************************
                       ********
   23 00000000         ;*/
   24 00000000         
   25 00000000 E000ED08 
                       SCB_VTOR
                               EQU              0xE000ED08  ; /* Vector table o
                                                            ffset register */
   26 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; /* Interrupt cont
                                                            rol state register 
                                                            */
   27 00000000 E000ED20 
                       NVIC_SYSPRI2
                               EQU              0xE000ED20  ; /* System priorit
                                                            y register (2) */
   28 00000000 00FF0000 
                       NVIC_PENDSV_PRI
                               EQU              0x00FF0000  ; /* PendSV priorit
                                                            y value (lowest) */
                                                            
   29 00000000 FF000000 
                       NVIC_SYSTICK_PRI
                               EQU              0xFF000000  ; /* SysTick priori
                                                            ty value (lowest) *



ARM Macro Assembler    Page 2 


                                                            /
   30 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; /* Value to trigg
                                                            er PendSV exception
                                                             */
   31 00000000         
   32 00000000 00000004 
                       OS_TASK_STATE_RUNNING
                               EQU              0x0004      ; /* Task Status Fl
                                                            ag (RUNNING) */
   33 00000000         
   34 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   35 00000000                 THUMB
   36 00000000                 REQUIRE8
   37 00000000                 PRESERVE8
   38 00000000                 IMPORT           g_os_current_task
   39 00000000                 IMPORT           g_os_next_task
   40 00000000                 IMPORT           interrupt_stack_addr
   41 00000000                 IF               :DEF:OS_TASK_SWITCH_NOTIFY
   42 00000000                 IMPORT           os_task_switch_notify
   43 00000000                 ENDIF
   44 00000000         
   45 00000000                 EXPORT           os_task_switch
   46 00000000                 EXPORT           os_first_task_start
   47 00000000                 EXPORT           PendSV_Handler ; /* Override th
                                                            e MDK definition of
                                                             PendSV_Handler */
   48 00000000         
   49 00000000         os_task_switch
                               PROC
   50 00000000         ; /* Trigger pdneSV */
   51 00000000 4827            LDR              R0, =NVIC_INT_CTRL
   52 00000002 F04F 5180       LDR              R1, =NVIC_PENDSVSET
   53 00000006 6001            STR              R1, [R0]
   54 00000008         
   55 00000008 4770            BX               LR
   56 0000000A                 ENDP
   57 0000000A         
   58 0000000A         PendSV_Handler
                               PROC
   59 0000000A         ; /* Disable interrupt to prevent interruption of task s
                       witching process */
   60 0000000A F3EF 8C10       MRS              R12, PRIMASK
   61 0000000E B672            CPSID            I
   62 00000010         
   63 00000010         ; /* If g_os_current_task is OS_NULL, skip preservation 
                       */
   64 00000010 4924            LDR              R1,  =g_os_current_task ; /* R1
                                                             = &gs_os_current_t
                                                            ask */
   65 00000012 6808            LDR              R0,  [R1]   ; /* R0 = gs_os_cur
                                                            rent_task */
   66 00000014 B1A8            CBZ              R0,  switch_to_task ; /* If gs_
                                                            os_current_task is 
                                                            OS_NULL, os_first_t
                                                            ask_start trigger *
                                                            /



ARM Macro Assembler    Page 3 


   67 00000016         
   68 00000016         ; /* begin: save current task registers to stack */
   69 00000016 F3EF 8309       MRS              R3,  PSP
   70 0000001A         
   71 0000001A         ; /* Save FPU registers */
   72 0000001A                 IF               {FPU} != "SoftVFP"
   73 0000001A F01E 0F10       TST              LR,  #0x10
   74 0000001E BF08 ED23 
              8B10             VSTMFDEQ         R3!, {D8 - D15} ;/*Lazy Stackin
                                                            g:Triggers the hard
                                                            ware floating point
                                                             (D0-D8,FPSCR) upda
                                                            te stack at the sam
                                                            e time*/
   75 00000024                 ENDIF
   76 00000024         
   77 00000024 E923 4FF0       STMFD            R3!, {R4 - R11, LR} ; /* Save R
                                                            4 - R11 and LR*/
   78 00000028 6003            STR              R3,  [R0, #0] ; /* Update g_os_
                                                            current_task->stack
                                                            _top */
   79 0000002A         ; /* end: save current task registers to stack */
   80 0000002A         
   81 0000002A         ; /* Clear current task running state */
   82 0000002A F04F 0204       LDR              R2,  =OS_TASK_STATE_RUNNING
   83 0000002E 8983            LDRH             R3,  [R0, #12] ; /* R4 = g_os_c
                                                            urrent_task->state 
                                                            */
   84 00000030 EA23 0302       BIC              R3,  R3, R2 ; /* g_os_current_t
                                                            ask->state &= (~OS_
                                                            TASK_STATE_RUNNING)
                                                             */
   85 00000034 8183            STRH             R3,  [R0, #12]
   86 00000036         
   87 00000036         ; /* Check either task stack during task switching. */
   88 00000036                 IF               :DEF:OS_TASK_SWITCH_NOTIFY
   89 00000036 E92D 1002       PUSH             {R1, R12}
   90 0000003A F7FF FFFE       BL               os_task_switch_notify
   91 0000003E E8BD 1002       POP              {R1, R12}
   92 00000042                 ENDIF
   93 00000042         
   94 00000042         switch_to_task
   95 00000042         ; /* Get g_os_next_task->stack_top */
   96 00000042 4B19            LDR              R3, =g_os_next_task ; /* R3 = &
                                                            g_os_next_task */
   97 00000044 681A            LDR              R2,  [R3]   ; /* R2 = g_os_next
                                                            _task */
   98 00000046         
   99 00000046         ; /* begin: Restore next task stack */
  100 00000046 6813            LDR              R3,  [R2, #0] ; /* R3 = g_os_ne
                                                            xt_task->stack_top;
                                                             Pickup task stack 
                                                            pointer */
  101 00000048 E8B3 4FF0       LDMFD            R3!, {R4 - R11, LR} ; /* Pop R4
                                                             - R11 and LR from 
                                                            stack */
  102 0000004C         
  103 0000004C                 IF               {FPU} != "SoftVFP"
  104 0000004C F01E 0F10       TST              LR,  #0x10



ARM Macro Assembler    Page 4 


  105 00000050 BF08 ECB3 
              8B10             VLDMFDEQ         R3!, {D8 - D15}
  106 00000056                 ENDIF
  107 00000056         
  108 00000056 F383 8809       MSR              PSP, R3     ; /* Restore PSP */
                                                            
  109 0000005A         ; /* end: Restore next task stack */
  110 0000005A         
  111 0000005A 600A            STR              R2,  [R1]   ; /* g_os_current_t
                                                            ask = g_os_next_tas
                                                            k */
  112 0000005C         
  113 0000005C         ; /* Set task running state */
  114 0000005C F04F 0004       LDR              R0,  =OS_TASK_STATE_RUNNING
  115 00000060 8993            LDRH             R3,  [R2, #12] ; /* R3 = g_os_n
                                                            ext_task->state */
  116 00000062 EA43 0300       ORR              R3,  R3, R0 ; /* g_os_next_task
                                                            ->state |= OS_TASK_
                                                            STATE_RUNNING */
  117 00000066 8193            STRH             R3,  [R2, #12]
  118 00000068         
  119 00000068         ; /* Restore interrupt */
  120 00000068 F38C 8810       MSR              PRIMASK, R12
  121 0000006C         
  122 0000006C 4770            BX               LR
  123 0000006E                 ENDP
  124 0000006E         
  125 0000006E         os_first_task_start
                               PROC
  126 0000006E         ; /* set the PendSV and Systick priority */
  127 0000006E 480F            LDR              R0, =NVIC_SYSPRI2
  128 00000070 490F            LDR              R1, =NVIC_PENDSV_PRI :OR: NVIC_
SYSTICK_PRI
  129 00000072 F8D0 2000       LDR.W            R2, [R0,#0x00] ; /* Read */
  130 00000076 EA41 0102       ORR              R1, R1, R2  ; /* Modify */
  131 0000007A 6001            STR              R1, [R0]    ; /* Write-back */
  132 0000007C         
  133 0000007C                 IF               {FPU} != "SoftVFP"
  134 0000007C         ; /* Clear CONTROL.FPCA */
  135 0000007C F3EF 8214       MRS              R2, CONTROL ; /* Read */
  136 00000080 F022 0204       BIC              R2, #0x04   ; /* Modify */
  137 00000084 F382 8814       MSR              CONTROL, R2 ; /* Write-back */
  138 00000088                 ENDIF
  139 00000088         
  140 00000088         ; /* Restore MSP */
  141 00000088 480A            LDR              R0, =interrupt_stack_addr
  142 0000008A 6800            LDR              R0, [R0]
  143 0000008C F380 8808       MSR              MSP, R0
  144 00000090         
  145 00000090         ; /* Trigger the PendSV exception (causes context switch
                       ) */
  146 00000090 4803            LDR              R0, =NVIC_INT_CTRL
  147 00000092 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  148 00000096 6001            STR              R1, [R0]
  149 00000098         
  150 00000098         ; /* Enable interrupts at processor level */
  151 00000098 B661            CPSIE            F
  152 0000009A B662            CPSIE            I
  153 0000009C         



ARM Macro Assembler    Page 5 


  154 0000009C         ; /* Never reach here! */
  155 0000009C E7FE            B                .
  156 0000009E                 ENDP
  157 0000009E         
  158 0000009E 00 00           ALIGN            4
  159 000000A0                 END
              E000ED04 
              00000000 
              00000000 
              E000ED20 
              FFFF0000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\build\keil\obj\arch_task_switch_rvds.d -o.\build\keil\obj\arc
h_task_switch_rvds.o -I.\RTE\_oneos -ID:\LenovoSoftstore\Install\KEIL\ARM\PACK\
Keil\STM32L4xx_DFP\2.6.1\Drivers\CMSIS\Device\ST\STM32L4xx\Include -ID:\LenovoS
oftstore\Install\KEIL\ARM\CMSIS\Include --predefine="__UVISION_VERSION SETA 525
" --predefine="STM32L475xx SETA 1" --predefine="OS_TASK_SWITCH_NOTIFY SETA 1" -
-list=.\build\keil\list\arch_task_switch_rvds.lst ..\..\arch\arm\armv7m\rvds\ar
ch_task_switch_rvds.S



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 34 in file ..\..\arch\arm\armv7m\rvds\arch_task_switch_rvds.S
   Uses
      None
Comment: .text unused
PendSV_Handler 0000000A

Symbol: PendSV_Handler
   Definitions
      At line 58 in file ..\..\arch\arm\armv7m\rvds\arch_task_switch_rvds.S
   Uses
      At line 47 in file ..\..\arch\arm\armv7m\rvds\arch_task_switch_rvds.S
Comment: PendSV_Handler used once
os_first_task_start 0000006E

Symbol: os_first_task_start
   Definitions
      At line 125 in file ..\..\arch\arm\armv7m\rvds\arch_task_switch_rvds.S
   Uses
      At line 46 in file ..\..\arch\arm\armv7m\rvds\arch_task_switch_rvds.S
Comment: os_first_task_start used once
os_task_switch 00000000

Symbol: os_task_switch
   Definitions
      At line 49 in file ..\..\arch\arm\armv7m\rvds\arch_task_switch_rvds.S
   Uses
      At line 45 in file ..\..\arch\arm\armv7m\rvds\arch_task_switch_rvds.S
Comment: os_task_switch used once
switch_to_task 00000042

Symbol: switch_to_task
   Definitions
      At line 94 in file ..\..\arch\arm\armv7m\rvds\arch_task_switch_rvds.S
   Uses
      At line 66 in file ..\..\arch\arm\armv7m\rvds\arch_task_switch_rvds.S
Comment: switch_to_task used once
5 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 26 in file ..\..\arch\arm\armv7m\rvds\arch_task_switch_rvds.S
   Uses
      At line 51 in file ..\..\arch\arm\armv7m\rvds\arch_task_switch_rvds.S
      At line 146 in file ..\..\arch\arm\armv7m\rvds\arch_task_switch_rvds.S

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 30 in file ..\..\arch\arm\armv7m\rvds\arch_task_switch_rvds.S
   Uses
      At line 52 in file ..\..\arch\arm\armv7m\rvds\arch_task_switch_rvds.S
      At line 147 in file ..\..\arch\arm\armv7m\rvds\arch_task_switch_rvds.S

NVIC_PENDSV_PRI 00FF0000

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 28 in file ..\..\arch\arm\armv7m\rvds\arch_task_switch_rvds.S
   Uses
      At line 128 in file ..\..\arch\arm\armv7m\rvds\arch_task_switch_rvds.S
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI2 E000ED20

Symbol: NVIC_SYSPRI2
   Definitions
      At line 27 in file ..\..\arch\arm\armv7m\rvds\arch_task_switch_rvds.S
   Uses
      At line 127 in file ..\..\arch\arm\armv7m\rvds\arch_task_switch_rvds.S
Comment: NVIC_SYSPRI2 used once
NVIC_SYSTICK_PRI FF000000

Symbol: NVIC_SYSTICK_PRI
   Definitions
      At line 29 in file ..\..\arch\arm\armv7m\rvds\arch_task_switch_rvds.S
   Uses
      At line 128 in file ..\..\arch\arm\armv7m\rvds\arch_task_switch_rvds.S
Comment: NVIC_SYSTICK_PRI used once
OS_TASK_STATE_RUNNING 00000004

Symbol: OS_TASK_STATE_RUNNING
   Definitions
      At line 32 in file ..\..\arch\arm\armv7m\rvds\arch_task_switch_rvds.S
   Uses
      At line 82 in file ..\..\arch\arm\armv7m\rvds\arch_task_switch_rvds.S
      At line 114 in file ..\..\arch\arm\armv7m\rvds\arch_task_switch_rvds.S

SCB_VTOR E000ED08

Symbol: SCB_VTOR
   Definitions
      At line 25 in file ..\..\arch\arm\armv7m\rvds\arch_task_switch_rvds.S
   Uses
      None
Comment: SCB_VTOR unused



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

7 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

g_os_current_task 00000000

Symbol: g_os_current_task
   Definitions
      At line 38 in file ..\..\arch\arm\armv7m\rvds\arch_task_switch_rvds.S
   Uses
      At line 64 in file ..\..\arch\arm\armv7m\rvds\arch_task_switch_rvds.S
Comment: g_os_current_task used once
g_os_next_task 00000000

Symbol: g_os_next_task
   Definitions
      At line 39 in file ..\..\arch\arm\armv7m\rvds\arch_task_switch_rvds.S
   Uses
      At line 96 in file ..\..\arch\arm\armv7m\rvds\arch_task_switch_rvds.S
Comment: g_os_next_task used once
interrupt_stack_addr 00000000

Symbol: interrupt_stack_addr
   Definitions
      At line 40 in file ..\..\arch\arm\armv7m\rvds\arch_task_switch_rvds.S
   Uses
      At line 141 in file ..\..\arch\arm\armv7m\rvds\arch_task_switch_rvds.S
Comment: interrupt_stack_addr used once
os_task_switch_notify 00000000

Symbol: os_task_switch_notify
   Definitions
      At line 42 in file ..\..\arch\arm\armv7m\rvds\arch_task_switch_rvds.S
   Uses
      At line 90 in file ..\..\arch\arm\armv7m\rvds\arch_task_switch_rvds.S
Comment: os_task_switch_notify used once
4 symbols
352 symbols in table
