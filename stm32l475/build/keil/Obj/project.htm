<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\build\keil\Obj\project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\build\keil\Obj\project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Fri Jun 24 15:08:15 2022
<BR><P>
<H3>Maximum Stack Usage =       6660 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
onenet_mqtts_device_thread_func &rArr; onenet_mqtts_device_entry &rArr; onenet_mqtts_device_register &rArr; onenet_authorization &rArr; hmac_sha1 &rArr; sha1 &rArr; rotl
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[27e]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[578]">os_device_write_nonblock</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[419]">os_kprintf</a><BR>
 <LI><a href="#[199]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[199]">NMI_Handler</a><BR>
 <LI><a href="#[19b]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19b]">MemManage_Handler</a><BR>
 <LI><a href="#[19c]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19c]">BusFault_Handler</a><BR>
 <LI><a href="#[19d]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19d]">UsageFault_Handler</a><BR>
 <LI><a href="#[19e]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19e]">SVC_Handler</a><BR>
 <LI><a href="#[19f]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19f]">DebugMon_Handler</a><BR>
 <LI><a href="#[1b4]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b4]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1b4]">ADC1_2_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1d1]">ADC3_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[19c]">BusFault_Handler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1b6]">CAN1_RX0_IRQHandler</a> from stm32l4xx_it_bsp.o(i.CAN1_RX0_IRQHandler) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1b7]">CAN1_RX1_IRQHandler</a> from stm32l4xx_it_bsp.o(i.CAN1_RX1_IRQHandler) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1b8]">CAN1_SCE_IRQHandler</a> from stm32l4xx_it_bsp.o(i.CAN1_SCE_IRQHandler) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1b5]">CAN1_TX_IRQHandler</a> from stm32l4xx_it_bsp.o(i.CAN1_TX_IRQHandler) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1e2]">COMP_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1df]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1e0]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1e1]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1cc]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1ad]">DMA1_Channel1_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1ae]">DMA1_Channel2_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1af]">DMA1_Channel3_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1b0]">DMA1_Channel4_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1b1]">DMA1_Channel5_IRQHandler</a> from stm32l4xx_it_bsp.o(i.DMA1_Channel5_IRQHandler) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1b2]">DMA1_Channel6_IRQHandler</a> from stm32l4xx_it_bsp.o(i.DMA1_Channel6_IRQHandler) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1b3]">DMA1_Channel7_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1da]">DMA2_Channel1_IRQHandler</a> from stm32l4xx_it_bsp.o(i.DMA2_Channel1_IRQHandler) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1db]">DMA2_Channel2_IRQHandler</a> from stm32l4xx_it_bsp.o(i.DMA2_Channel2_IRQHandler) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1dc]">DMA2_Channel3_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1dd]">DMA2_Channel4_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1de]">DMA2_Channel5_IRQHandler</a> from stm32l4xx_it_bsp.o(i.DMA2_Channel5_IRQHandler) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1e6]">DMA2_Channel6_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1e7]">DMA2_Channel7_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[19f]">DebugMon_Handler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1a8]">EXTI0_IRQHandler</a> from drv_gpio.o(i.EXTI0_IRQHandler) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1ca]">EXTI15_10_IRQHandler</a> from drv_gpio.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1a9]">EXTI1_IRQHandler</a> from drv_gpio.o(i.EXTI1_IRQHandler) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1aa]">EXTI2_IRQHandler</a> from drv_gpio.o(i.EXTI2_IRQHandler) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1ab]">EXTI3_IRQHandler</a> from drv_gpio.o(i.EXTI3_IRQHandler) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1ac]">EXTI4_IRQHandler</a> from drv_gpio.o(i.EXTI4_IRQHandler) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1b9]">EXTI9_5_IRQHandler</a> from drv_gpio.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1a6]">FLASH_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1d2]">FMC_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1f1]">FPU_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[19a]">HardFault_Handler</a> from arch_exception_rvds.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1c2]">I2C1_ER_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1c1]">I2C1_EV_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1c4]">I2C2_ER_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1c3]">I2C2_EV_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1eb]">I2C3_ER_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1ea]">I2C3_EV_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1e3]">LPTIM1_IRQHandler</a> from stm32l4xx_it_bsp.o(i.LPTIM1_IRQHandler) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1e4]">LPTIM2_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1e8]">LPUART1_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[4f]">MQTT_net_connect</a> from mqttoneos.o(i.MQTT_net_connect) referenced from mqttoneos.o(i.MQTTNetworkInit)
 <LI><a href="#[4e]">MQTT_net_disconnect</a> from mqttoneos.o(i.MQTT_net_disconnect) referenced from mqttoneos.o(i.MQTTNetworkInit)
 <LI><a href="#[4c]">MQTT_net_read</a> from mqttoneos.o(i.MQTT_net_read) referenced from mqttoneos.o(i.MQTTNetworkInit)
 <LI><a href="#[4d]">MQTT_net_write</a> from mqttoneos.o(i.MQTT_net_write) referenced from mqttoneos.o(i.MQTTNetworkInit)
 <LI><a href="#[19b]">MemManage_Handler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[199]">NMI_Handler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1e5]">OTG_FS_IRQHandler</a> from stm32l4xx_it_bsp.o(i.OTG_FS_IRQHandler) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1a3]">PVD_PVM_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1a0]">PendSV_Handler</a> from arch_task_switch_rvds.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1e9]">QUADSPI_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1a7]">RCC_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1f0]">RNG_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1cb]">RTC_Alarm_IRQHandler</a> from drv_rtc.o(i.RTC_Alarm_IRQHandler) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1a5]">RTC_WKUP_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[198]">Reset_Handler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1ec]">SAI1_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1ed]">SAI2_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[3c]">SAI_DMAError</a> from stm32l4xx_hal_sai.o(i.SAI_DMAError) referenced from stm32l4xx_hal_sai.o(i.HAL_SAI_Receive_DMA)
 <LI><a href="#[3c]">SAI_DMAError</a> from stm32l4xx_hal_sai.o(i.SAI_DMAError) referenced from stm32l4xx_hal_sai.o(i.HAL_SAI_Transmit_DMA)
 <LI><a href="#[3b]">SAI_DMARxCplt</a> from stm32l4xx_hal_sai.o(i.SAI_DMARxCplt) referenced from stm32l4xx_hal_sai.o(i.HAL_SAI_Receive_DMA)
 <LI><a href="#[3a]">SAI_DMARxHalfCplt</a> from stm32l4xx_hal_sai.o(i.SAI_DMARxHalfCplt) referenced from stm32l4xx_hal_sai.o(i.HAL_SAI_Receive_DMA)
 <LI><a href="#[3e]">SAI_DMATxCplt</a> from stm32l4xx_hal_sai.o(i.SAI_DMATxCplt) referenced from stm32l4xx_hal_sai.o(i.HAL_SAI_Transmit_DMA)
 <LI><a href="#[3d]">SAI_DMATxHalfCplt</a> from stm32l4xx_hal_sai.o(i.SAI_DMATxHalfCplt) referenced from stm32l4xx_hal_sai.o(i.HAL_SAI_Transmit_DMA)
 <LI><a href="#[1d3]">SDMMC1_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1c5]">SPI1_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1c6]">SPI2_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1d5]">SPI3_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[41]">SPI_DMAError</a> from stm32l4xx_hal_spi.o(i.SPI_DMAError) referenced from stm32l4xx_hal_spi.o(i.HAL_SPI_Receive_DMA)
 <LI><a href="#[41]">SPI_DMAError</a> from stm32l4xx_hal_spi.o(i.SPI_DMAError) referenced from stm32l4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[41]">SPI_DMAError</a> from stm32l4xx_hal_spi.o(i.SPI_DMAError) referenced from stm32l4xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
 <LI><a href="#[3f]">SPI_DMAHalfReceiveCplt</a> from stm32l4xx_hal_spi.o(i.SPI_DMAHalfReceiveCplt) referenced from stm32l4xx_hal_spi.o(i.HAL_SPI_Receive_DMA)
 <LI><a href="#[3f]">SPI_DMAHalfReceiveCplt</a> from stm32l4xx_hal_spi.o(i.SPI_DMAHalfReceiveCplt) referenced from stm32l4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[44]">SPI_DMAHalfTransmitCplt</a> from stm32l4xx_hal_spi.o(i.SPI_DMAHalfTransmitCplt) referenced from stm32l4xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
 <LI><a href="#[42]">SPI_DMAHalfTransmitReceiveCplt</a> from stm32l4xx_hal_spi.o(i.SPI_DMAHalfTransmitReceiveCplt) referenced from stm32l4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[40]">SPI_DMAReceiveCplt</a> from stm32l4xx_hal_spi.o(i.SPI_DMAReceiveCplt) referenced from stm32l4xx_hal_spi.o(i.HAL_SPI_Receive_DMA)
 <LI><a href="#[40]">SPI_DMAReceiveCplt</a> from stm32l4xx_hal_spi.o(i.SPI_DMAReceiveCplt) referenced from stm32l4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[45]">SPI_DMATransmitCplt</a> from stm32l4xx_hal_spi.o(i.SPI_DMATransmitCplt) referenced from stm32l4xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
 <LI><a href="#[43]">SPI_DMATransmitReceiveCplt</a> from stm32l4xx_hal_spi.o(i.SPI_DMATransmitReceiveCplt) referenced from stm32l4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[19e]">SVC_Handler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1ee]">SWPMI1_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1a1]">SysTick_Handler</a> from stm32l4xx_it_bsp.o(i.SysTick_Handler) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[31]">SystemInit</a> from system_stm32l4xx.o(i.SystemInit) referenced from startup_stm32l475xx_arm.o(.text)
 <LI><a href="#[1a4]">TAMP_STAMP_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1ba]">TIM1_BRK_TIM15_IRQHandler</a> from stm32l4xx_it_bsp.o(i.TIM1_BRK_TIM15_IRQHandler) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1bd]">TIM1_CC_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1bc]">TIM1_TRG_COM_TIM17_IRQHandler</a> from stm32l4xx_it_bsp.o(i.TIM1_TRG_COM_TIM17_IRQHandler) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1bb]">TIM1_UP_TIM16_IRQHandler</a> from stm32l4xx_it_bsp.o(i.TIM1_UP_TIM16_IRQHandler) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1be]">TIM2_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1bf]">TIM3_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1c0]">TIM4_IRQHandler</a> from stm32l4xx_it_bsp.o(i.TIM4_IRQHandler) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1d4]">TIM5_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1d8]">TIM6_DAC_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1d9]">TIM7_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1cd]">TIM8_BRK_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1d0]">TIM8_CC_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1cf]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1ce]">TIM8_UP_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1ef]">TSC_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[51]">TimerCallback</a> from mqttoneos.o(i.TimerCallback) referenced from mqttoneos.o(i.TimerInit)
 <LI><a href="#[1d6]">UART4_IRQHandler</a> from stm32l4xx_it_bsp.o(i.UART4_IRQHandler) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1d7]">UART5_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[46]">UART_DMAAbortOnError</a> from stm32l4xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[49]">UART_DMAError</a> from stm32l4xx_hal_uart.o(i.UART_DMAError) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[49]">UART_DMAError</a> from stm32l4xx_hal_uart.o(i.UART_DMAError) referenced from stm32l4xx_hal_uart.o(i.UART_Start_Receive_DMA)
 <LI><a href="#[52]">UART_DMAReceiveCplt</a> from stm32l4xx_hal_uart.o(i.UART_DMAReceiveCplt) referenced from stm32l4xx_hal_uart.o(i.UART_Start_Receive_DMA)
 <LI><a href="#[53]">UART_DMARxHalfCplt</a> from stm32l4xx_hal_uart.o(i.UART_DMARxHalfCplt) referenced from stm32l4xx_hal_uart.o(i.UART_Start_Receive_DMA)
 <LI><a href="#[47]">UART_DMATransmitCplt</a> from stm32l4xx_hal_uart.o(i.UART_DMATransmitCplt) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[48]">UART_DMATxHalfCplt</a> from stm32l4xx_hal_uart.o(i.UART_DMATxHalfCplt) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[54]">UART_RxISR_16BIT</a> from stm32l4xx_hal_uart.o(i.UART_RxISR_16BIT) referenced from stm32l4xx_hal_uart.o(i.UART_Start_Receive_IT)
 <LI><a href="#[55]">UART_RxISR_8BIT</a> from stm32l4xx_hal_uart.o(i.UART_RxISR_8BIT) referenced from stm32l4xx_hal_uart.o(i.UART_Start_Receive_IT)
 <LI><a href="#[4a]">UART_TxISR_16BIT</a> from stm32l4xx_hal_uart.o(i.UART_TxISR_16BIT) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_IT)
 <LI><a href="#[4b]">UART_TxISR_8BIT</a> from stm32l4xx_hal_uart.o(i.UART_TxISR_8BIT) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_IT)
 <LI><a href="#[1c7]">USART1_IRQHandler</a> from stm32l4xx_it_bsp.o(i.USART1_IRQHandler) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1c8]">USART2_IRQHandler</a> from stm32l4xx_it_bsp.o(i.USART2_IRQHandler) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1c9]">USART3_IRQHandler</a> from stm32l4xx_it_bsp.o(i.USART3_IRQHandler) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[d]">USBD_LL_ClearStallEP</a> from drv_usbd.o(i.USBD_LL_ClearStallEP) referenced 2 times from drv_usbd.o(.data)
 <LI><a href="#[a]">USBD_LL_CloseEP</a> from drv_usbd.o(i.USBD_LL_CloseEP) referenced 2 times from drv_usbd.o(.data)
 <LI><a href="#[6]">USBD_LL_DeInit</a> from drv_usbd.o(i.USBD_LL_DeInit) referenced 2 times from drv_usbd.o(.data)
 <LI><a href="#[14]">USBD_LL_Delay</a> from drv_usbd.o(i.USBD_LL_Delay) referenced 2 times from drv_usbd.o(.data)
 <LI><a href="#[b]">USBD_LL_FlushEP</a> from drv_usbd.o(i.USBD_LL_FlushEP) referenced 2 times from drv_usbd.o(.data)
 <LI><a href="#[13]">USBD_LL_GetEPMaxPacket</a> from drv_usbd.o(i.USBD_LL_GetEPMaxPacket) referenced 2 times from drv_usbd.o(.data)
 <LI><a href="#[12]">USBD_LL_GetRxDataSize</a> from drv_usbd.o(i.USBD_LL_GetRxDataSize) referenced 2 times from drv_usbd.o(.data)
 <LI><a href="#[5]">USBD_LL_Init</a> from drv_usbd.o(i.USBD_LL_Init) referenced 2 times from drv_usbd.o(.data)
 <LI><a href="#[e]">USBD_LL_IsStallEP</a> from drv_usbd.o(i.USBD_LL_IsStallEP) referenced 2 times from drv_usbd.o(.data)
 <LI><a href="#[9]">USBD_LL_OpenEP</a> from drv_usbd.o(i.USBD_LL_OpenEP) referenced 2 times from drv_usbd.o(.data)
 <LI><a href="#[11]">USBD_LL_PrepareReceive</a> from drv_usbd.o(i.USBD_LL_PrepareReceive) referenced 2 times from drv_usbd.o(.data)
 <LI><a href="#[f]">USBD_LL_SetUSBAddress</a> from drv_usbd.o(i.USBD_LL_SetUSBAddress) referenced 2 times from drv_usbd.o(.data)
 <LI><a href="#[c]">USBD_LL_StallEP</a> from drv_usbd.o(i.USBD_LL_StallEP) referenced 2 times from drv_usbd.o(.data)
 <LI><a href="#[7]">USBD_LL_Start</a> from drv_usbd.o(i.USBD_LL_Start) referenced 2 times from drv_usbd.o(.data)
 <LI><a href="#[8]">USBD_LL_Stop</a> from drv_usbd.o(i.USBD_LL_Stop) referenced 2 times from drv_usbd.o(.data)
 <LI><a href="#[10]">USBD_LL_Transmit</a> from drv_usbd.o(i.USBD_LL_Transmit) referenced 2 times from drv_usbd.o(.data)
 <LI><a href="#[19d]">UsageFault_Handler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[1a2]">WWDG_IRQHandler</a> from startup_stm32l475xx_arm.o(.text) referenced from startup_stm32l475xx_arm.o(RESET)
 <LI><a href="#[30]">__asm___14_vector_table_c_5476e7df_____PendSV_Handler</a> from vector_table.o(.emb_text) referenced from vector_table.o(vtor_table)
 <LI><a href="#[147]">__driver_soft_i2c_bus_driver_init</a> from soft_i2c_bus.o(i.__driver_soft_i2c_bus_driver_init) referenced from soft_i2c_bus.o(.init_call.3.1)
 <LI><a href="#[150]">__driver_stm32_can_driver_init</a> from drv_can.o(i.__driver_stm32_can_driver_init) referenced from drv_can.o(.init_call.3.3)
 <LI><a href="#[159]">__driver_stm32_crc_driver_init</a> from drv_crypto_crc.o(i.__driver_stm32_crc_driver_init) referenced from drv_crypto_crc.o(.init_call.4.2)
 <LI><a href="#[157]">__driver_stm32_flash_driver_init</a> from drv_flash_l4.o(i.__driver_stm32_flash_driver_init) referenced from drv_flash_l4.o(.init_call.4.1)
 <LI><a href="#[151]">__driver_stm32_iwdt_driver_init</a> from drv_iwdg.o(i.__driver_stm32_iwdt_driver_init) referenced from drv_iwdg.o(.init_call.3.3)
 <LI><a href="#[148]">__driver_stm32_lptim_driver_init</a> from drv_lptim.o(i.__driver_stm32_lptim_driver_init) referenced from drv_lptim.o(.init_call.3.1)
 <LI><a href="#[152]">__driver_stm32_qspi_driver_init</a> from drv_qspi.o(i.__driver_stm32_qspi_driver_init) referenced from drv_qspi.o(.init_call.3.3)
 <LI><a href="#[15a]">__driver_stm32_rng_driver_init</a> from drv_crypto_rng.o(i.__driver_stm32_rng_driver_init) referenced from drv_crypto_rng.o(.init_call.4.2)
 <LI><a href="#[153]">__driver_stm32_rtc_driver_init</a> from drv_rtc.o(i.__driver_stm32_rtc_driver_init) referenced from drv_rtc.o(.init_call.3.3)
 <LI><a href="#[154]">__driver_stm32_sai_driver_init</a> from drv_sai.o(i.__driver_stm32_sai_driver_init) referenced from drv_sai.o(.init_call.3.3)
 <LI><a href="#[14e]">__driver_stm32_spi_driver_init</a> from drv_spi.o(i.__driver_stm32_spi_driver_init) referenced from drv_spi.o(.init_call.3.2)
 <LI><a href="#[14d]">__driver_stm32_tim_driver_init</a> from drv_hwtimer.o(i.__driver_stm32_tim_driver_init) referenced from drv_hwtimer.o(.init_call.3.2)
 <LI><a href="#[149]">__driver_stm32_usart_driver_init</a> from drv_usart.o(i.__driver_stm32_usart_driver_init) referenced from drv_usart.o(.init_call.3.1)
 <LI><a href="#[142]">__driver_stm32_usart_early_driver_init</a> from drv_usart.o(i.__driver_stm32_usart_early_driver_init) referenced from drv_usart.o(.init_call.1.3)
 <LI><a href="#[15e]">__driver_stm32_usbd_driver_init</a> from drv_usbd.o(i.__driver_stm32_usbd_driver_init) referenced from drv_usbd.o(.init_call.4.3)
 <LI><a href="#[201]">__main</a> from __main.o(!!!main) referenced from startup_stm32l475xx_arm.o(.text)
 <LI><a href="#[98]">_audio_player_callback</a> from audio_player.o(i._audio_player_callback) referenced from audio_player.o(.constdata)
 <LI><a href="#[97]">_audio_player_control</a> from audio_player.o(i._audio_player_control) referenced from audio_player.o(.constdata)
 <LI><a href="#[95]">_audio_player_deinit</a> from audio_player.o(i._audio_player_deinit) referenced from audio_player.o(.constdata)
 <LI><a href="#[94]">_audio_player_init</a> from audio_player.o(i._audio_player_init) referenced from audio_player.o(.constdata)
 <LI><a href="#[96]">_audio_player_write</a> from audio_player.o(i._audio_player_write) referenced from audio_player.o(.constdata)
 <LI><a href="#[9c]">_audio_recorder_control</a> from audio_recorder.o(i._audio_recorder_control) referenced from audio_recorder.o(.constdata)
 <LI><a href="#[9a]">_audio_recorder_deinit</a> from audio_recorder.o(i._audio_recorder_deinit) referenced from audio_recorder.o(.constdata)
 <LI><a href="#[99]">_audio_recorder_init</a> from audio_recorder.o(i._audio_recorder_init) referenced from audio_recorder.o(.constdata)
 <LI><a href="#[9b]">_audio_recorder_read</a> from audio_recorder.o(i._audio_recorder_read) referenced from audio_recorder.o(.constdata)
 <LI><a href="#[36]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[11a]">_infrared_deinit</a> from infrared.o(i._infrared_deinit) referenced from infrared.o(.constdata)
 <LI><a href="#[119]">_infrared_init</a> from infrared.o(i._infrared_init) referenced from infrared.o(.constdata)
 <LI><a href="#[11b]">_infrared_read</a> from infrared.o(i._infrared_read) referenced from infrared.o(.constdata)
 <LI><a href="#[11c]">_infrared_write</a> from infrared.o(i._infrared_write) referenced from infrared.o(.constdata)
 <LI><a href="#[64]">_k_firstfit_mem_aligned_alloc</a> from os_mem_firstfit.o(i._k_firstfit_mem_aligned_alloc) referenced from os_mem_firstfit.o(i.k_firstfit_mem_init)
 <LI><a href="#[63]">_k_firstfit_mem_alloc</a> from os_mem_firstfit.o(i._k_firstfit_mem_alloc) referenced from os_mem_firstfit.o(i.k_firstfit_mem_init)
 <LI><a href="#[69]">_k_firstfit_mem_check</a> from os_mem_firstfit.o(i._k_firstfit_mem_check) referenced from os_mem_firstfit.o(i.k_firstfit_mem_init)
 <LI><a href="#[68]">_k_firstfit_mem_deinit</a> from os_mem_firstfit.o(i._k_firstfit_mem_deinit) referenced from os_mem_firstfit.o(i.k_firstfit_mem_init)
 <LI><a href="#[65]">_k_firstfit_mem_free</a> from os_mem_firstfit.o(i._k_firstfit_mem_free) referenced from os_mem_firstfit.o(i.k_firstfit_mem_init)
 <LI><a href="#[67]">_k_firstfit_mem_ptr_to_size</a> from os_mem_firstfit.o(i._k_firstfit_mem_ptr_to_size) referenced from os_mem_firstfit.o(i.k_firstfit_mem_init)
 <LI><a href="#[66]">_k_firstfit_mem_realloc</a> from os_mem_firstfit.o(i._k_firstfit_mem_realloc) referenced from os_mem_firstfit.o(i.k_firstfit_mem_init)
 <LI><a href="#[6a]">_k_idle_task_entry</a> from os_idle.o(i._k_idle_task_entry) referenced from os_idle.o(i.k_idle_task_init)
 <LI><a href="#[56]">_k_main_task_entry</a> from os_startup.o(i._k_main_task_entry) referenced from os_startup.o(i._k_application_init)
 <LI><a href="#[6b]">_k_recycle_task_entry</a> from os_task.o(i._k_recycle_task_entry) referenced from os_task.o(i.k_recycle_task_init)
 <LI><a href="#[57]">_k_task_exit</a> from os_task.o(i._k_task_exit) referenced from os_task.o(i._k_task_init)
 <LI><a href="#[6c]">_k_timer_task_entry</a> from os_timer.o(i._k_timer_task_entry) referenced from os_timer.o(i.k_timer_module_init)
 <LI><a href="#[14a]">_k_work_sys_workqueue_init</a> from os_workqueue.o(i._k_work_sys_workqueue_init) referenced from os_workqueue.o(.init_call.3.1)
 <LI><a href="#[58]">_k_workqueue_task_entry</a> from os_workqueue.o(i._k_workqueue_task_entry) referenced from os_workqueue.o(i._k_workqueue_init)
 <LI><a href="#[5c]">_out_buffer</a> from at_printf.o(i._out_buffer) referenced from at_printf.o(i.at_snprintf)
 <LI><a href="#[5c]">_out_buffer</a> from at_printf.o(i._out_buffer) referenced from at_printf.o(i.at_vsnprintf)
 <LI><a href="#[59]">_out_null</a> from at_printf.o(i._out_null) referenced from at_printf.o(i._vsnprintf)
 <LI><a href="#[ba]">_pin_control</a> from pin.o(i._pin_control) referenced from pin.o(.constdata)
 <LI><a href="#[b8]">_pin_read</a> from pin.o(i._pin_read) referenced from pin.o(.constdata)
 <LI><a href="#[b9]">_pin_write</a> from pin.o(i._pin_write) referenced from pin.o(.constdata)
 <LI><a href="#[37]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[bc]">_pwm_control</a> from pwm.o(i._pwm_control) referenced from pwm.o(.constdata)
 <LI><a href="#[bb]">_pwm_set</a> from pwm.o(i._pwm_set) referenced from pwm.o(.constdata)
 <LI><a href="#[35]">_sbackspace</a> from _sgetc.o(.text) referenced 2 times from vsscanf.o(.text)
 <LI><a href="#[38]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[34]">_sgetc</a> from _sgetc.o(.text) referenced 2 times from vsscanf.o(.text)
 <LI><a href="#[33]">_snputc</a> from _snputc.o(.text) referenced from __2snprintf.o(.text)
 <LI><a href="#[c7]">_spi_bus_device_control</a> from spi_dev.o(i._spi_bus_device_control) referenced from spi_dev.o(.constdata)
 <LI><a href="#[c5]">_spi_bus_device_read</a> from spi_dev.o(i._spi_bus_device_read) referenced from spi_dev.o(.constdata)
 <LI><a href="#[c6]">_spi_bus_device_write</a> from spi_dev.o(i._spi_bus_device_write) referenced from spi_dev.o(.constdata)
 <LI><a href="#[ca]">_spidev_device_control</a> from spi_dev.o(i._spidev_device_control) referenced from spi_dev.o(.constdata)
 <LI><a href="#[c8]">_spidev_device_read</a> from spi_dev.o(i._spidev_device_read) referenced from spi_dev.o(.constdata)
 <LI><a href="#[c9]">_spidev_device_write</a> from spi_dev.o(i._spidev_device_write) referenced from spi_dev.o(.constdata)
 <LI><a href="#[28]">aht10_humi_control</a> from aht10.o(i.aht10_humi_control) referenced 2 times from aht10.o(.data)
 <LI><a href="#[27]">aht10_humi_fetch_data</a> from aht10.o(i.aht10_humi_fetch_data) referenced 2 times from aht10.o(.data)
 <LI><a href="#[26]">aht10_temp_control</a> from aht10.o(i.aht10_temp_control) referenced 2 times from aht10.o(.data)
 <LI><a href="#[25]">aht10_temp_fetch_data</a> from aht10.o(i.aht10_temp_fetch_data) referenced 2 times from aht10.o(.data)
 <LI><a href="#[2d]">ap3216c_fetch_ir_data</a> from ap3216c.o(i.ap3216c_fetch_ir_data) referenced 2 times from ap3216c.o(.data)
 <LI><a href="#[29]">ap3216c_fetch_light_data</a> from ap3216c.o(i.ap3216c_fetch_light_data) referenced 2 times from ap3216c.o(.data)
 <LI><a href="#[2b]">ap3216c_fetch_proximity_data</a> from ap3216c.o(i.ap3216c_fetch_proximity_data) referenced 2 times from ap3216c.o(.data)
 <LI><a href="#[2e]">ap3216c_ir_control</a> from ap3216c.o(i.ap3216c_ir_control) referenced 2 times from ap3216c.o(.data)
 <LI><a href="#[2a]">ap3216c_light_control</a> from ap3216c.o(i.ap3216c_light_control) referenced 2 times from ap3216c.o(.data)
 <LI><a href="#[2c]">ap3216c_proximity_control</a> from ap3216c.o(i.ap3216c_proximity_control) referenced 2 times from ap3216c.o(.data)
 <LI><a href="#[11d]">at_parser_rx_indicate</a> from at_parser.o(i.at_parser_rx_indicate) referenced from at_parser.o(.constdata)
 <LI><a href="#[5b]">at_parser_task</a> from at_parser.o(i.at_parser_task) referenced from at_parser.o(i.at_parser_init)
 <LI><a href="#[79]">audio_es8388_data_tx_done</a> from es8388.o(i.audio_es8388_data_tx_done) referenced from es8388.o(i.os_hw_audio_player_init)
 <LI><a href="#[9d]">audio_es8388_player_config</a> from es8388.o(i.audio_es8388_player_config) referenced from es8388.o(.constdata)
 <LI><a href="#[9f]">audio_es8388_player_deinit</a> from es8388.o(i.audio_es8388_player_deinit) referenced from es8388.o(.constdata)
 <LI><a href="#[9e]">audio_es8388_player_init</a> from es8388.o(i.audio_es8388_player_init) referenced from es8388.o(.constdata)
 <LI><a href="#[a0]">audio_es8388_player_start</a> from es8388.o(i.audio_es8388_player_start) referenced from es8388.o(.constdata)
 <LI><a href="#[a1]">audio_es8388_player_stop</a> from es8388.o(i.audio_es8388_player_stop) referenced from es8388.o(.constdata)
 <LI><a href="#[a8]">audio_es8388_receive</a> from es8388.o(i.audio_es8388_receive) referenced from es8388.o(.constdata)
 <LI><a href="#[a3]">audio_es8388_recorder_config</a> from es8388.o(i.audio_es8388_recorder_config) referenced from es8388.o(.constdata)
 <LI><a href="#[a5]">audio_es8388_recorder_deinit</a> from es8388.o(i.audio_es8388_recorder_deinit) referenced from es8388.o(.constdata)
 <LI><a href="#[a4]">audio_es8388_recorder_init</a> from es8388.o(i.audio_es8388_recorder_init) referenced from es8388.o(.constdata)
 <LI><a href="#[a6]">audio_es8388_recorder_start</a> from es8388.o(i.audio_es8388_recorder_start) referenced from es8388.o(.constdata)
 <LI><a href="#[a7]">audio_es8388_recorder_stop</a> from es8388.o(i.audio_es8388_recorder_stop) referenced from es8388.o(.constdata)
 <LI><a href="#[a2]">audio_es8388_transmit</a> from es8388.o(i.audio_es8388_transmit) referenced from es8388.o(.constdata)
 <LI><a href="#[ae]">blk_dev_control</a> from block_device.o(i.blk_dev_control) referenced from block_device.o(.constdata)
 <LI><a href="#[ac]">blk_dev_read</a> from block_device.o(i.blk_dev_read) referenced from block_device.o(.constdata)
 <LI><a href="#[ad]">blk_dev_write</a> from block_device.o(i.blk_dev_write) referenced from block_device.o(.constdata)
 <LI><a href="#[145]">board_post_init</a> from drv_common.o(i.board_post_init) referenced from drv_common.o(.init_call.2.3)
 <LI><a href="#[50]">bufchar</a> from mqttpacket.o(i.bufchar) referenced from mqttpacket.o(i.MQTTPacket_decodeBuf)
 <LI><a href="#[5d]">cortexm_systick_read</a> from clocksource_cortexm.o(i.cortexm_systick_read) referenced from clocksource_cortexm.o(i.cortexm_systick_clocksource_init)
 <LI><a href="#[5e]">cotex_m_irq_hook</a> from vector_table.o(i.cotex_m_irq_hook) referenced from vector_table.o(i.cotex_m_set_vector)
 <LI><a href="#[13f]">cotex_m_set_vector</a> from vector_table.o(i.cotex_m_set_vector) referenced from vector_table.o(.init_call.1.1)
 <LI><a href="#[2f]">cotex_m_vector_entry</a> from vector_table.o(i.cotex_m_vector_entry) referenced 250 times from vector_table.o(vtor_table)
 <LI><a href="#[141]">device_core_init</a> from device.o(i.device_core_init) referenced from device.o(.init_call.1.3)
 <LI><a href="#[76]">device_halt</a> from device.o(i.device_halt) referenced from device.o(i.os_device_register)
 <LI><a href="#[77]">device_release</a> from device.o(i.device_release) referenced from device.o(i.os_device_register)
 <LI><a href="#[60]">dlog_async_output_task_entry</a> from dlog.o(i.dlog_async_output_task_entry) referenced from dlog.o(i.dlog_init)
 <LI><a href="#[14b]">dlog_console_backend_init</a> from console_backend.o(i.dlog_console_backend_init) referenced from console_backend.o(.init_call.3.2)
 <LI><a href="#[5f]">dlog_console_backend_output</a> from console_backend.o(i.dlog_console_backend_output) referenced from console_backend.o(i.dlog_console_backend_init)
 <LI><a href="#[146]">dlog_init</a> from dlog.o(i.dlog_init) referenced from dlog.o(.init_call.3.1)
 <LI><a href="#[11e]">esp8266_at_test</a> from esp8266_general.o(i.esp8266_at_test) referenced from esp8266.o(.constdata)
 <LI><a href="#[168]">esp8266_auto_create</a> from esp8266.o(i.esp8266_auto_create) referenced from esp8266.o(.init_call.5.2)
 <LI><a href="#[124]">esp8266_get_dnsserver</a> from esp8266_ifconfig.o(i.esp8266_get_dnsserver) referenced from esp8266.o(.constdata)
 <LI><a href="#[11f]">esp8266_get_firmware_version</a> from esp8266_general.o(i.esp8266_get_firmware_version) referenced from esp8266.o(.constdata)
 <LI><a href="#[122]">esp8266_get_ipaddr</a> from esp8266_ifconfig.o(i.esp8266_get_ipaddr) referenced from esp8266.o(.constdata)
 <LI><a href="#[121]">esp8266_ifconfig</a> from esp8266_ifconfig.o(i.esp8266_ifconfig) referenced from esp8266.o(.constdata)
 <LI><a href="#[128]">esp8266_netconn_bind</a> from esp8266_netconn.o(i.esp8266_netconn_bind) referenced from esp8266.o(.constdata)
 <LI><a href="#[127]">esp8266_netconn_connect</a> from esp8266_netconn.o(i.esp8266_netconn_connect) referenced from esp8266.o(.constdata)
 <LI><a href="#[125]">esp8266_netconn_create</a> from esp8266_netconn.o(i.esp8266_netconn_create) referenced from esp8266.o(.constdata)
 <LI><a href="#[126]">esp8266_netconn_destroy</a> from esp8266_netconn.o(i.esp8266_netconn_destroy) referenced from esp8266.o(.constdata)
 <LI><a href="#[12c]">esp8266_netconn_get_info</a> from esp8266_netconn.o(i.esp8266_netconn_get_info) referenced from esp8266.o(.constdata)
 <LI><a href="#[12b]">esp8266_netconn_gethostbyname</a> from esp8266_netconn.o(i.esp8266_netconn_gethostbyname) referenced from esp8266.o(.constdata)
 <LI><a href="#[12a]">esp8266_netconn_send</a> from esp8266_netconn.o(i.esp8266_netconn_send) referenced from esp8266.o(.constdata)
 <LI><a href="#[129]">esp8266_netconn_sendto</a> from esp8266_netconn.o(i.esp8266_netconn_sendto) referenced from esp8266.o(.constdata)
 <LI><a href="#[120]">esp8266_ping</a> from esp8266_ping.o(i.esp8266_ping) referenced from esp8266.o(.constdata)
 <LI><a href="#[123]">esp8266_set_dnsserver</a> from esp8266_ifconfig.o(i.esp8266_set_dnsserver) referenced from esp8266.o(.constdata)
 <LI><a href="#[136]">esp8266_wifi_connect_ap</a> from esp8266_wifi.o(i.esp8266_wifi_connect_ap) referenced from esp8266.o(.constdata)
 <LI><a href="#[137]">esp8266_wifi_disconnect_ap</a> from esp8266_wifi.o(i.esp8266_wifi_disconnect_ap) referenced from esp8266.o(.constdata)
 <LI><a href="#[132]">esp8266_wifi_get_ap_cip</a> from esp8266_wifi.o(i.esp8266_wifi_get_ap_cip) referenced from esp8266.o(.constdata)
 <LI><a href="#[134]">esp8266_wifi_get_ap_mac</a> from esp8266_wifi.o(i.esp8266_wifi_get_ap_mac) referenced from esp8266.o(.constdata)
 <LI><a href="#[12e]">esp8266_wifi_get_mode</a> from esp8266_wifi.o(i.esp8266_wifi_get_mode) referenced from esp8266.o(.constdata)
 <LI><a href="#[130]">esp8266_wifi_get_sta_cip</a> from esp8266_wifi.o(i.esp8266_wifi_get_sta_cip) referenced from esp8266.o(.constdata)
 <LI><a href="#[133]">esp8266_wifi_get_sta_mac</a> from esp8266_wifi.o(i.esp8266_wifi_get_sta_mac) referenced from esp8266.o(.constdata)
 <LI><a href="#[12f]">esp8266_wifi_get_stat</a> from esp8266_wifi.o(i.esp8266_wifi_get_stat) referenced from esp8266.o(.constdata)
 <LI><a href="#[135]">esp8266_wifi_scan_info</a> from esp8266_wifi.o(i.esp8266_wifi_scan_info) referenced from esp8266.o(.constdata)
 <LI><a href="#[131]">esp8266_wifi_set_ap_cip</a> from esp8266_wifi.o(i.esp8266_wifi_set_ap_cip) referenced from esp8266.o(.constdata)
 <LI><a href="#[12d]">esp8266_wifi_set_mode</a> from esp8266_wifi.o(i.esp8266_wifi_set_mode) referenced from esp8266.o(.constdata)
 <LI><a href="#[138]">esp8266_wifi_start_ap</a> from esp8266_wifi.o(i.esp8266_wifi_start_ap) referenced from esp8266.o(.constdata)
 <LI><a href="#[139]">esp8266_wifi_stop_ap</a> from esp8266_wifi.o(i.esp8266_wifi_stop_ap) referenced from esp8266.o(.constdata)
 <LI><a href="#[15d]">fal_part_init</a> from fal_part.o(i.fal_part_init) referenced from fal_part.o(.init_call.4.3)
 <LI><a href="#[166]">fat_init</a> from vfs_fatfs.o(i.fat_init) referenced from vfs_fatfs.o(.init_call.5.2)
 <LI><a href="#[c4]">i2c_bit_transfer</a> from soft_i2c_bus.o(i.i2c_bit_transfer) referenced from soft_i2c_bus.o(.constdata)
 <LI><a href="#[b7]">i2c_bus_device_control</a> from i2c.o(i.i2c_bus_device_control) referenced from i2c.o(.constdata)
 <LI><a href="#[b5]">i2c_bus_device_read</a> from i2c.o(i.i2c_bus_device_read) referenced from i2c.o(.constdata)
 <LI><a href="#[b6]">i2c_bus_device_write</a> from i2c.o(i.i2c_bus_device_write) referenced from i2c.o(.constdata)
 <LI><a href="#[61]">infrared_rx_pin_callback</a> from infrared.o(i.infrared_rx_pin_callback) referenced from infrared.o(i.infrared_recv_init)
 <LI><a href="#[62]">infrared_rx_timer_callback</a> from infrared.o(i.infrared_rx_timer_callback) referenced from infrared.o(i.infrared_timer_init)
 <LI><a href="#[7c]">irq_callback</a> from sensor.o(i.irq_callback) referenced from sensor.o(i.os_sensor_irq_init)
 <LI><a href="#[39]">isspace</a> from isspace.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[15]">k_firstfit_mem_init</a> from os_mem_firstfit.o(i.k_firstfit_mem_init) referenced 2 times from os_memory.o(.data)
 <LI><a href="#[167]">libc_system_init</a> from libc.o(i.libc_system_init) referenced from libc.o(.init_call.5.2)
 <LI><a href="#[185]">list_infrared</a> from infrared.o(i.list_infrared) referenced from infrared.o(FSymTab)
 <LI><a href="#[5a]">mo_event_callback</a> from mo_socket.o(i.mo_event_callback) referenced from mo_socket.o(i.alloc_socket)
 <LI><a href="#[24]">mpu6xxx_control</a> from sensor_inven_mpu6xxx.o(i.mpu6xxx_control) referenced 2 times from sensor_inven_mpu6xxx.o(.data)
 <LI><a href="#[23]">mpu6xxx_fetch_data</a> from sensor_inven_mpu6xxx.o(i.mpu6xxx_fetch_data) referenced 2 times from sensor_inven_mpu6xxx.o(.data)
 <LI><a href="#[192]">mpu6xxx_test</a> from mpu6xxx.o(i.mpu6xxx_test) referenced from mpu6xxx.o(FSymTab)
 <LI><a href="#[cb]">msd_blk_read_block</a> from spi_msd.o(i.msd_blk_read_block) referenced from spi_msd.o(.constdata)
 <LI><a href="#[cc]">msd_blk_write_block</a> from spi_msd.o(i.msd_blk_write_block) referenced from spi_msd.o(.constdata)
 <LI><a href="#[cd]">msd_sdhc_blk_read_block</a> from spi_msd.o(i.msd_sdhc_blk_read_block) referenced from spi_msd.o(.constdata)
 <LI><a href="#[ce]">msd_sdhc_blk_write_block</a> from spi_msd.o(i.msd_sdhc_blk_write_block) referenced from spi_msd.o(.constdata)
 <LI><a href="#[194]">onenet_mqtts_device_end</a> from onenet_mqtts.o(i.onenet_mqtts_device_end) referenced from onenet_mqtts.o(FSymTab)
 <LI><a href="#[193]">onenet_mqtts_device_start</a> from onenet_mqtts.o(i.onenet_mqtts_device_start) referenced from onenet_mqtts.o(FSymTab)
 <LI><a href="#[73]">onenet_mqtts_device_thread_func</a> from onenet_mqtts.o(i.onenet_mqtts_device_thread_func) referenced from onenet_mqtts.o(i.onenet_mqtts_device_start)
 <LI><a href="#[195]">onenet_mqtts_publish</a> from onenet_mqtts.o(i.onenet_mqtts_publish) referenced from onenet_mqtts.o(FSymTab)
 <LI><a href="#[16d]">onenet_upload_cycle_start</a> from onenet_process.o(i.onenet_upload_cycle_start) referenced from onenet_process.o(FSymTab)
 <LI><a href="#[16e]">onenet_upload_cycle_stop</a> from onenet_process.o(i.onenet_upload_cycle_stop) referenced from onenet_process.o(FSymTab)
 <LI><a href="#[74]">onenet_upload_data_task_func</a> from onenet_process.o(i.onenet_upload_data_task_func) referenced from onenet_process.o(i.onenet_upload_cycle_start)
 <LI><a href="#[7f]">oneos_disconnect</a> from onenet_mqtts.o(i.oneos_disconnect) referenced from onenet_mqtts.o(i.register_network_init)
 <LI><a href="#[7d]">oneos_read</a> from onenet_mqtts.o(i.oneos_read) referenced from onenet_mqtts.o(i.register_network_init)
 <LI><a href="#[7e]">oneos_write</a> from onenet_mqtts.o(i.oneos_write) referenced from onenet_mqtts.o(i.register_network_init)
 <LI><a href="#[b3]">os_can_control</a> from can.o(i.os_can_control) referenced from can.o(.constdata)
 <LI><a href="#[b0]">os_can_deinit</a> from can.o(i.os_can_deinit) referenced from can.o(.constdata)
 <LI><a href="#[af]">os_can_init</a> from can.o(i.os_can_init) referenced from can.o(.constdata)
 <LI><a href="#[b1]">os_can_read</a> from can.o(i.os_can_read) referenced from can.o(.constdata)
 <LI><a href="#[b2]">os_can_write</a> from can.o(i.os_can_write) referenced from can.o(.constdata)
 <LI><a href="#[b4]">os_clockevent_deinit</a> from clockevent.o(i.os_clockevent_deinit) referenced from clockevent.o(.constdata)
 <LI><a href="#[75]">os_clockevent_valid_handler</a> from clockevent.o(i.os_clockevent_valid_handler) referenced from clockevent.o(i.os_clockevent_valid)
 <LI><a href="#[14c]">os_console_init</a> from console.o(i.os_console_init) referenced from console.o(.init_call.3.2)
 <LI><a href="#[13e]">os_core_init_start</a> from os_startup.o(i.os_core_init_start) referenced from os_startup.o(.init_call.1.)
 <LI><a href="#[e4]">os_graphic_control</a> from graphic.o(i.os_graphic_control) referenced from graphic.o(.constdata)
 <LI><a href="#[78]">os_hrtimer_callback</a> from hrtimer.o(i.os_hrtimer_callback) referenced from hrtimer.o(i.os_hrtimer_init)
 <LI><a href="#[14f]">os_hrtimer_init</a> from hrtimer.o(i.os_hrtimer_init) referenced from hrtimer.o(.init_call.3.3)
 <LI><a href="#[161]">os_hw_aht10_humi_init</a> from aht10.o(i.os_hw_aht10_humi_init) referenced from aht10.o(.init_call.4.3)
 <LI><a href="#[160]">os_hw_aht10_temp_init</a> from aht10.o(i.os_hw_aht10_temp_init) referenced from aht10.o(.init_call.4.3)
 <LI><a href="#[164]">os_hw_ap3216c_ir_init</a> from ap3216c.o(i.os_hw_ap3216c_ir_init) referenced from ap3216c.o(.init_call.4.3)
 <LI><a href="#[162]">os_hw_ap3216c_light_init</a> from ap3216c.o(i.os_hw_ap3216c_light_init) referenced from ap3216c.o(.init_call.4.3)
 <LI><a href="#[163]">os_hw_ap3216c_proximity_init</a> from ap3216c.o(i.os_hw_ap3216c_proximity_init) referenced from ap3216c.o(.init_call.4.3)
 <LI><a href="#[15b]">os_hw_audio_player_init</a> from es8388.o(i.os_hw_audio_player_init) referenced from es8388.o(.init_call.4.3)
 <LI><a href="#[15c]">os_hw_audio_recorder_init</a> from es8388.o(i.os_hw_audio_recorder_init) referenced from es8388.o(.init_call.4.3)
 <LI><a href="#[140]">os_hw_board_init</a> from drv_common.o(i.os_hw_board_init) referenced from drv_common.o(.init_call.1.2)
 <LI><a href="#[15f]">os_hw_infrared_init</a> from infrared.o(i.os_hw_infrared_init) referenced from infrared.o(.init_call.4.3)
 <LI><a href="#[156]">os_hw_lcd_init</a> from st7789vw.o(i.os_hw_lcd_init) referenced from st7789vw.o(.init_call.4.1)
 <LI><a href="#[16a]">os_hw_mpu6xxx_port</a> from mpu6xxx_port.o(i.os_hw_mpu6xxx_port) referenced from mpu6xxx_port.o(.init_call.6.1)
 <LI><a href="#[155]">os_hw_spi_tfcard</a> from spi_tfcard.o(i.os_hw_spi_tfcard) referenced from spi_tfcard.o(.init_call.4.1)
 <LI><a href="#[16c]">os_init_end</a> from os_startup.o(i.os_init_end) referenced from os_startup.o(.init_call.7.end)
 <LI><a href="#[143]">os_postcore_init_start</a> from os_startup.o(i.os_postcore_init_start) referenced from os_startup.o(.init_call.1.end)
 <LI><a href="#[10c]">os_rtc_control</a> from drv_rtc.o(i.os_rtc_control) referenced from drv_rtc.o(.constdata)
 <LI><a href="#[13d]">os_sensor_control</a> from sensor.o(i.os_sensor_control) referenced from sensor.o(.constdata)
 <LI><a href="#[13b]">os_sensor_deinit</a> from sensor.o(i.os_sensor_deinit) referenced from sensor.o(.constdata)
 <LI><a href="#[13a]">os_sensor_init</a> from sensor.o(i.os_sensor_init) referenced from sensor.o(.constdata)
 <LI><a href="#[13c]">os_sensor_read</a> from sensor.o(i.os_sensor_read) referenced from sensor.o(.constdata)
 <LI><a href="#[c1]">os_serial_control</a> from serial.o(i.os_serial_control) referenced from serial.o(.constdata)
 <LI><a href="#[be]">os_serial_deinit</a> from serial.o(i.os_serial_deinit) referenced from serial.o(.constdata)
 <LI><a href="#[bd]">os_serial_init</a> from serial.o(i.os_serial_init) referenced from serial.o(.constdata)
 <LI><a href="#[bf]">os_serial_read</a> from serial.o(i.os_serial_read) referenced from serial.o(.constdata)
 <LI><a href="#[c0]">os_serial_write</a> from serial.o(i.os_serial_write) referenced from serial.o(.constdata)
 <LI><a href="#[82]">os_sflash_fal_erase_block</a> from sflash.o(i.os_sflash_fal_erase_block) referenced from sflash.o(i.sflash_init)
 <LI><a href="#[80]">os_sflash_fal_read_page</a> from sflash.o(i.os_sflash_fal_read_page) referenced from sflash.o(i.sflash_init)
 <LI><a href="#[81]">os_sflash_fal_write_page</a> from sflash.o(i.os_sflash_fal_write_page) referenced from sflash.o(i.sflash_init)
 <LI><a href="#[4]">os_tick_handler</a> from drv_common.o(i.os_tick_handler) referenced 2 times from hrtimer.o(.data)
 <LI><a href="#[d1]">os_watchdog_control</a> from watchdog.o(i.os_watchdog_control) referenced from watchdog.o(.constdata)
 <LI><a href="#[d0]">os_watchdog_deinit</a> from watchdog.o(i.os_watchdog_deinit) referenced from watchdog.o(.constdata)
 <LI><a href="#[cf]">os_watchdog_init</a> from watchdog.o(i.os_watchdog_init) referenced from watchdog.o(.constdata)
 <LI><a href="#[175]">reboot</a> from driver.o(i.reboot) referenced from driver.o(FSymTab)
 <LI><a href="#[165]">remote_control_atk_init</a> from remote_control_atk.o(i.remote_control_atk_init) referenced from remote_control_atk.o(.init_call.43)
 <LI><a href="#[ab]">sai_control</a> from sai.o(i.sai_control) referenced from sai.o(.constdata)
 <LI><a href="#[a9]">sai_read</a> from sai.o(i.sai_read) referenced from sai.o(.constdata)
 <LI><a href="#[aa]">sai_write</a> from sai.o(i.sai_write) referenced from sai.o(.constdata)
 <LI><a href="#[7a]">serial_halt</a> from serial.o(i.serial_halt) referenced from serial.o(i.os_hw_serial_register)
 <LI><a href="#[7b]">serial_release</a> from serial.o(i.serial_release) referenced from serial.o(i.os_hw_serial_register)
 <LI><a href="#[c2]">sfbus_spi_configure</a> from sfbus.o(i.sfbus_spi_configure) referenced from sfbus.o(.constdata)
 <LI><a href="#[c3]">sfbus_spi_transfer</a> from sfbus.o(i.sfbus_spi_transfer) referenced from sfbus.o(.constdata)
 <LI><a href="#[158]">sflash_init</a> from sflash.o(i.sflash_init) referenced from sflash.o(.init_call.4.2)
 <LI><a href="#[179]">sh_cat</a> from fs_cmd.o(i.sh_cat) referenced from fs_cmd.o(FSymTab)
 <LI><a href="#[17c]">sh_cd</a> from fs_cmd.o(i.sh_cd) referenced from fs_cmd.o(FSymTab)
 <LI><a href="#[180]">sh_cp</a> from fs_cmd.o(i.sh_cp) referenced from fs_cmd.o(FSymTab)
 <LI><a href="#[182]">sh_df</a> from fs_cmd.o(i.sh_df) referenced from fs_cmd.o(FSymTab)
 <LI><a href="#[173]">sh_dlog_flush</a> from dlog.o(i.sh_dlog_flush) referenced from dlog.o(FSymTab)
 <LI><a href="#[172]">sh_dlog_gkw_ctrl</a> from dlog.o(i.sh_dlog_gkw_ctrl) referenced from dlog.o(FSymTab)
 <LI><a href="#[16f]">sh_dlog_glvl_ctrl</a> from dlog.o(i.sh_dlog_glvl_ctrl) referenced from dlog.o(FSymTab)
 <LI><a href="#[171]">sh_dlog_gtag_ctrl</a> from dlog.o(i.sh_dlog_gtag_ctrl) referenced from dlog.o(FSymTab)
 <LI><a href="#[170]">sh_dlog_tlvl_ctrl</a> from dlog.o(i.sh_dlog_tlvl_ctrl) referenced from dlog.o(FSymTab)
 <LI><a href="#[17a]">sh_echo</a> from fs_cmd.o(i.sh_echo) referenced from fs_cmd.o(FSymTab)
 <LI><a href="#[184]">sh_fdshow</a> from vfs_fd.o(i.sh_fdshow) referenced from vfs_fd.o(FSymTab)
 <LI><a href="#[197]">sh_help</a> from shell_buildin_cmd.o(i.sh_help) referenced from shell_buildin_cmd.o(FSymTab)
 <LI><a href="#[174]">sh_list_device</a> from device.o(i.sh_list_device) referenced from device.o(FSymTab)
 <LI><a href="#[17b]">sh_ls</a> from fs_cmd.o(i.sh_ls) referenced from fs_cmd.o(FSymTab)
 <LI><a href="#[18b]">sh_memcheck</a> from os_memory.o(i.sh_memcheck) referenced from os_memory.o(FSymTab)
 <LI><a href="#[189]">sh_memheap_show</a> from os_memory.o(i.sh_memheap_show) referenced from os_memory.o(FSymTab)
 <LI><a href="#[18a]">sh_memshow</a> from os_memory.o(i.sh_memshow) referenced from os_memory.o(FSymTab)
 <LI><a href="#[17e]">sh_mkdir</a> from fs_cmd.o(i.sh_mkdir) referenced from fs_cmd.o(FSymTab)
 <LI><a href="#[183]">sh_mkfs</a> from fs_cmd.o(i.sh_mkfs) referenced from fs_cmd.o(FSymTab)
 <LI><a href="#[181]">sh_mv</a> from fs_cmd.o(i.sh_mv) referenced from fs_cmd.o(FSymTab)
 <LI><a href="#[176]">sh_pin_mode</a> from pin.o(i.sh_pin_mode) referenced from pin.o(FSymTab)
 <LI><a href="#[178]">sh_pin_read</a> from pin.o(i.sh_pin_read) referenced from pin.o(FSymTab)
 <LI><a href="#[177]">sh_pin_write</a> from pin.o(i.sh_pin_write) referenced from pin.o(FSymTab)
 <LI><a href="#[83]">sh_print_device_info</a> from device.o(i.sh_print_device_info) referenced from device.o(i.sh_list_device)
 <LI><a href="#[17d]">sh_pwd</a> from fs_cmd.o(i.sh_pwd) referenced from fs_cmd.o(FSymTab)
 <LI><a href="#[191]">sh_query_oneos_version</a> from os_version.o(i.sh_query_oneos_version) referenced from os_version.o(FSymTab)
 <LI><a href="#[17f]">sh_rm</a> from fs_cmd.o(i.sh_rm) referenced from fs_cmd.o(FSymTab)
 <LI><a href="#[85]">sh_rx_ind</a> from shell_main.o(i.sh_rx_ind) referenced from shell_main.o(i.sh_system_init)
 <LI><a href="#[196]">sh_set_prompt</a> from shell_buildin_cmd.o(i.sh_set_prompt) referenced from shell_buildin_cmd.o(FSymTab)
 <LI><a href="#[186]">sh_show_event_info</a> from os_event.o(i.sh_show_event_info) referenced from os_event.o(FSymTab)
 <LI><a href="#[187]">sh_show_mb_info</a> from os_mb.o(i.sh_show_mb_info) referenced from os_mb.o(FSymTab)
 <LI><a href="#[188]">sh_show_mempool_info</a> from os_mem_pool.o(i.sh_show_mempool_info) referenced from os_mem_pool.o(FSymTab)
 <LI><a href="#[18c]">sh_show_mq_info</a> from os_mq.o(i.sh_show_mq_info) referenced from os_mq.o(FSymTab)
 <LI><a href="#[18d]">sh_show_mutex_info</a> from os_mutex.o(i.sh_show_mutex_info) referenced from os_mutex.o(FSymTab)
 <LI><a href="#[18e]">sh_show_sem_info</a> from os_sem.o(i.sh_show_sem_info) referenced from os_sem.o(FSymTab)
 <LI><a href="#[18f]">sh_show_task_info</a> from os_task.o(i.sh_show_task_info) referenced from os_task.o(FSymTab)
 <LI><a href="#[190]">sh_show_timer_info</a> from os_timer.o(i.sh_show_timer_info) referenced from os_timer.o(FSymTab)
 <LI><a href="#[169]">sh_system_init</a> from shell_main.o(i.sh_system_init) referenced from shell_main.o(.init_call.5.3)
 <LI><a href="#[84]">sh_task_entry</a> from shell_main.o(i.sh_task_entry) referenced from shell_main.o(i.sh_system_init)
 <LI><a href="#[1f2]">soft_i2c_bus_probe</a> from soft_i2c_bus.o(i.soft_i2c_bus_probe) referenced from soft_i2c_bus.o(driver_table)
 <LI><a href="#[113]">spi_configure</a> from drv_spi.o(i.spi_configure) referenced from drv_spi.o(.constdata)
 <LI><a href="#[114]">spixfer</a> from drv_spi.o(i.spixfer) referenced from drv_spi.o(.constdata)
 <LI><a href="#[e7]">st7789_display_area</a> from st7789vw.o(i.st7789_display_area) referenced from st7789vw.o(.constdata)
 <LI><a href="#[e5]">st7789_display_on</a> from st7789vw.o(i.st7789_display_on) referenced from st7789vw.o(.constdata)
 <LI><a href="#[e6]">st7789_frame_flush</a> from st7789vw.o(i.st7789_frame_flush) referenced from st7789vw.o(.constdata)
 <LI><a href="#[e8]">stm32_can_config</a> from drv_can.o(i.stm32_can_config) referenced from drv_can.o(.constdata)
 <LI><a href="#[e9]">stm32_can_control</a> from drv_can.o(i.stm32_can_control) referenced from drv_can.o(.constdata)
 <LI><a href="#[1f3]">stm32_can_probe</a> from drv_can.o(i.stm32_can_probe) referenced from drv_can.o(driver_table)
 <LI><a href="#[ee]">stm32_can_recv_state</a> from drv_can.o(i.stm32_can_recv_state) referenced from drv_can.o(.constdata)
 <LI><a href="#[ec]">stm32_can_start_recv</a> from drv_can.o(i.stm32_can_start_recv) referenced from drv_can.o(.constdata)
 <LI><a href="#[ea]">stm32_can_start_send</a> from drv_can.o(i.stm32_can_start_send) referenced from drv_can.o(.constdata)
 <LI><a href="#[ed]">stm32_can_stop_recv</a> from drv_can.o(i.stm32_can_stop_recv) referenced from drv_can.o(.constdata)
 <LI><a href="#[eb]">stm32_can_stop_send</a> from drv_can.o(i.stm32_can_stop_send) referenced from drv_can.o(.constdata)
 <LI><a href="#[ef]">stm32_crc_config</a> from drv_crypto_crc.o(i.stm32_crc_config) referenced from drv_crypto_crc.o(.constdata)
 <LI><a href="#[f3]">stm32_crc_crypto_clone</a> from drv_crypto_crc.o(i.stm32_crc_crypto_clone) referenced from drv_crypto_crc.o(.constdata)
 <LI><a href="#[f1]">stm32_crc_crypto_create</a> from drv_crypto_crc.o(i.stm32_crc_crypto_create) referenced from drv_crypto_crc.o(.constdata)
 <LI><a href="#[f2]">stm32_crc_crypto_destroy</a> from drv_crypto_crc.o(i.stm32_crc_crypto_destroy) referenced from drv_crypto_crc.o(.constdata)
 <LI><a href="#[f4]">stm32_crc_crypto_reset</a> from drv_crypto_crc.o(i.stm32_crc_crypto_reset) referenced from drv_crypto_crc.o(.constdata)
 <LI><a href="#[1f4]">stm32_crc_probe</a> from drv_crypto_crc.o(i.stm32_crc_probe) referenced from drv_crypto_crc.o(driver_table)
 <LI><a href="#[f0]">stm32_crc_update</a> from drv_crypto_crc.o(i.stm32_crc_update) referenced from drv_crypto_crc.o(.constdata)
 <LI><a href="#[88]">stm32_flash_erase_block</a> from drv_flash_l4.o(i.stm32_flash_erase_block) referenced from drv_flash_l4.o(i.stm32_flash_probe)
 <LI><a href="#[1f6]">stm32_flash_probe</a> from drv_flash_l4.o(i.stm32_flash_probe) referenced from drv_flash_l4.o(driver_table)
 <LI><a href="#[86]">stm32_flash_read_page</a> from drv_flash_l4.o(i.stm32_flash_read_page) referenced from drv_flash_l4.o(i.stm32_flash_probe)
 <LI><a href="#[87]">stm32_flash_write_page</a> from drv_flash_l4.o(i.stm32_flash_write_page) referenced from drv_flash_l4.o(i.stm32_flash_probe)
 <LI><a href="#[103]">stm32_iwdt_control</a> from drv_iwdg.o(i.stm32_iwdt_control) referenced from drv_iwdg.o(.constdata)
 <LI><a href="#[102]">stm32_iwdt_init</a> from drv_iwdg.o(i.stm32_iwdt_init) referenced from drv_iwdg.o(.constdata)
 <LI><a href="#[1f8]">stm32_iwdt_probe</a> from drv_iwdg.o(i.stm32_iwdt_probe) referenced from drv_iwdg.o(driver_table)
 <LI><a href="#[1f9]">stm32_lptim_probe</a> from drv_lptim.o(i.stm32_lptim_probe) referenced from drv_lptim.o(driver_table)
 <LI><a href="#[106]">stm32_lptimer_read</a> from drv_lptim.o(i.stm32_lptimer_read) referenced from drv_lptim.o(.constdata)
 <LI><a href="#[104]">stm32_lptimer_start</a> from drv_lptim.o(i.stm32_lptimer_start) referenced from drv_lptim.o(.constdata)
 <LI><a href="#[105]">stm32_lptimer_stop</a> from drv_lptim.o(i.stm32_lptimer_stop) referenced from drv_lptim.o(.constdata)
 <LI><a href="#[fd]">stm32_pin_attach_irq</a> from drv_gpio.o(i.stm32_pin_attach_irq) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[fe]">stm32_pin_dettach_irq</a> from drv_gpio.o(i.stm32_pin_dettach_irq) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[ff]">stm32_pin_irq_enable</a> from drv_gpio.o(i.stm32_pin_irq_enable) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[fa]">stm32_pin_mode</a> from drv_gpio.o(i.stm32_pin_mode) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[fc]">stm32_pin_read</a> from drv_gpio.o(i.stm32_pin_read) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[fb]">stm32_pin_write</a> from drv_gpio.o(i.stm32_pin_write) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[107]">stm32_pwm_enabled</a> from drv_pwm.o(i.stm32_pwm_enabled) referenced from drv_pwm.o(.constdata)
 <LI><a href="#[108]">stm32_pwm_set_period</a> from drv_pwm.o(i.stm32_pwm_set_period) referenced from drv_pwm.o(.constdata)
 <LI><a href="#[109]">stm32_pwm_set_pulse</a> from drv_pwm.o(i.stm32_pwm_set_pulse) referenced from drv_pwm.o(.constdata)
 <LI><a href="#[1fa]">stm32_qspi_bus_probe</a> from drv_qspi.o(i.stm32_qspi_bus_probe) referenced from drv_qspi.o(driver_table)
 <LI><a href="#[10a]">stm32_qspi_configure</a> from drv_qspi.o(i.stm32_qspi_configure) referenced from drv_qspi.o(.constdata)
 <LI><a href="#[10b]">stm32_qspi_transfer</a> from drv_qspi.o(i.stm32_qspi_transfer) referenced from drv_qspi.o(.constdata)
 <LI><a href="#[f8]">stm32_rng_crypto_clone</a> from drv_crypto_rng.o(i.stm32_rng_crypto_clone) referenced from drv_crypto_rng.o(.constdata)
 <LI><a href="#[f6]">stm32_rng_crypto_create</a> from drv_crypto_rng.o(i.stm32_rng_crypto_create) referenced from drv_crypto_rng.o(.constdata)
 <LI><a href="#[f7]">stm32_rng_crypto_destroy</a> from drv_crypto_rng.o(i.stm32_rng_crypto_destroy) referenced from drv_crypto_rng.o(.constdata)
 <LI><a href="#[f9]">stm32_rng_crypto_reset</a> from drv_crypto_rng.o(i.stm32_rng_crypto_reset) referenced from drv_crypto_rng.o(.constdata)
 <LI><a href="#[1f5]">stm32_rng_probe</a> from drv_crypto_rng.o(i.stm32_rng_probe) referenced from drv_crypto_rng.o(driver_table)
 <LI><a href="#[f5]">stm32_rng_rand</a> from drv_crypto_rng.o(i.stm32_rng_rand) referenced from drv_crypto_rng.o(.constdata)
 <LI><a href="#[1fb]">stm32_rtc_probe</a> from drv_rtc.o(i.stm32_rtc_probe) referenced from drv_rtc.o(driver_table)
 <LI><a href="#[10e]">stm32_sai_dma_receive</a> from drv_sai.o(i.stm32_sai_dma_receive) referenced from drv_sai.o(.constdata)
 <LI><a href="#[110]">stm32_sai_dma_rx_enable</a> from drv_sai.o(i.stm32_sai_dma_rx_enable) referenced from drv_sai.o(.constdata)
 <LI><a href="#[10d]">stm32_sai_dma_transmit</a> from drv_sai.o(i.stm32_sai_dma_transmit) referenced from drv_sai.o(.constdata)
 <LI><a href="#[10f]">stm32_sai_dma_tx_enable</a> from drv_sai.o(i.stm32_sai_dma_tx_enable) referenced from drv_sai.o(.constdata)
 <LI><a href="#[1fc]">stm32_sai_probe</a> from drv_sai.o(i.stm32_sai_probe) referenced from drv_sai.o(driver_table)
 <LI><a href="#[112]">stm32_sai_set_channel</a> from drv_sai.o(i.stm32_sai_set_channel) referenced from drv_sai.o(.constdata)
 <LI><a href="#[111]">stm32_sai_set_frq</a> from drv_sai.o(i.stm32_sai_set_frq) referenced from drv_sai.o(.constdata)
 <LI><a href="#[8f]">stm32_sdma_dma_get_index</a> from drv_usart.o(i.stm32_sdma_dma_get_index) referenced from drv_usart.o(i.stm32_usart_sdma_init)
 <LI><a href="#[90]">stm32_sdma_dma_start</a> from drv_usart.o(i.stm32_sdma_dma_start) referenced from drv_usart.o(i.stm32_usart_sdma_init)
 <LI><a href="#[91]">stm32_sdma_dma_stop</a> from drv_usart.o(i.stm32_sdma_dma_stop) referenced from drv_usart.o(i.stm32_usart_sdma_init)
 <LI><a href="#[8c]">stm32_sdma_int_get_index</a> from drv_usart.o(i.stm32_sdma_int_get_index) referenced from drv_usart.o(i.stm32_usart_sdma_init)
 <LI><a href="#[8d]">stm32_sdma_int_start</a> from drv_usart.o(i.stm32_sdma_int_start) referenced from drv_usart.o(i.stm32_usart_sdma_init)
 <LI><a href="#[8e]">stm32_sdma_int_stop</a> from drv_usart.o(i.stm32_sdma_int_stop) referenced from drv_usart.o(i.stm32_usart_sdma_init)
 <LI><a href="#[1fd]">stm32_spi_probe</a> from drv_spi.o(i.stm32_spi_probe) referenced from drv_spi.o(driver_table)
 <LI><a href="#[1f7]">stm32_tim_probe</a> from drv_hwtimer.o(i.stm32_tim_probe) referenced from drv_hwtimer.o(driver_table)
 <LI><a href="#[89]">stm32_timer_read</a> from drv_hwtimer.o(i.stm32_timer_read) referenced from drv_hwtimer.o(.constdata)
 <LI><a href="#[89]">stm32_timer_read</a> from drv_hwtimer.o(i.stm32_timer_read) referenced from drv_hwtimer.o(i.stm32_tim_probe)
 <LI><a href="#[100]">stm32_timer_start</a> from drv_hwtimer.o(i.stm32_timer_start) referenced from drv_hwtimer.o(.constdata)
 <LI><a href="#[101]">stm32_timer_stop</a> from drv_hwtimer.o(i.stm32_timer_stop) referenced from drv_hwtimer.o(.constdata)
 <LI><a href="#[116]">stm32_uart_deinit</a> from drv_usart.o(i.stm32_uart_deinit) referenced from drv_usart.o(.constdata)
 <LI><a href="#[8a]">stm32_uart_halt</a> from drv_usart.o(i.stm32_uart_halt) referenced from drv_usart.o(i.stm32_usart_probe)
 <LI><a href="#[115]">stm32_uart_init</a> from drv_usart.o(i.stm32_uart_init) referenced from drv_usart.o(.constdata)
 <LI><a href="#[118]">stm32_uart_poll_send</a> from drv_usart.o(i.stm32_uart_poll_send) referenced from drv_usart.o(.constdata)
 <LI><a href="#[8b]">stm32_uart_release</a> from drv_usart.o(i.stm32_uart_release) referenced from drv_usart.o(i.stm32_usart_probe)
 <LI><a href="#[117]">stm32_uart_start_send</a> from drv_usart.o(i.stm32_uart_start_send) referenced from drv_usart.o(.constdata)
 <LI><a href="#[1ff]">stm32_usart_early_probe</a> from drv_usart.o(i.stm32_usart_early_probe) referenced from drv_usart.o(driver_table)
 <LI><a href="#[1fe]">stm32_usart_probe</a> from drv_usart.o(i.stm32_usart_probe) referenced from drv_usart.o(driver_table)
 <LI><a href="#[92]">stm32_usart_sdma_callback</a> from drv_usart.o(i.stm32_usart_sdma_callback) referenced from drv_usart.o(i.stm32_usart_sdma_init)
 <LI><a href="#[200]">stm32_usbd_probe</a> from drv_usbd.o(i.stm32_usbd_probe) referenced from drv_usbd.o(driver_table)
 <LI><a href="#[72]">submessage_arrived_default_handler</a> from onenet_mqtts.o(i.submessage_arrived_default_handler) referenced from onenet_mqtts.o(i.onenet_mqtts_client_subscribe)
 <LI><a href="#[6f]">submessage_cmd_request_arrived_handler</a> from onenet_mqtts.o(i.submessage_cmd_request_arrived_handler) referenced from onenet_mqtts.o(i.mqtt_subscribe_message_handlers_init)
 <LI><a href="#[70]">submessage_cmd_response_result_arrived_handler</a> from onenet_mqtts.o(i.submessage_cmd_response_result_arrived_handler) referenced from onenet_mqtts.o(i.mqtt_subscribe_message_handlers_init)
 <LI><a href="#[71]">submessage_image_arrived_handler</a> from onenet_mqtts.o(i.submessage_image_arrived_handler) referenced from onenet_mqtts.o(i.mqtt_subscribe_message_handlers_init)
 <LI><a href="#[6d]">submessage_pubdata_accepted_arrived_handler</a> from onenet_mqtts.o(i.submessage_pubdata_accepted_arrived_handler) referenced from onenet_mqtts.o(i.mqtt_subscribe_message_handlers_init)
 <LI><a href="#[6e]">submessage_pubdata_rejected_arrived_handler</a> from onenet_mqtts.o(i.submessage_pubdata_rejected_arrived_handler) referenced from onenet_mqtts.o(i.mqtt_subscribe_message_handlers_init)
 <LI><a href="#[17]">urc_busy_p_func</a> from esp8266.o(i.urc_busy_p_func) referenced 2 times from esp8266.o(.data)
 <LI><a href="#[18]">urc_busy_s_func</a> from esp8266.o(i.urc_busy_s_func) referenced 2 times from esp8266.o(.data)
 <LI><a href="#[1c]">urc_close_func</a> from esp8266_netconn.o(i.urc_close_func) referenced 2 times from esp8266_netconn.o(.data)
 <LI><a href="#[1d]">urc_connect_func</a> from esp8266_wifi.o(i.urc_connect_func) referenced 4 times from esp8266_wifi.o(.data)
 <LI><a href="#[22]">urc_dist_sta_ip_func</a> from esp8266_wifi.o(i.urc_dist_sta_ip_func) referenced 2 times from esp8266_wifi.o(.data)
 <LI><a href="#[1f]">urc_ip_func</a> from esp8266_wifi.o(i.urc_ip_func) referenced 2 times from esp8266_wifi.o(.data)
 <LI><a href="#[1e]">urc_ipv6_func</a> from esp8266_wifi.o(i.urc_ipv6_func) referenced 2 times from esp8266_wifi.o(.data)
 <LI><a href="#[16]">urc_ready_func</a> from esp8266.o(i.urc_ready_func) referenced 2 times from esp8266.o(.data)
 <LI><a href="#[1b]">urc_recv_func</a> from esp8266_netconn.o(i.urc_recv_func) referenced 2 times from esp8266_netconn.o(.data)
 <LI><a href="#[1a]">urc_send_bfsz_func</a> from esp8266_netconn.o(i.urc_send_bfsz_func) referenced 2 times from esp8266_netconn.o(.data)
 <LI><a href="#[19]">urc_send_func</a> from esp8266_netconn.o(i.urc_send_func) referenced 4 times from esp8266_netconn.o(.data)
 <LI><a href="#[20]">urc_sta_connected_func</a> from esp8266_wifi.o(i.urc_sta_connected_func) referenced 2 times from esp8266_wifi.o(.data)
 <LI><a href="#[21]">urc_sta_disconnected_func</a> from esp8266_wifi.o(i.urc_sta_disconnected_func) referenced 2 times from esp8266_wifi.o(.data)
 <LI><a href="#[93]">usbd_hotplug_detect</a> from drv_usbd.o(i.usbd_hotplug_detect) referenced from drv_usbd.o(i.usbd_dectect_task_create)
 <LI><a href="#[16b]">usbd_start_init</a> from drv_usbd.o(i.usbd_start_init) referenced from drv_usbd.o(.init_call.7.1)
 <LI><a href="#[d3]">vfs_fat_close</a> from vfs_fatfs.o(i.vfs_fat_close) referenced from vfs_fatfs.o(.constdata)
 <LI><a href="#[d9]">vfs_fat_closedir</a> from vfs_fatfs.o(i.vfs_fat_closedir) referenced from vfs_fatfs.o(.constdata)
 <LI><a href="#[d6]">vfs_fat_lseek</a> from vfs_fatfs.o(i.vfs_fat_lseek) referenced from vfs_fatfs.o(.constdata)
 <LI><a href="#[e0]">vfs_fat_mkfs</a> from vfs_fatfs.o(i.vfs_fat_mkfs) referenced from vfs_fatfs.o(.constdata)
 <LI><a href="#[e2]">vfs_fat_mount</a> from vfs_fatfs.o(i.vfs_fat_mount) referenced from vfs_fatfs.o(.constdata)
 <LI><a href="#[d2]">vfs_fat_open</a> from vfs_fatfs.o(i.vfs_fat_open) referenced from vfs_fatfs.o(.constdata)
 <LI><a href="#[d8]">vfs_fat_opendir</a> from vfs_fatfs.o(i.vfs_fat_opendir) referenced from vfs_fatfs.o(.constdata)
 <LI><a href="#[d4]">vfs_fat_read</a> from vfs_fatfs.o(i.vfs_fat_read) referenced from vfs_fatfs.o(.constdata)
 <LI><a href="#[da]">vfs_fat_readdir</a> from vfs_fatfs.o(i.vfs_fat_readdir) referenced from vfs_fatfs.o(.constdata)
 <LI><a href="#[dd]">vfs_fat_rename</a> from vfs_fatfs.o(i.vfs_fat_rename) referenced from vfs_fatfs.o(.constdata)
 <LI><a href="#[db]">vfs_fat_seekdir</a> from vfs_fatfs.o(i.vfs_fat_seekdir) referenced from vfs_fatfs.o(.constdata)
 <LI><a href="#[df]">vfs_fat_stat</a> from vfs_fatfs.o(i.vfs_fat_stat) referenced from vfs_fatfs.o(.constdata)
 <LI><a href="#[e1]">vfs_fat_statfs</a> from vfs_fatfs.o(i.vfs_fat_statfs) referenced from vfs_fatfs.o(.constdata)
 <LI><a href="#[d7]">vfs_fat_sync</a> from vfs_fatfs.o(i.vfs_fat_sync) referenced from vfs_fatfs.o(.constdata)
 <LI><a href="#[dc]">vfs_fat_telldir</a> from vfs_fatfs.o(i.vfs_fat_telldir) referenced from vfs_fatfs.o(.constdata)
 <LI><a href="#[de]">vfs_fat_unlink</a> from vfs_fatfs.o(i.vfs_fat_unlink) referenced from vfs_fatfs.o(.constdata)
 <LI><a href="#[e3]">vfs_fat_unmount</a> from vfs_fatfs.o(i.vfs_fat_unmount) referenced from vfs_fatfs.o(.constdata)
 <LI><a href="#[d5]">vfs_fat_write</a> from vfs_fatfs.o(i.vfs_fat_write) referenced from vfs_fatfs.o(.constdata)
 <LI><a href="#[144]">vfs_init</a> from vfs_fs.o(i.vfs_init) referenced from vfs_fs.o(.init_call.2.1)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[201]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[203]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[205]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[822]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[823]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[824]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[825]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[206]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[826]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[207]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[243]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[209]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[20b]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[20d]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[20e]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[20f]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[211]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[213]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[214]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[215]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[217]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[827]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[219]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[21b]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[21d]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[828]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[229]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[21f]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[829]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[221]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[82a]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[82b]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[82c]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[82d]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[223]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[82e]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[82f]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[224]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[830]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[831]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[832]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[833]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[834]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[835]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[836]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[837]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[838]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[839]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[83a]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[83b]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[83c]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[22e]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[83d]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[83e]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[83f]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[840]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[841]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[842]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[843]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[204]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[844]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[226]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[228]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[845]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[22a]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; _k_startup &rArr; k_idle_task_init &rArr; os_task_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[846]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[284]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[22d]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[847]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[22f]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[453]"></a>os_irq_lock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arch_interrupt.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mp_free
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mp_destroy
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mp_alloc
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_control
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_audio_player_write
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clocksource_gettime_cs
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clocksource_update
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_stop
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_start_oneshot
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_can_control
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_rx
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_wait
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_post
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_schedule_locked
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_destroy
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_startup
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_lock_irqsave
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hrtimer_start
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_register
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_find
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_deinit
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_plug_put
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_plug_in
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_plug_get
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_tx
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_rx
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_schedule_unlock
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_schedule_lock
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_errno
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_normal_updata_buffer
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_increase
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_can_probe
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_infrared
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_rx_timer_callback
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_infrared_write
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_infrared_read
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_infrared_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_infrared_deinit
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_rtc_set_alarm_stamp
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_mode
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_irq_enable
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_dettach_irq
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_attach_irq
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_flash_write
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mb_send
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mb_recv
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_usbd_probe
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_usart_probe
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_uart_poll_send
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_probe
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_sai_probe
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_sai_dma_transmit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_sai_dma_receive
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mb_show
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_show
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_send
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_recv
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_deinit
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_show
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_recursive_unlock
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_recursive_lock
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mutex_deinit
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_show
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_recv
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_destroy
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mq_send
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_mempool_info
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_timer_info
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_set_timeout_ticks
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_is_active
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_destroy
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_create
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_task_entry
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_tsleep
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_show
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_task_exit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_recycle_task_entry
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_show
</UL>

<P><STRONG><a name="[454]"></a>os_irq_unlock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, arch_interrupt.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mp_free
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mp_destroy
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mp_alloc
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_control
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_audio_player_write
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clocksource_gettime_cs
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clocksource_update
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_stop
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_start_oneshot
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_can_control
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_rx
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_wait
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_post
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_schedule_locked
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_destroy
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_startup
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_unlock_irqrestore
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hrtimer_start
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_register
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_find
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_deinit
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_plug_put
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_plug_in
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_plug_get
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_tx
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_rx
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_schedule_unlock
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_schedule_lock
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_errno
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_normal_updata_buffer
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_increase
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_can_probe
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_infrared
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_rx_timer_callback
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_infrared_write
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_infrared_read
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_infrared_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_infrared_deinit
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_rtc_set_alarm_stamp
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_mode
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_irq_enable
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_dettach_irq
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_attach_irq
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_flash_write
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mb_send
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mb_recv
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_usbd_probe
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_usart_probe
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_uart_poll_send
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_probe
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_sai_probe
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_sai_dma_transmit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_sai_dma_receive
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mb_show
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_show
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_send
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_recv
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_deinit
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_show
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_recursive_unlock
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_recursive_lock
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mutex_deinit
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_show
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_recv
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_destroy
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mq_send
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_mempool_info
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_timer_info
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_set_timeout_ticks
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_is_active
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_destroy
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_create
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_task_entry
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_tsleep
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_show
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_task_exit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_recycle_task_entry
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_show
</UL>

<P><STRONG><a name="[41a]"></a>os_irq_disable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arch_interrupt.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sai_register
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_open
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_write
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_read
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_write_nonblock
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_es8388_transmit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_es8388_receive
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_es8388_recorder_stop
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_es8388_recorder_start
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_es8388_recorder_init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_es8388_recorder_deinit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_es8388_recorder_config
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_es8388_player_stop
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_es8388_player_start
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_es8388_player_init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_es8388_player_deinit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_es8388_player_config
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_audio_recorder_register
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_audio_recorder_read
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_audio_recorder_init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_audio_recorder_deinit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_audio_recorder_control
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mp_free
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mp_destroy
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mp_create
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mp_alloc
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_control
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_audio_player_register
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_audio_player_callback
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_audio_player_write
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_audio_player_init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_audio_player_deinit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_audio_player_control
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_stack_is_overflow
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clocksource_register
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clocksource_select
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_stop
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_start_oneshot
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_select_best
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_register
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_deinit
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;period_calc_next_nsec
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_calc_param
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_can_register
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_can_isr_txdone
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_can_isr_rxdone
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_can_write
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_can_read
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_can_init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_can_deinit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_can_control
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_rx
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_device_register
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_dev_control
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_wait
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_post
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_init
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_init
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_deinit
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_schedule_locked
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_voutput
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_global_lvl_set
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_unlock
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_tag_lvl_filter_set
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_tag_lvl_filter_get
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_tag_lvl_filter_del
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_lock
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_global_filter_tag_set
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_global_filter_kw_set
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_async_output_task_entry
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_arch_fault_exception
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_destroy
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_read_nonblock
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_send_ac
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_upload_data_task_func
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_upload_cycle_start
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_start
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_startup
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_create
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_write_block
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_open_s
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_close
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_init
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_backend_register
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_console_backend_output
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_ring_buff_space_len
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_ring_buff_put
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_ring_buff_init
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_ring_buff_get
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_ring_buff_data_len
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_unlock_irqrestore
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_lock_irqsave
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_lock_init
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbb_destroy
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbb_blk_put
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbb_blk_get
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbb_blk_free
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbb_blk_alloc
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opt_init
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;working_dir_set
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;working_dir_get
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vfs_conjunction_path
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;working_dir_init
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_unlock
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_lock
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_init
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vfs_mkfs_dev_ref
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vfs_mkfs_dev_deref
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vfs_fs_ops_get
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_fdshow
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_to_fp
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_ref_inc
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_ref_dec
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_alloc
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_ref_inc
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_ref_dec
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_check_valid
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_alloc
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_register
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mount_point_find_and_ref
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mount_point_deref
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_destroy
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_create
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_watchdog_register
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_watchdog_init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_watchdog_deinit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_watchdog_control
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hwcrypto_register
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hrtimer_init
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;period_calc_next_nsec
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hrtimer_enqueue
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_part_init
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_deinit
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_plug_put
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_plug_in
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_release
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_append_sflash_info
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_transfer_message
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_spi_device_attach
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_configure
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfbus_attach
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfbus_spi_transfer
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_ring_to_line
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_serial_register
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_serial_isr_txdone
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_serial_isr_rxdone
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_serial_write
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_serial_read
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_serial_init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_serial_deinit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_serial_control
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_tx
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_rx
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_tx
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_schedule_unlock
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_configure
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_write
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_read
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_control
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_i2c_master_recv
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_i2c_client_write
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_i2c_client_read
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_i2c_bus_device_register
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_write
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_read
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_control
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spidev_device_write
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spidev_device_read
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_write
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_read
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spidev_device_init
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_bus_device_init
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_transfer
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_take
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_send_then_send
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_send_then_recv
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_release
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_i2c_bus_probe
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_start
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_init
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_ring_to_ring
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_line_to_ring
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_normal_updata_buffer
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_normal_buffer_init
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_circular_buffer_init
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_write_page
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_read_page
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_init
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_erase_block
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_unlock_blocks
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_read_status
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_read_sfdp
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_prepare_cmds
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_find_flash_info_by_sfdp
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_rng_probe
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_rng_crypto_create
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_crc_probe
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_crc_crypto_create
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_can_stop_send
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_can_stop_recv
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_can_start_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_can_start_recv
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_can_recvmsg
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_can_probe
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_can_control
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_can_config
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_hw_config
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_frame_flush
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_lcd_init
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_graphic_register
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_graphic_control
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_infrared_write
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_infrared_read
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_rtc_probe
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rtc_control
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_qspi_xfer_command
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_qspi_bus_probe
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_lptimer_stop
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_lptimer_start
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_lptim_probe
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_iwdt_probe
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pwm_register
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_timer_stop
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_timer_start
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_timer_get_freq
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_tim_probe
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mb_send
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mb_recv
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mb_init
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dectect_task_create
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_usart_probe
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_uart_start_send
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_uart_poll_send
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_uart_init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_uart_deinit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_sdma_dma_stop
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_probe
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixfer
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_configure
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_sai_probe
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_exec
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_workqueue_init
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_klog_tag_lvl
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_init
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_idle_task_init
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_print
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_send
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_recv
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_init
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_deinit
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_event_flag_check
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_exit_check
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_enter_check
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_init
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_infrared_register_device
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_recursive_unlock
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_recursive_lock
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_recv
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_init
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_destroy
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_create
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mq_send
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mq_get_msg_from_queue
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memory_info
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memheap_init
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memheap_info
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memheap_free
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memheap_check
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memheap_alloc
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memheap_aligned_alloc
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memheap_add
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_split_chunks
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_free_list_remove_bidx
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_free_list_add_bidx
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_realloc
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_free
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_aligned_alloc
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunk_set
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunk_mem
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_alloc_chunk
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_set_timeout_ticks
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_is_active
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_destroy
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_create
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_task_entry
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_calc_remain_ticks
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_activate
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_tsleep
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_name
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_task_stack_check
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_timer_module_init
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_recycle_task_init
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_startup
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_main_task_entry
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_application_init
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_connect_func
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4addr_aton
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_wifi_netconn_data_recv_notice
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_pasv_close_notice
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_mq_destroy
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_send_func
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_send_bfsz_func
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_recv_func
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_close_func
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_netconn_by_id
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_wifi_connect_ap
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_object_init
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_object_get_by_name
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_object_deinit
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_get_firmware_version_free
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_get_firmware_version
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_gethostbyname
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_line_by_kw
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_line
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_data_by_line
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_data_by_kw
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_startup
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_set_urc_table
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_set_end_mark
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_send
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_recv
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_cmd_valist
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_cmd
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_deinit
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_connect
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_list_del
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_list_add
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_get_urc
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_get_param
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_socket
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_setsockopt
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_sendto
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_send
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_recvfrom
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_recv
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_gethostbyname
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_connect
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_closesocket
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_udp_sendto
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_object_get_by_device
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_object_list_del
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_sendto
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_send
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_recvfrom
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_gethostbyname
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_destroy
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_create
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_connect
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_message_queue_init
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_sensor_register
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_mpu6xxx_init
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_fetch_data
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_set_param
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_init
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_deinit
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sensor_read
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sensor_init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sensor_deinit
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sensor_control
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_mpu6xxx_port
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_read_ps_data
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_read_ir_data
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_read_ambient_light
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_sensor
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_set_param
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_get_param
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_fetch_proximity_data
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_fetch_light_data
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_fetch_ir_data
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aht10_temp_fetch_data
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aht10_humi_fetch_data
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeOutState
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_do_exec_cmd
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_do_auto_complete_path
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_get_prompt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_task_entry
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_system_init
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_do_connect_console
</UL>

<P><STRONG><a name="[700]"></a>os_irq_enable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arch_interrupt.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_board_init
</UL>

<P><STRONG><a name="[4b4]"></a>os_is_irq_active</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, arch_interrupt.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mp_destroy
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mp_create
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mp_alloc
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_wait
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_init
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_init
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_deinit
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_unlock
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output_to_all_backend
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_lock
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_get_log_buf
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_destroy
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_create
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_destroy
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_create
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_deinit
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_errno
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mb_send
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mb_recv
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mb_init
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_workqueue_init
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_init
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_recv
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_init
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_deinit
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_recursive_unlock
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_recursive_lock
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_recv
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_init
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_destroy
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_create
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mq_send
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_destroy
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_create
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_tsleep
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_errno
</UL>

<P><STRONG><a name="[4b5]"></a>os_is_irq_disabled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, arch_interrupt.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mp_destroy
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mp_create
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mp_alloc
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_wait
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_unlock
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_lock
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_destroy
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_create
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_destroy
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_create
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mb_send
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mb_recv
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_recv
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_recursive_lock
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_recv
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_destroy
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_create
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mq_send
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_destroy
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_create
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_tsleep
</UL>

<P><STRONG><a name="[58f]"></a>os_irq_num</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, arch_interrupt.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cotex_m_vector_entry
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_exit_check
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_enter_check
</UL>

<P><STRONG><a name="[661]"></a>os_is_fault_active</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, arch_interrupt.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_exit_check
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_enter_check
</UL>

<P><STRONG><a name="[4eb]"></a>os_ffs</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, arch_misc.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;period_calc_next_nsec
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;period_calc_next_nsec
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_readyq_remove
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_task_entry
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_show
</UL>

<P><STRONG><a name="[771]"></a>os_get_current_task_sp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, arch_misc.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_show
</UL>

<P><STRONG><a name="[30]"></a>__asm___14_vector_table_c_5476e7df_____PendSV_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vector_table.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> vector_table.o(vtor_table)
</UL>
<P><STRONG><a name="[19a]"></a>HardFault_Handler</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, arch_exception_rvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = HardFault_Handler &rArr; os_arch_fault_exception &rArr; _os_arch_hard_fault_track &rArr; _os_arch_usage_fault_track &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_arch_fault_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[4ba]"></a>os_task_switch</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, arch_task_switch_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mp_free
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mp_destroy
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mp_alloc
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_wait
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_post
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_destroy
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_startup
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_deinit
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_schedule_unlock
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_increase
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mb_send
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mb_recv
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_send
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_recv
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_deinit
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_recursive_unlock
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_recursive_lock
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mutex_deinit
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_recv
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_destroy
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mq_send
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_task_entry
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_tsleep
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_task_exit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_recycle_task_entry
</UL>

<P><STRONG><a name="[1a0]"></a>PendSV_Handler</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, arch_task_switch_rvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = PendSV_Handler &rArr; os_task_switch_notify &rArr; _k_task_stack_check &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_switch_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[666]"></a>os_first_task_start</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, arch_task_switch_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_start
</UL>

<P><STRONG><a name="[198]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[199]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[19b]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[19c]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[19d]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[19e]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[19f]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1b4]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1d1]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1e2]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1df]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1e0]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1e1]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1cc]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1ad]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1ae]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1af]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1b0]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1b3]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1dc]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1dd]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1e6]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1e7]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1a6]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1d2]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1f1]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1c2]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1c1]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1c4]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1c3]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1eb]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1ea]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1e4]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1e8]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1a3]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1e9]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1a7]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1f0]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1a5]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1ec]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1ed]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1d3]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1c5]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1c6]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1d5]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1ee]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1a4]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1bd]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1be]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1bf]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1d4]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1d8]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1d9]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1cd]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1d0]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1cf]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1ce]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1ef]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1d7]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1a2]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[27e]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32l475xx_arm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[848]"></a>__semihosting$guard</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[849]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[84a]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[84b]"></a>__I$use$heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[234]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clocksource_register
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clocksource_gettime
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_mult_shift
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_register
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_calc_param
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_normal_buffer_init
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_can_calc_baud
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_rx_timer_callback
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_rx_sync
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_rx_repeat1
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_rx_repeat0
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_rx_idle
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_rx_data
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_rx_addr
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pwm_set_pulse
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pwm_set_period
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_lptim_probe
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_tim_probe
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_long_long
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[84c]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[282]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_mult_shift
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;period_calc_next_nsec
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;period_calc_next_nsec
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_flash_write
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[84d]"></a>_ll_shift_l</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[2bd]"></a>__aeabi_llsr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clocksource_ndelay
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clocksource_update_cs
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_mult_shift
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_calc_param
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pwm_set_pulse
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pwm_set_period
</UL>

<P><STRONG><a name="[84e]"></a>_ll_ushift_r</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[473]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_df
</UL>

<P><STRONG><a name="[233]"></a>_ll_sdiv</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[235]"></a>__2snprintf</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, __2snprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_upload_data_task_func
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfbus_spi_attach
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_alloc
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_set_ap_cip
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_do_sem_init
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_authorization
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_register
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_publish
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;submessage_cmd_request_arrived_handler
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_subscribe_message_handlers_init
</UL>

<P><STRONG><a name="[239]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[23a]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[23b]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[23c]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[238]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[212]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[208]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[23e]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[216]"></a>_printf_int_oct</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, _printf_oct_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[84f]"></a>_printf_longlong_oct</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_oct_int.o(.text), UNUSED)

<P><STRONG><a name="[240]"></a>_printf_longlong_hex</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, _printf_hex_int_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[218]"></a>_printf_int_hex</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, _printf_hex_int_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[20a]"></a>_printf_hex_ptr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_hex_int_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[241]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[244]"></a>vsscanf</STRONG> (Thumb, 44 bytes, Stack size 56 bytes, vsscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_data_by_line
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_data_by_kw
</UL>

<P><STRONG><a name="[246]"></a>__0sscanf</STRONG> (Thumb, 52 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_send_bfsz_func
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_recv_func
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_close_func
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_scan_info
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_connect_ap
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_register
</UL>

<P><STRONG><a name="[247]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[27c]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[249]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul &rArr; __aeabi_errno_addr &rArr; os_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_dlog_ctrl_info_get
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_pin_write
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_pin_read
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_pin_mode
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_test
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_publish
</UL>

<P><STRONG><a name="[24c]"></a>strtoul</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = strtoul &rArr; _strtoul &rArr; __aeabi_errno_addr &rArr; os_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_mb_info
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_event_info
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_mutex_info
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_mq_info
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_task_info
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_sem_info
</UL>

<P><STRONG><a name="[6c8]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opt_get
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;submessage_cmd_request_arrived_handler
</UL>

<P><STRONG><a name="[770]"></a>strncat</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, strncat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncat
</UL>
<BR>[Called By]<UL><LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_show
</UL>

<P><STRONG><a name="[565]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_voutput
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_connect_func
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_send_func
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_connect_ap
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_line_by_kw
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_resp_handle
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_register
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;submessage_cmd_request_arrived_handler
</UL>

<P><STRONG><a name="[564]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_resp_handle
</UL>

<P><STRONG><a name="[5eb]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_create_rel_mnt_path
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pwm_register
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_exec
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_print
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_ipaddr
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_get_device_info
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_subscribe_message_handlers_init
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_do_set_prompt
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_push_history
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_handle_backspace_key
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_copy_history_cmd
</UL>

<P><STRONG><a name="[806]"></a>strrchr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_rename_check
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_get_path_lastname
</UL>

<P><STRONG><a name="[3c1]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clocksource_register
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_register
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_vsnprintf
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_dlog_tlvl_ctrl
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_dlog_gtag_ctrl
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_dlog_gkw_ctrl
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output_to_all_backend
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_formater
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_upload_data_task_func
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_console_output
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vfs_conjunction_path
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_readdir
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_opendir
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_unlink
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_stat
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_rename_check
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_rename
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_open
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v_fat_add_entry
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mount_point_find_and_ref
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_get_rel_mnt_path
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_create_rel_mnt_path
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_echo
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_show_part_table
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_flash_probe
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__os_hw_console_output
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_exec
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_show
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_recv_func
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_object_init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_scan_info
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_get_sta_mac
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_get_sta_cip
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_get_ap_mac
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_get_ap_cip
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_set_dnsserver
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_gethostbyname
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_ifconfig
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_ipaddr
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_firmware_version
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_line_by_kw
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_line
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_get_urc
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_equals
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_url_encode
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_authorization
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTNetworkInit
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_publish
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_register
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_get_device_info
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_client_publish
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_sensor_register
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_do_set_prompt
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_do_auto_complete_path
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_auto_complete_path
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_auto_complete
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_get_prompt
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_handle_tab_key
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_copy_history_cmd
</UL>

<P><STRONG><a name="[3c4]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_voutput
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_tag_lvl_filter_set
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_tag_lvl_filter_get
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_tag_lvl_filter_del
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_open_s
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_rename_check
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mount_point_find_and_ref
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_plug_in
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_plug_get
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_find
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_klog_tag_lvl
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_object_get_by_name
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_set_dnsserver
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_get_urc
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_equals
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_help
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_get_cmd_func
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_do_auto_complete_path
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_auto_complete
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_push_history
</UL>

<P><STRONG><a name="[70b]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfbus_xspi_register
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfbus_attach
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pwm_register
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_show
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_url_encode
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_sensor_register
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_do_auto_complete_path
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_get_prompt
</UL>

<P><STRONG><a name="[252]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_audio_player_write
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clocksource_register
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_register
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_do_output
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_upload_data_task_func
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_ring_buff_put
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_ring_buff_get
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_ring_to_line
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_line_to_ring
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_flash_probe
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_rng_crypto_clone
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_crc_crypto_clone
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_can_control
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_graphic_frame_fill
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_graphic_control
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_sai_dma_transmit
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_RxCallback
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_recv
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mq_send
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_realloc
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_recv_func
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_resp_handle
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_recvfrom_udp
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_recv_tcp
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_publish
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;submessage_cmd_request_arrived_handler
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_sensor_register
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sensor_read
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sensor_control
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_do_auto_complete_path
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[24f]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[850]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[7a6]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_recv_func
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_handle_normal_character
</UL>

<P><STRONG><a name="[251]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[851]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[250]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_control
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_audio_player_init
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfbus_xspi_register
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfbus_attach
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sflash_init
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_can_probe
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_alloc
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_start_ap
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_set_mode
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_set_ipdinofo
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_set_ap_cip
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_scan_info
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_get_stat
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_get_sta_mac
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_get_sta_cip
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_get_mode
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_get_ap_mac
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_get_ap_cip
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_disconnect_ap
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_connect_ap
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_set_dnsserver
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_ping
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_sendto
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_send
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_gethostbyname
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_destroy
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_connect
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_bind
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_ipaddr
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_firmware_version
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_dnsserver
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_at_test
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_at_init
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_connect
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_device_open
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnectWithResults
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_publish
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_get_device_info
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_mpu6xxx_init
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[852]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[853]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[854]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[254]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_stack_init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msd_sdhc_blk_write_block
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msd_blk_write_block
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msd_blk_init
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_block
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixfer
</UL>

<P><STRONG><a name="[259]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;working_dir_init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_opendir
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_unlink
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_stat
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_rename_check
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_rename
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_open
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v_fat_add_entry
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dma_malloc_align
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_sai_dma_rx_enable
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_print
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_cmd_valist
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_readline
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_get_device_info
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_do_auto_complete_path
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_handle_enter_key
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_do_connect_console
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[256]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[255]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[27a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_read
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_can_register
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_dlog_ctrl_info_get
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_upload_data_task_func
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_console_backend_init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_init
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_table_init
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_ref_dec
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_ref_dec
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_alloc
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_opendir
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_stat
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_rename_check
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_mount
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_removedir
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_remove
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_move
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ls
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_copydir
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_copy
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cat
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hwcrypto_ctx_create
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msd_init
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_take
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_release
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_normal_buffer_init
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_circular_buffer_init
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_buffer_deinit
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_write_page
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_read_page
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_erase_block
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_unlock_blocks
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_read_status
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_read_sfdp
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_read_id
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_dummy
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic_qer
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic_enter_mode_444
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic_enter_4bytes_addressing
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_heap_init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_can_start_send
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_can_recvmsg
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_AlarmA
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_rtc_set_time_stamp
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_rtc_get_timestamp
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_TxHalfCpltCallback
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_TxCpltCallback
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_control_atk_init
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memheap_add
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_mempool_info
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_timer_module_init
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_recv_func
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_object_init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_start_ap
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_set_mode
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_set_ipdinofo
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_set_ap_cip
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_get_sta_cip
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_get_mode
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_get_ap_cip
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_disconnect_ap
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_connect_ap
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_set_dnsserver
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_ping
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_sendto
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_send
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_gethostbyname
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_destroy
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_connect
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_bind
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_ipaddr
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_firmware_version
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_dnsserver
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_at_test
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_at_init
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_connect
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_authorization
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_publish
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_register
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_publish
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_get_device_info
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;submessage_cmd_request_arrived_handler
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_device_link
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_subscribe_message_handlers_init
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_do_exec_cmd
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_get_prompt
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime_r
</UL>

<P><STRONG><a name="[855]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[856]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[257]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[258]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_register
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_dlog_ctrl_info_get
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_tag_lvl_filter_set
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_global_filter_tag_set
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_global_filter_kw_set
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_console_backend_init
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;working_dir_set
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;working_dir_get
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vfs_conjunction_path
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_readdir
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_rename_check
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v_fat_add_entry
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_plug_in
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mb_init
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_event_init
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_show_blocked_task
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mutex_init
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mq_init
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memheap_init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_mempool_info
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mp_init
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_do_init
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_task_init
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_sem_init
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_object_init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_sendto
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_connect
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_bind
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_firmware_version
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_set_end_mark
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_init
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_gethostbyname
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_subscribe_message_handlers_init
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_do_auto_complete_path
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_auto_complete
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_get_prompt
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_push_history
</UL>

<P><STRONG><a name="[3d7]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_match_devices
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vfs_fs_ops_get
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_register
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_rename_check
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v_fat_find_entry
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v_fat_del_entry
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v_fat_add_entry
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_openfile
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_mkfs
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_echo
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_removedir
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_copyfile
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_copydir
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_find
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_usbd_probe
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_usart_early_probe
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_test
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSetMessageHandler
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[25a]"></a>localtime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, localtime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = localtime &rArr; _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_rtc_set_time_stamp
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_rtc_set_alarm_stamp
</UL>

<P><STRONG><a name="[25c]"></a>mktime</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mktime &rArr; _tm_carry
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tm_carry
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_stat
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_rtc_get_timestamp
</UL>

<P><STRONG><a name="[857]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[858]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[859]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[24d]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbrtowc
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[23d]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[85a]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[264]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[267]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[236]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[237]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[33]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __2snprintf.o(.text)
</UL>
<P><STRONG><a name="[268]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[21a]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[21c]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[269]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[21e]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[26a]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[248]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong
</UL>

<P><STRONG><a name="[26b]"></a>_scanf_longlong</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, _scanf_longlong.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_longlong
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[26f]"></a>_scanf_really_real</STRONG> (Thumb, 684 bytes, Stack size 120 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>

<P><STRONG><a name="[245]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsscanf
</UL>

<P><STRONG><a name="[34]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> vsscanf.o(.text)
<LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[35]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> vsscanf.o(.text)
<LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[24e]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _strtoul &rArr; __aeabi_errno_addr &rArr; os_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[24b]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = strtol &rArr; _strtoul &rArr; __aeabi_errno_addr &rArr; os_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[274]"></a>_scanf_mbtowc</STRONG> (Thumb, 276 bytes, Stack size 64 bytes, _scanf_mbtowc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _scanf_mbtowc &rArr; _mbrtowc &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbrtowc
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[276]"></a>_scanf_wctomb</STRONG> (Thumb, 232 bytes, Stack size 64 bytes, _scanf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _scanf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wcharmap
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[278]"></a>_scanf_wstring</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, _scanf_wstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _scanf_wstring &rArr; _scanf_wcharmap
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wcharmap
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[23f]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wctomb
</UL>

<P><STRONG><a name="[85b]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[85c]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[279]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[253]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[85d]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[25b]"></a>_localtime_r</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, localtime_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>

<P><STRONG><a name="[85e]"></a>_n$localtime_r</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, localtime_internal.o(.text), UNUSED)

<P><STRONG><a name="[222]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[263]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[39]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[266]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[273]"></a>__vfscanf</STRONG> (Thumb, 878 bytes, Stack size 96 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wstring
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wctomb
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_mbtowc
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[277]"></a>_scanf_wcharmap</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, _scanf_wcharmap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _scanf_wcharmap
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wstring
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wctomb
</UL>

<P><STRONG><a name="[25f]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[275]"></a>_mbrtowc</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, _mbrtowc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _mbrtowc &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_mbtowc
</UL>

<P><STRONG><a name="[85f]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[27d]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[860]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[227]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[27f]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[280]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __set_errno &rArr; __aeabi_errno_addr &rArr; os_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[281]"></a>_scanf_really_hex_real</STRONG> (Thumb, 786 bytes, Stack size 80 bytes, scanf_hexfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _scanf_really_hex_real &rArr; __support_ldexp &rArr; __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
</UL>

<P><STRONG><a name="[821]"></a>_scanf_really_infnan</STRONG> (Thumb, 292 bytes, Stack size 72 bytes, scanf_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
</UL>

<P><STRONG><a name="[22c]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[260]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[286]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[285]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[289]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[287]"></a>_e2d</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, btod.o(CL$$btod_e2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
</UL>

<P><STRONG><a name="[288]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>

<P><STRONG><a name="[261]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[26e]"></a>_btod_edivd</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_edivd))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _btod_edivd &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[262]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[26d]"></a>_btod_emuld</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emuld))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _btod_emuld &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[28a]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[22b]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, os_startup.o(i.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = main &rArr; _k_startup &rArr; k_idle_task_init &rArr; os_task_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[6a9]"></a>BASE64_Decode</STRONG> (Thumb, 360 bytes, Stack size 32 bytes, onenet_base64.o(i.BASE64_Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BASE64_Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_authorization
</UL>

<P><STRONG><a name="[6aa]"></a>BASE64_Encode</STRONG> (Thumb, 320 bytes, Stack size 36 bytes, onenet_base64.o(i.BASE64_Encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BASE64_Encode
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_authorization
</UL>

<P><STRONG><a name="[1b6]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l4xx_it_bsp.o(i.CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = CAN1_RX0_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_TxMailbox2CompleteCallback &rArr; os_hw_can_isr_txdone &rArr; os_device_send_notify &rArr; os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1b7]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l4xx_it_bsp.o(i.CAN1_RX1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = CAN1_RX1_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_TxMailbox2CompleteCallback &rArr; os_hw_can_isr_txdone &rArr; os_device_send_notify &rArr; os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1b8]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l4xx_it_bsp.o(i.CAN1_SCE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = CAN1_SCE_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_TxMailbox2CompleteCallback &rArr; os_hw_can_isr_txdone &rArr; os_device_send_notify &rArr; os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1b5]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l4xx_it_bsp.o(i.CAN1_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = CAN1_TX_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_TxMailbox2CompleteCallback &rArr; os_hw_can_isr_txdone &rArr; os_device_send_notify &rArr; os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1b1]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l4xx_it_bsp.o(i.DMA1_Channel5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA1_Channel5_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1b2]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l4xx_it_bsp.o(i.DMA1_Channel6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA1_Channel6_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1da]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l4xx_it_bsp.o(i.DMA2_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA2_Channel1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1db]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l4xx_it_bsp.o(i.DMA2_Channel2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA2_Channel2_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1de]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l4xx_it_bsp.o(i.DMA2_Channel5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA2_Channel5_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1a8]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_gpio.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EXTI0_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; pin_irq_hdr
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1ca]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, drv_gpio.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EXTI15_10_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; pin_irq_hdr
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1a9]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_gpio.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EXTI1_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; pin_irq_hdr
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1aa]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_gpio.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EXTI2_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; pin_irq_hdr
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1ab]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_gpio.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EXTI3_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; pin_irq_hdr
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1ac]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_gpio.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EXTI4_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; pin_irq_hdr
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1b9]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, drv_gpio.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EXTI9_5_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; pin_irq_hdr
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[355]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_QUADSPI_Init
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_OTG_FS_PCD_Init
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM17_Init
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM15_Init
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI3_Init
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SAI1_Init
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RNG_Init
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPTIM1_Init
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_MspInit
</UL>

<P><STRONG><a name="[2b6]"></a>FLASH_FlushCaches</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, stm32l4xx_hal_flash_ex.o(i.FLASH_FlushCaches))
<BR><BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[2b5]"></a>FLASH_PageErase</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, stm32l4xx_hal_flash_ex.o(i.FLASH_PageErase))
<BR><BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[28f]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32l4xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FLASH_WaitForLastOperation &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[7ce]"></a>HAL_CAN_AddTxMessage</STRONG> (Thumb, 342 bytes, Stack size 20 bytes, stm32l4xx_hal_can.o(i.HAL_CAN_AddTxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_CAN_AddTxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_can_start_send
</UL>

<P><STRONG><a name="[7cc]"></a>HAL_CAN_ConfigFilter</STRONG> (Thumb, 266 bytes, Stack size 20 bytes, stm32l4xx_hal_can.o(i.HAL_CAN_ConfigFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_CAN_ConfigFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_can_control
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_can_config
</UL>

<P><STRONG><a name="[291]"></a>HAL_CAN_ErrorCallback</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, drv_can.o(i.HAL_CAN_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = HAL_CAN_ErrorCallback &rArr; os_hw_can_isr_txdone &rArr; os_device_send_notify &rArr; os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_can_isr_txdone
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_stm32_can
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[7cd]"></a>HAL_CAN_GetRxMessage</STRONG> (Thumb, 378 bytes, Stack size 16 bytes, stm32l4xx_hal_can.o(i.HAL_CAN_GetRxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CAN_GetRxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_can_recvmsg
</UL>

<P><STRONG><a name="[28c]"></a>HAL_CAN_IRQHandler</STRONG> (Thumb, 590 bytes, Stack size 40 bytes, stm32l4xx_hal_can.o(i.HAL_CAN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = HAL_CAN_IRQHandler &rArr; HAL_CAN_TxMailbox2CompleteCallback &rArr; os_hw_can_isr_txdone &rArr; os_device_send_notify &rArr; os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_WakeUpFromRxMsgCallback
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox2CompleteCallback
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox2AbortCallback
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox1CompleteCallback
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox1AbortCallback
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox0CompleteCallback
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox0AbortCallback
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_SleepCallback
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo1MsgPendingCallback
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ErrorCallback
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo1FullCallback
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0FullCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_TX_IRQHandler
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_SCE_IRQHandler
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX1_IRQHandler
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[2a0]"></a>HAL_CAN_Init</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, stm32l4xx_hal_can.o(i.HAL_CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_can_config
</UL>

<P><STRONG><a name="[2a1]"></a>HAL_CAN_MspInit</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, stm32l4xx_hal_msp.o(i.HAL_CAN_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_CAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
</UL>

<P><STRONG><a name="[29a]"></a>HAL_CAN_RxFifo0FullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_can.o(i.HAL_CAN_RxFifo0FullCallback))
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[29b]"></a>HAL_CAN_RxFifo0MsgPendingCallback</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, drv_can.o(i.HAL_CAN_RxFifo0MsgPendingCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = HAL_CAN_RxFifo0MsgPendingCallback &rArr; os_hw_can_isr_rxdone &rArr; os_device_recv_notify &rArr; os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_can_isr_rxdone
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_can_recvmsg
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_stm32_can
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[29c]"></a>HAL_CAN_RxFifo1FullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_can.o(i.HAL_CAN_RxFifo1FullCallback))
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[29d]"></a>HAL_CAN_RxFifo1MsgPendingCallback</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, drv_can.o(i.HAL_CAN_RxFifo1MsgPendingCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = HAL_CAN_RxFifo1MsgPendingCallback &rArr; os_hw_can_isr_rxdone &rArr; os_device_recv_notify &rArr; os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_can_isr_rxdone
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_can_recvmsg
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_stm32_can
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[29e]"></a>HAL_CAN_SleepCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_can.o(i.HAL_CAN_SleepCallback))
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[2a7]"></a>HAL_CAN_Start</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32l4xx_hal_can.o(i.HAL_CAN_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_CAN_Start &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_can_config
</UL>

<P><STRONG><a name="[295]"></a>HAL_CAN_TxMailbox0AbortCallback</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, drv_can.o(i.HAL_CAN_TxMailbox0AbortCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = HAL_CAN_TxMailbox0AbortCallback &rArr; os_hw_can_isr_txdone &rArr; os_device_send_notify &rArr; os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_can_isr_txdone
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_stm32_can
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[294]"></a>HAL_CAN_TxMailbox0CompleteCallback</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, drv_can.o(i.HAL_CAN_TxMailbox0CompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = HAL_CAN_TxMailbox0CompleteCallback &rArr; os_hw_can_isr_txdone &rArr; os_device_send_notify &rArr; os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_can_isr_txdone
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_stm32_can
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[297]"></a>HAL_CAN_TxMailbox1AbortCallback</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, drv_can.o(i.HAL_CAN_TxMailbox1AbortCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = HAL_CAN_TxMailbox1AbortCallback &rArr; os_hw_can_isr_txdone &rArr; os_device_send_notify &rArr; os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_can_isr_txdone
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_stm32_can
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[296]"></a>HAL_CAN_TxMailbox1CompleteCallback</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, drv_can.o(i.HAL_CAN_TxMailbox1CompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = HAL_CAN_TxMailbox1CompleteCallback &rArr; os_hw_can_isr_txdone &rArr; os_device_send_notify &rArr; os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_can_isr_txdone
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_stm32_can
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[299]"></a>HAL_CAN_TxMailbox2AbortCallback</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, drv_can.o(i.HAL_CAN_TxMailbox2AbortCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = HAL_CAN_TxMailbox2AbortCallback &rArr; os_hw_can_isr_txdone &rArr; os_device_send_notify &rArr; os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_can_isr_txdone
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_stm32_can
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[298]"></a>HAL_CAN_TxMailbox2CompleteCallback</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, drv_can.o(i.HAL_CAN_TxMailbox2CompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = HAL_CAN_TxMailbox2CompleteCallback &rArr; os_hw_can_isr_txdone &rArr; os_device_send_notify &rArr; os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_can_isr_txdone
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_stm32_can
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[29f]"></a>HAL_CAN_WakeUpFromRxMsgCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_can.o(i.HAL_CAN_WakeUpFromRxMsgCallback))
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[2af]"></a>HAL_CRCEx_Polynomial_Set</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, stm32l4xx_hal_crc_ex.o(i.HAL_CRCEx_Polynomial_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>

<P><STRONG><a name="[2a8]"></a>HAL_CRC_Accumulate</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32l4xx_hal_crc.o(i.HAL_CRC_Accumulate))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_CRC_Accumulate &rArr; CRC_Handle_8
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Handle_8
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Handle_16
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_crc_update
</UL>

<P><STRONG><a name="[2ab]"></a>HAL_CRC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stm32l4xx_hal_crc.o(i.HAL_CRC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_CRC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_crc_crypto_destroy
</UL>

<P><STRONG><a name="[7d1]"></a>HAL_CRC_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal_crc.o(i.HAL_CRC_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_crc_update
</UL>

<P><STRONG><a name="[2ad]"></a>HAL_CRC_Init</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, stm32l4xx_hal_crc.o(i.HAL_CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_CRC_Init &rArr; HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_MspInit
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_crc_crypto_create
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_crc_config
</UL>

<P><STRONG><a name="[2ac]"></a>HAL_CRC_MspDeInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l4xx_hal_msp.o(i.HAL_CRC_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_DeInit
</UL>

<P><STRONG><a name="[2ae]"></a>HAL_CRC_MspInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32l4xx_hal_msp.o(i.HAL_CRC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_CRC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>

<P><STRONG><a name="[326]"></a>HAL_DMA_Abort</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmit
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceive
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_DMAStop
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Abort
</UL>

<P><STRONG><a name="[393]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[39c]"></a>HAL_DMA_DeInit</STRONG> (Thumb, 188 bytes, Stack size 0 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[38c]"></a>HAL_DMA_GetError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_GetError))
<BR><BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmit
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceive
</UL>

<P><STRONG><a name="[28d]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel5_IRQHandler
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel2_IRQHandler
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel1_IRQHandler
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel5_IRQHandler
</UL>

<P><STRONG><a name="[354]"></a>HAL_DMA_Init</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_MspInit
</UL>

<P><STRONG><a name="[2b0]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_DMA
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit_DMA
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_DMA
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_DMA
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Transmit_DMA
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Receive_DMA
</UL>

<P><STRONG><a name="[2b2]"></a>HAL_Delay</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32l4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_Delay &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Delay
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
</UL>

<P><STRONG><a name="[7e0]"></a>HAL_EXTI_ClearPending</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32l4xx_hal_exti.o(i.HAL_EXTI_ClearPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_EXTI_ClearPending
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_attach_irq
</UL>

<P><STRONG><a name="[2b3]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, stm32l4xx_hal_flash_ex.o(i.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PageErase
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FlushCaches
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_flash_erase
</UL>

<P><STRONG><a name="[7d6]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l4xx_hal_flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_flash_write
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_flash_erase
</UL>

<P><STRONG><a name="[2b7]"></a>HAL_FLASH_Program</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, stm32l4xx_hal_flash.o(i.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FlushCaches
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Fast
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_DoubleWord
</UL>
<BR>[Called By]<UL><LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_flash_write
</UL>

<P><STRONG><a name="[7d3]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32l4xx_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_flash_write
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_flash_erase
</UL>

<P><STRONG><a name="[311]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 292 bytes, Stack size 20 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspDeInit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_mode
</UL>

<P><STRONG><a name="[2ba]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, drv_gpio.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; pin_irq_hdr
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_irq_hdr
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit2bitno
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[28e]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; pin_irq_hdr
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[2a2]"></a>HAL_GPIO_Init</STRONG> (Thumb, 480 bytes, Stack size 20 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_MspInit
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_mode
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_dettach_irq
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_attach_irq
</UL>

<P><STRONG><a name="[7e1]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_read
</UL>

<P><STRONG><a name="[3e9]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_write
</UL>

<P><STRONG><a name="[290]"></a>HAL_GetTick</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, drv_common.o(i.HAL_GetTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_Init
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_GenerateRandomNumber
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Start
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Transmit_DMA
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Transmit
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Abort
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI2_Config
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitReceiveCplt
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAReceiveCplt
</UL>

<P><STRONG><a name="[7cf]"></a>HAL_GetUIDw0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_GetUIDw0))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_rng_probe
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_crc_probe
</UL>

<P><STRONG><a name="[7d0]"></a>HAL_GetUIDw1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_GetUIDw1))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_rng_probe
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_crc_probe
</UL>

<P><STRONG><a name="[2be]"></a>HAL_IWDG_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32l4xx_hal_iwdg.o(i.HAL_IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_IWDG_Init &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
</UL>

<P><STRONG><a name="[7da]"></a>HAL_IWDG_Refresh</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_iwdg.o(i.HAL_IWDG_Refresh))
<BR><BR>[Called By]<UL><LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_iwdg_refresh
</UL>

<P><STRONG><a name="[410]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[2bf]"></a>HAL_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32l4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[2c1]"></a>HAL_InitTick</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32l4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[2c4]"></a>HAL_LPTIM_AutoReloadMatchCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_lptim.o(i.HAL_LPTIM_AutoReloadMatchCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = HAL_LPTIM_AutoReloadMatchCallback &rArr; lptim_callback &rArr; os_clockevent_isr &rArr; os_clockevent_next &rArr; os_clockevent_calc_param &rArr; period_calc_next_nsec &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lptim_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_IRQHandler
</UL>

<P><STRONG><a name="[2cd]"></a>HAL_LPTIM_AutoReloadWriteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_lptim.o(i.HAL_LPTIM_AutoReloadWriteCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_IRQHandler
</UL>

<P><STRONG><a name="[2c6]"></a>HAL_LPTIM_CompareMatchCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_lptim.o(i.HAL_LPTIM_CompareMatchCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = HAL_LPTIM_CompareMatchCallback &rArr; lptim_callback &rArr; os_clockevent_isr &rArr; os_clockevent_next &rArr; os_clockevent_calc_param &rArr; period_calc_next_nsec &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lptim_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_IRQHandler
</UL>

<P><STRONG><a name="[2cc]"></a>HAL_LPTIM_CompareWriteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_lptim.o(i.HAL_LPTIM_CompareWriteCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_IRQHandler
</UL>

<P><STRONG><a name="[2c7]"></a>HAL_LPTIM_Counter_Stop_IT</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32l4xx_hal_lptim.o(i.HAL_LPTIM_Counter_Stop_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_LPTIM_Counter_Stop_IT &rArr; LPTIM_Disable &rArr; LPTIM_WaitForFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_Disable
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_lptimer_stop
</UL>

<P><STRONG><a name="[2cf]"></a>HAL_LPTIM_DirectionDownCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_lptim.o(i.HAL_LPTIM_DirectionDownCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_IRQHandler
</UL>

<P><STRONG><a name="[2ce]"></a>HAL_LPTIM_DirectionUpCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_lptim.o(i.HAL_LPTIM_DirectionUpCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_IRQHandler
</UL>

<P><STRONG><a name="[2c9]"></a>HAL_LPTIM_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l4xx_hal_lptim.o(i.HAL_LPTIM_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_TimeOut_Start_IT
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_Counter_Stop_IT
</UL>

<P><STRONG><a name="[2ca]"></a>HAL_LPTIM_IRQHandler</STRONG> (Thumb, 230 bytes, Stack size 8 bytes, stm32l4xx_hal_lptim.o(i.HAL_LPTIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = HAL_LPTIM_IRQHandler &rArr; HAL_LPTIM_CompareMatchCallback &rArr; lptim_callback &rArr; os_clockevent_isr &rArr; os_clockevent_next &rArr; os_clockevent_calc_param &rArr; period_calc_next_nsec &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_CompareMatchCallback
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_AutoReloadMatchCallback
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_TriggerCallback
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_DirectionUpCallback
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_DirectionDownCallback
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_CompareWriteCallback
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_AutoReloadWriteCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM1_IRQHandler
</UL>

<P><STRONG><a name="[2d0]"></a>HAL_LPTIM_Init</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, stm32l4xx_hal_lptim.o(i.HAL_LPTIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_LPTIM_Init &rArr; HAL_LPTIM_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPTIM1_Init
</UL>

<P><STRONG><a name="[2d1]"></a>HAL_LPTIM_MspInit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32l4xx_hal_msp.o(i.HAL_LPTIM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_LPTIM_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_Init
</UL>

<P><STRONG><a name="[7de]"></a>HAL_LPTIM_ReadCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l4xx_hal_lptim.o(i.HAL_LPTIM_ReadCounter))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_lptimer_read
</UL>

<P><STRONG><a name="[2d2]"></a>HAL_LPTIM_TimeOut_Start_IT</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, stm32l4xx_hal_lptim.o(i.HAL_LPTIM_TimeOut_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_LPTIM_TimeOut_Start_IT &rArr; LPTIM_Disable &rArr; LPTIM_WaitForFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_Disable
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_GetState
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_WaitForFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_lptimer_start
</UL>

<P><STRONG><a name="[2cb]"></a>HAL_LPTIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_lptim.o(i.HAL_LPTIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_IRQHandler
</UL>

<P><STRONG><a name="[2c2]"></a>HAL_MspInit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32l4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[313]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspDeInit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_irq_enable
</UL>

<P><STRONG><a name="[2a4]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_MspInit
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_AlarmA
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_irq_enable
</UL>

<P><STRONG><a name="[2a3]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_MspInit
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_AlarmA
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_irq_enable
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[2c0]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[708]"></a>HAL_NVIC_SystemReset</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_cpu_reset
</UL>

<P><STRONG><a name="[30f]"></a>HAL_PCDEx_ActivateLPM</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32l4xx_hal_pcd_ex.o(i.HAL_PCDEx_ActivateLPM))
<BR><BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[2fc]"></a>HAL_PCDEx_LPM_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_pcd_ex.o(i.HAL_PCDEx_LPM_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[42e]"></a>HAL_PCDEx_SetRxFiFo</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_pcd_ex.o(i.HAL_PCDEx_SetRxFiFo))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[42f]"></a>HAL_PCDEx_SetTxFiFo</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, stm32l4xx_hal_pcd_ex.o(i.HAL_PCDEx_SetTxFiFo))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_PCDEx_SetTxFiFo
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[2d6]"></a>HAL_PCD_ConnectCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drv_usbd.o(i.HAL_PCD_ConnectCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_ConnectCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DevConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[2d8]"></a>HAL_PCD_DataInStageCallback</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, drv_usbd.o(i.HAL_PCD_DataInStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_PCD_DataInStageCallback &rArr; USBD_LL_DataInStage &rArr; USBD_CtlContinueSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[2da]"></a>HAL_PCD_DataOutStageCallback</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, drv_usbd.o(i.HAL_PCD_DataOutStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_PCD_DataOutStageCallback &rArr; USBD_LL_DataOutStage &rArr; USBD_CtlContinueRx
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutXfrComplete_int
</UL>

<P><STRONG><a name="[2dc]"></a>HAL_PCD_DeInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32l4xx_hal_pcd.o(i.HAL_PCD_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_PCD_DeInit &rArr; HAL_PCD_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspDeInit
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StopDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DeInit
</UL>

<P><STRONG><a name="[2df]"></a>HAL_PCD_DisconnectCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drv_usbd.o(i.HAL_PCD_DisconnectCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_DisconnectCallback &rArr; USBD_LL_DevDisconnected
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DevDisconnected
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[2e1]"></a>HAL_PCD_EP_Close</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32l4xx_hal_pcd.o(i.HAL_PCD_EP_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeactivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
</UL>

<P><STRONG><a name="[2e3]"></a>HAL_PCD_EP_ClrStall</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32l4xx_hal_pcd.o(i.HAL_PCD_EP_ClrStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_PCD_EP_ClrStall &rArr; USB_EPClearStall
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
</UL>

<P><STRONG><a name="[2e5]"></a>HAL_PCD_EP_Flush</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32l4xx_hal_pcd.o(i.HAL_PCD_EP_Flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PCD_EP_Flush &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_FlushEP
</UL>

<P><STRONG><a name="[42d]"></a>HAL_PCD_EP_GetRxCount</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l4xx_hal_pcd.o(i.HAL_PCD_EP_GetRxCount))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_GetRxDataSize
</UL>

<P><STRONG><a name="[2e8]"></a>HAL_PCD_EP_Open</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, stm32l4xx_hal_pcd.o(i.HAL_PCD_EP_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ActivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>

<P><STRONG><a name="[2ea]"></a>HAL_PCD_EP_Receive</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, stm32l4xx_hal_pcd.o(i.HAL_PCD_EP_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>

<P><STRONG><a name="[2ed]"></a>HAL_PCD_EP_SetStall</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, stm32l4xx_hal_pcd.o(i.HAL_PCD_EP_SetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_PCD_EP_SetStall &rArr; USB_EPSetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPSetStall
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>

<P><STRONG><a name="[2f0]"></a>HAL_PCD_EP_Transmit</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, stm32l4xx_hal_pcd.o(i.HAL_PCD_EP_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>

<P><STRONG><a name="[2f1]"></a>HAL_PCD_IRQHandler</STRONG> (Thumb, 1348 bytes, Stack size 48 bytes, stm32l4xx_hal_pcd.o(i.HAL_PCD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = HAL_PCD_IRQHandler &rArr; HAL_PCD_SuspendCallback &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOOUTIncompleteCallback
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOINIncompleteCallback
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DisconnectCallback
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ConnectCallback
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteEmptyTxFifo
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutXfrComplete_int
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutSetupPacket_int
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetTurnaroundTime
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadPacket
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadInterrupts
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevOutEPInterrupt
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevInEPInterrupt
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevAllOutEpInterrupt
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevAllInEpInterrupt
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetMode
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetDevSpeed
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ActivateSetup
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_LPM_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[305]"></a>HAL_PCD_ISOINIncompleteCallback</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, drv_usbd.o(i.HAL_PCD_ISOINIncompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_PCD_ISOINIncompleteCallback &rArr; USBD_LL_IsoINIncomplete
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsoINIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[306]"></a>HAL_PCD_ISOOUTIncompleteCallback</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, drv_usbd.o(i.HAL_PCD_ISOOUTIncompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_PCD_ISOOUTIncompleteCallback &rArr; USBD_LL_IsoOUTIncomplete
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsoOUTIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[309]"></a>HAL_PCD_Init</STRONG> (Thumb, 370 bytes, Stack size 56 bytes, stm32l4xx_hal_pcd.o(i.HAL_PCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableGlobalInt
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevDisconnect
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_ActivateLPM
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_OTG_FS_PCD_Init
</UL>

<P><STRONG><a name="[2de]"></a>HAL_PCD_MspDeInit</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32l4xx_hal_msp.o(i.HAL_PCD_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_PCD_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_DisableVddUSB
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DeInit
</UL>

<P><STRONG><a name="[30a]"></a>HAL_PCD_MspInit</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, stm32l4xx_hal_msp.o(i.HAL_PCD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableVddUSB
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[303]"></a>HAL_PCD_ResetCallback</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, drv_usbd.o(i.HAL_PCD_ResetCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_PCD_ResetCallback &rArr; USBD_LL_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetSpeed
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[2fd]"></a>HAL_PCD_ResumeCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drv_usbd.o(i.HAL_PCD_ResumeCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_ResumeCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[304]"></a>HAL_PCD_SOFCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drv_usbd.o(i.HAL_PCD_SOFCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_SOFCallback &rArr; USBD_LL_SOF
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SOF
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[31a]"></a>HAL_PCD_SetAddress</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32l4xx_hal_pcd.o(i.HAL_PCD_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PCD_SetAddress &rArr; USB_SetDevAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetDevAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
</UL>

<P><STRONG><a name="[31c]"></a>HAL_PCD_SetupStageCallback</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_usbd.o(i.HAL_PCD_SetupStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutSetupPacket_int
</UL>

<P><STRONG><a name="[31e]"></a>HAL_PCD_Start</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32l4xx_hal_pcd.o(i.HAL_PCD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableGlobalInt
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
</UL>

<P><STRONG><a name="[321]"></a>HAL_PCD_Stop</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32l4xx_hal_pcd.o(i.HAL_PCD_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PCD_Stop &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableGlobalInt
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevDisconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Stop
</UL>

<P><STRONG><a name="[2fe]"></a>HAL_PCD_SuspendCallback</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, drv_usbd.o(i.HAL_PCD_SuspendCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = HAL_PCD_SuspendCallback &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mb_send
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[413]"></a>HAL_PWREx_ControlVoltageScaling</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_ControlVoltageScaling))
<BR><BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[312]"></a>HAL_PWREx_DisableVddUSB</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_DisableVddUSB))
<BR><BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspDeInit
</UL>

<P><STRONG><a name="[44a]"></a>HAL_PWREx_EnableVddIO2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_EnableVddIO2))
<BR><BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__os_hw_pin_init
</UL>

<P><STRONG><a name="[314]"></a>HAL_PWREx_EnableVddUSB</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_EnableVddUSB))
<BR><BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
</UL>

<P><STRONG><a name="[401]"></a>HAL_PWREx_GetVoltageRange</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_GetVoltageRange))
<BR><BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[412]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr.o(i.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[325]"></a>HAL_QSPI_Abort</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, stm32l4xx_hal_qspi.o(i.HAL_QSPI_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_QSPI_Abort &rArr; QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
</UL>

<P><STRONG><a name="[328]"></a>HAL_QSPI_Command</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, stm32l4xx_hal_qspi.o(i.HAL_QSPI_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_qspi_xfer_command
</UL>

<P><STRONG><a name="[32a]"></a>HAL_QSPI_Init</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, stm32l4xx_hal_qspi.o(i.HAL_QSPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_QSPI_Init &rArr; HAL_QSPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_SetTimeout
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_QUADSPI_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_qspi_configure
</UL>

<P><STRONG><a name="[32b]"></a>HAL_QSPI_MspInit</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, stm32l4xx_hal_msp.o(i.HAL_QSPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_QSPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
</UL>

<P><STRONG><a name="[32d]"></a>HAL_QSPI_Receive</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, stm32l4xx_hal_qspi.o(i.HAL_QSPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_QSPI_Receive &rArr; HAL_QSPI_Abort &rArr; QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Abort
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_qspi_transfer
</UL>

<P><STRONG><a name="[32c]"></a>HAL_QSPI_SetTimeout</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l4xx_hal_qspi.o(i.HAL_QSPI_SetTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
</UL>

<P><STRONG><a name="[32e]"></a>HAL_QSPI_Transmit</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, stm32l4xx_hal_qspi.o(i.HAL_QSPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_QSPI_Transmit &rArr; HAL_QSPI_Abort &rArr; QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Abort
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_qspi_transfer
</UL>

<P><STRONG><a name="[32f]"></a>HAL_RCCEx_GetPeriphCLKFreq</STRONG> (Thumb, 1962 bytes, Stack size 32 bytes, stm32l4xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPeriphCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_GetSAIxPeriphCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
</UL>

<P><STRONG><a name="[334]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 1230 bytes, Stack size 32 bytes, stm32l4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI2_Config
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[337]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 360 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[301]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_qspi_configure
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_timer_get_freq
</UL>

<P><STRONG><a name="[333]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_can_calc_baud
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_timer_get_freq
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_init
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[331]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_timer_get_freq
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_init
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[332]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 220 bytes, Stack size 20 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_init
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[338]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1772 bytes, Stack size 32 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[33a]"></a>HAL_RNG_GenerateRandomNumber</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32l4xx_hal_rng.o(i.HAL_RNG_GenerateRandomNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RNG_GenerateRandomNumber &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_rng_rand
</UL>

<P><STRONG><a name="[33b]"></a>HAL_RNG_Init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32l4xx_hal_rng.o(i.HAL_RNG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RNG_Init &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_MspInit
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RNG_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_rng_crypto_create
</UL>

<P><STRONG><a name="[33c]"></a>HAL_RNG_MspInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32l4xx_hal_msp.o(i.HAL_RNG_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RNG_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_Init
</UL>

<P><STRONG><a name="[340]"></a>HAL_RTCEx_AlarmBEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_rtc_ex.o(i.HAL_RTCEx_AlarmBEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>

<P><STRONG><a name="[7e9]"></a>HAL_RTCEx_BKUPRead</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l4xx_hal_rtc_ex.o(i.HAL_RTCEx_BKUPRead))
<BR><BR>[Called By]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_rtc_init
</UL>

<P><STRONG><a name="[7ea]"></a>HAL_RTCEx_BKUPWrite</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l4xx_hal_rtc_ex.o(i.HAL_RTCEx_BKUPWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTCEx_BKUPWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_rtc_set_time_stamp
</UL>

<P><STRONG><a name="[33d]"></a>HAL_RTC_AlarmAEventCallback</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, drv_rtc.o(i.HAL_RTC_AlarmAEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = HAL_RTC_AlarmAEventCallback &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_get
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>

<P><STRONG><a name="[33f]"></a>HAL_RTC_AlarmIRQHandler</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_AlarmIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = HAL_RTC_AlarmIRQHandler &rArr; HAL_RTC_AlarmAEventCallback &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmAEventCallback
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_AlarmBEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[341]"></a>HAL_RTC_GetDate</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_GetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_rtc_get_timestamp
</UL>

<P><STRONG><a name="[343]"></a>HAL_RTC_GetTime</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_rtc_get_timestamp
</UL>

<P><STRONG><a name="[344]"></a>HAL_RTC_Init</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RTC_Init &rArr; RTC_ExitInitMode &rArr; HAL_RTC_WaitForSynchro &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[345]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l4xx_hal_msp.o(i.HAL_RTC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[348]"></a>HAL_RTC_SetAlarm_IT</STRONG> (Thumb, 530 bytes, Stack size 32 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_SetAlarm_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RTC_SetAlarm_IT &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_AlarmA
</UL>

<P><STRONG><a name="[34a]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RTC_SetDate &rArr; RTC_ExitInitMode &rArr; HAL_RTC_WaitForSynchro &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_rtc_set_time_stamp
</UL>

<P><STRONG><a name="[34b]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RTC_SetTime &rArr; RTC_ExitInitMode &rArr; HAL_RTC_WaitForSynchro &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_rtc_set_time_stamp
</UL>

<P><STRONG><a name="[34c]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RTC_WaitForSynchro &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
</UL>

<P><STRONG><a name="[34d]"></a>HAL_SAI_DMAStop</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, stm32l4xx_hal_sai.o(i.HAL_SAI_DMAStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SAI_DMAStop &rArr; SAI_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_sai_dma_tx_enable
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_sai_dma_rx_enable
</UL>

<P><STRONG><a name="[403]"></a>HAL_SAI_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_sai.o(i.HAL_SAI_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_DMAError
</UL>

<P><STRONG><a name="[34f]"></a>HAL_SAI_Init</STRONG> (Thumb, 514 bytes, Stack size 32 bytes, stm32l4xx_hal_sai.o(i.HAL_SAI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_SAI_Init &rArr; HAL_SAI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_MspInit
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Disable
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_InitProtocol
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_sai_set_frq
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_sai_set_channel
</UL>

<P><STRONG><a name="[351]"></a>HAL_SAI_InitProtocol</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, stm32l4xx_hal_sai.o(i.HAL_SAI_InitProtocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = HAL_SAI_InitProtocol &rArr; HAL_SAI_Init &rArr; HAL_SAI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_InitPCM
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_InitI2S
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SAI1_Init
</UL>

<P><STRONG><a name="[350]"></a>HAL_SAI_MspInit</STRONG> (Thumb, 304 bytes, Stack size 32 bytes, stm32l4xx_hal_msp.o(i.HAL_SAI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_SAI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
</UL>

<P><STRONG><a name="[356]"></a>HAL_SAI_Receive_DMA</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, stm32l4xx_hal_sai.o(i.HAL_SAI_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_SAI_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_InterruptFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_sai_dma_rx_enable
</UL>

<P><STRONG><a name="[35a]"></a>HAL_SAI_RxCpltCallback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, drv_sai.o(i.HAL_SAI_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = HAL_SAI_RxCpltCallback &rArr; HAL_SAI_RxCallback &rArr; os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_RxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_DMARxCplt
</UL>

<P><STRONG><a name="[35b]"></a>HAL_SAI_RxHalfCpltCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drv_sai.o(i.HAL_SAI_RxHalfCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = HAL_SAI_RxHalfCpltCallback &rArr; HAL_SAI_RxCallback &rArr; os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_RxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_DMARxHalfCplt
</UL>

<P><STRONG><a name="[35c]"></a>HAL_SAI_Transmit</STRONG> (Thumb, 366 bytes, Stack size 32 bytes, stm32l4xx_hal_sai.o(i.HAL_SAI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_SAI_Transmit &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_FillFifo
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_sai_dma_rx_enable
</UL>

<P><STRONG><a name="[35e]"></a>HAL_SAI_Transmit_DMA</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, stm32l4xx_hal_sai.o(i.HAL_SAI_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_SAI_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_InterruptFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_sai_dma_transmit
</UL>

<P><STRONG><a name="[35f]"></a>HAL_SAI_TxCpltCallback</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, drv_sai.o(i.HAL_SAI_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = HAL_SAI_TxCpltCallback &rArr; os_hw_sai_isr &rArr; os_device_send_notify &rArr; os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_sai_isr
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_post
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_DMATxCplt
</UL>

<P><STRONG><a name="[361]"></a>HAL_SAI_TxHalfCpltCallback</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, drv_sai.o(i.HAL_SAI_TxHalfCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = HAL_SAI_TxHalfCpltCallback &rArr; os_hw_sai_isr &rArr; os_device_send_notify &rArr; os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_sai_isr
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_post
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_DMATxHalfCplt
</UL>

<P><STRONG><a name="[407]"></a>HAL_SPI_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitReceiveCplt
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAReceiveCplt
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAError
</UL>

<P><STRONG><a name="[7be]"></a>HAL_SPI_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixfer
</UL>

<P><STRONG><a name="[362]"></a>HAL_SPI_Init</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI3_Init
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_init
</UL>

<P><STRONG><a name="[363]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 350 bytes, Stack size 32 bytes, stm32l4xx_hal_msp.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[364]"></a>HAL_SPI_Receive</STRONG> (Thumb, 422 bytes, Stack size 32 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixfer
</UL>

<P><STRONG><a name="[367]"></a>HAL_SPI_Receive_DMA</STRONG> (Thumb, 404 bytes, Stack size 24 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_DMA
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixfer
</UL>

<P><STRONG><a name="[40b]"></a>HAL_SPI_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAReceiveCplt
</UL>

<P><STRONG><a name="[408]"></a>HAL_SPI_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_RxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAHalfReceiveCplt
</UL>

<P><STRONG><a name="[369]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 490 bytes, Stack size 40 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixfer
</UL>

<P><STRONG><a name="[365]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 700 bytes, Stack size 56 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixfer
</UL>

<P><STRONG><a name="[368]"></a>HAL_SPI_TransmitReceive_DMA</STRONG> (Thumb, 538 bytes, Stack size 32 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_DMA
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixfer
</UL>

<P><STRONG><a name="[36b]"></a>HAL_SPI_Transmit_DMA</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_SPI_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixfer
</UL>

<P><STRONG><a name="[40c]"></a>HAL_SPI_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
</UL>

<P><STRONG><a name="[409]"></a>HAL_SPI_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_TxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAHalfTransmitCplt
</UL>

<P><STRONG><a name="[40d]"></a>HAL_SPI_TxRxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_TxRxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitReceiveCplt
</UL>

<P><STRONG><a name="[40a]"></a>HAL_SPI_TxRxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_TxRxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAHalfTransmitReceiveCplt
</UL>

<P><STRONG><a name="[2c3]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32l4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[701]"></a>HAL_SuspendTick</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_SuspendTick))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_board_init
</UL>

<P><STRONG><a name="[37a]"></a>HAL_TIMEx_Break2Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim_ex.o(i.HAL_TIMEx_Break2Callback))
<BR><BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[379]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[37c]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[3f4]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 166 bytes, Stack size 12 bytes, stm32l4xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM15_Init
</UL>

<P><STRONG><a name="[36c]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM17_Init
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM15_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_timer_start
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_tim_probe
</UL>

<P><STRONG><a name="[36d]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, stm32l4xx_hal_msp.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[7ed]"></a>HAL_TIM_Base_Start</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_Base_Start))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_tim_probe
</UL>

<P><STRONG><a name="[7ef]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_timer_start
</UL>

<P><STRONG><a name="[7e5]"></a>HAL_TIM_Base_Stop</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_Base_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pwm_set_period
</UL>

<P><STRONG><a name="[7f0]"></a>HAL_TIM_Base_Stop_IT</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_Base_Stop_IT))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_timer_stop
</UL>

<P><STRONG><a name="[36f]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_ETR_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM15_Init
</UL>

<P><STRONG><a name="[7e6]"></a>HAL_TIM_GenerateEvent</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_GenerateEvent))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pwm_set_pulse
</UL>

<P><STRONG><a name="[375]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[374]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 440 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; os_clockevent_isr &rArr; os_clockevent_next &rArr; os_clockevent_calc_param &rArr; period_calc_next_nsec &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_Break2Callback
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM16_IRQHandler
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_TRG_COM_TIM17_IRQHandler
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_TIM15_IRQHandler
</UL>

<P><STRONG><a name="[37d]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, stm32l4xx_hal_msp.o(i.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[376]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[37e]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 360 bytes, Stack size 16 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC2_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC6_SetConfig
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC5_SetConfig
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[385]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_TIM_PWM_Init &rArr; HAL_TIM_PWM_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[386]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, stm32l4xx_hal_msp.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_TIM_PWM_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[377]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_pwm.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[387]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 306 bytes, Stack size 16 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pwm_enabled
</UL>

<P><STRONG><a name="[389]"></a>HAL_TIM_PWM_Stop</STRONG> (Thumb, 208 bytes, Stack size 12 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_PWM_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_PWM_Stop &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pwm_enabled
</UL>

<P><STRONG><a name="[378]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, drv_hwtimer.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = HAL_TIM_PeriodElapsedCallback &rArr; os_clockevent_isr &rArr; os_clockevent_next &rArr; os_clockevent_calc_param &rArr; period_calc_next_nsec &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[37b]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[394]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[395]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart_ex.o(i.HAL_UARTEx_WakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[38b]"></a>HAL_UART_AbortReceive</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_AbortReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_AbortReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_GetError
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_uart_deinit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_sdma_int_stop
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_sdma_dma_stop
</UL>

<P><STRONG><a name="[38d]"></a>HAL_UART_AbortTransmit</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_AbortTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_AbortTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_GetError
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_uart_deinit
</UL>

<P><STRONG><a name="[38e]"></a>HAL_UART_DeInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_UART_DeInit &rArr; HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_usart_probe
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_uart_deinit
</UL>

<P><STRONG><a name="[390]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, drv_usart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = HAL_UART_ErrorCallback &rArr; stm32_sdma_dma_start &rArr; HAL_UART_Receive_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_sdma_int_start
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_sdma_dma_start
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[391]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 696 bytes, Stack size 32 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback &rArr; os_hw_serial_isr_txdone &rArr; os_device_send_notify &rArr; os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[397]"></a>HAL_UART_Init</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_uart_init
</UL>

<P><STRONG><a name="[38f]"></a>HAL_UART_MspDeInit</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, stm32l4xx_hal_msp.o(i.HAL_UART_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
</UL>

<P><STRONG><a name="[398]"></a>HAL_UART_MspInit</STRONG> (Thumb, 624 bytes, Stack size 32 bytes, stm32l4xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[39d]"></a>HAL_UART_Receive_DMA</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_UART_Receive_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_sdma_dma_start
</UL>

<P><STRONG><a name="[39f]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_sdma_int_start
</UL>

<P><STRONG><a name="[3a1]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, drv_usart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; soft_dma_timeout_irq &rArr; soft_dma_irq &rArr; soft_dma_updata_buffer &rArr; soft_dma_normal_updata_buffer &rArr; copy_ring_to_ring &rArr; copy_line_to_ring &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_timeout_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_USART_IDLE_PROCESS
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
</UL>

<P><STRONG><a name="[3a3]"></a>HAL_UART_RxHalfCpltCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_usart.o(i.HAL_UART_RxHalfCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = HAL_UART_RxHalfCpltCallback &rArr; HAL_UART_RxCpltCallback &rArr; soft_dma_timeout_irq &rArr; soft_dma_irq &rArr; soft_dma_updata_buffer &rArr; soft_dma_normal_updata_buffer &rArr; copy_ring_to_ring &rArr; copy_line_to_ring &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
</UL>

<P><STRONG><a name="[3a4]"></a>HAL_UART_Transmit</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__os_hw_console_output
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_uart_poll_send
</UL>

<P><STRONG><a name="[3a6]"></a>HAL_UART_Transmit_DMA</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_uart_start_send
</UL>

<P><STRONG><a name="[7f3]"></a>HAL_UART_Transmit_IT</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_Transmit_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_uart_start_send
</UL>

<P><STRONG><a name="[3a7]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, drv_usart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = HAL_UART_TxCpltCallback &rArr; os_hw_serial_isr_txdone &rArr; os_device_send_notify &rArr; os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_serial_isr_txdone
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATransmitCplt
</UL>

<P><STRONG><a name="[420]"></a>HAL_UART_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_TxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxHalfCplt
</UL>

<P><STRONG><a name="[3a9]"></a>HAL_USART_IDLE_PROCESS</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, drv_usart.o(i.HAL_USART_IDLE_PROCESS))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = HAL_USART_IDLE_PROCESS &rArr; HAL_UART_RxCpltCallback &rArr; soft_dma_timeout_irq &rArr; soft_dma_irq &rArr; soft_dma_updata_buffer &rArr; soft_dma_normal_updata_buffer &rArr; copy_ring_to_ring &rArr; copy_line_to_ring &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[1e3]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l4xx_it_bsp.o(i.LPTIM1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = LPTIM1_IRQHandler &rArr; HAL_LPTIM_IRQHandler &rArr; HAL_LPTIM_CompareMatchCallback &rArr; lptim_callback &rArr; os_clockevent_isr &rArr; os_clockevent_next &rArr; os_clockevent_calc_param &rArr; period_calc_next_nsec &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[2c8]"></a>LPTIM_Disable</STRONG> (Thumb, 390 bytes, Stack size 32 bytes, stm32l4xx_hal_lptim.o(i.LPTIM_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LPTIM_Disable &rArr; LPTIM_WaitForFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_WaitForFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_TimeOut_Start_IT
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_Counter_Stop_IT
</UL>

<P><STRONG><a name="[3ad]"></a>MQTTCleanSession</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mqttclient.o(i.MQTTCleanSession))
<BR><BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTCloseSession
</UL>

<P><STRONG><a name="[3aa]"></a>MQTTClientInit</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, mqttclient.o(i.MQTTClientInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = MQTTClientInit &rArr; TimerInit &rArr; os_timer_create &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_init
</UL>

<P><STRONG><a name="[3ac]"></a>MQTTCloseSession</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mqttclient.o(i.MQTTCloseSession))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MQTTCloseSession
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTCleanSession
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribeWithResults
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
</UL>

<P><STRONG><a name="[3ae]"></a>MQTTConnect</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mqttclient.o(i.MQTTConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = MQTTConnect &rArr; MQTTConnectWithResults &rArr; waitfor &rArr; cycle &rArr; keepalive &rArr; TimerInit &rArr; os_timer_create &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnectWithResults
</UL>
<BR>[Called By]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_client_connect
</UL>

<P><STRONG><a name="[3af]"></a>MQTTConnectWithResults</STRONG> (Thumb, 188 bytes, Stack size 128 bytes, mqttclient.o(i.MQTTConnectWithResults))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = MQTTConnectWithResults &rArr; waitfor &rArr; cycle &rArr; keepalive &rArr; TimerInit &rArr; os_timer_create &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRelease
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCountdownMS
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCountdown
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_connack
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitfor
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacket
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnect
</UL>

<P><STRONG><a name="[3b7]"></a>MQTTDeserialize_ack</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, mqttdeserializepublish.o(i.MQTTDeserialize_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MQTTDeserialize_ack &rArr; MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readInt
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChar
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decodeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
</UL>

<P><STRONG><a name="[3b5]"></a>MQTTDeserialize_connack</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, mqttconnectclient.o(i.MQTTDeserialize_connack))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MQTTDeserialize_connack &rArr; MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChar
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decodeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnectWithResults
</UL>

<P><STRONG><a name="[3bb]"></a>MQTTDeserialize_publish</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, mqttdeserializepublish.o(i.MQTTDeserialize_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MQTTDeserialize_publish &rArr; MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMQTTLenString
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readInt
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChar
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decodeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[3bd]"></a>MQTTDeserialize_suback</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, mqttsubscribeclient.o(i.MQTTDeserialize_suback))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MQTTDeserialize_suback &rArr; MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readInt
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChar
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decodeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribeWithResults
</UL>

<P><STRONG><a name="[3be]"></a>MQTTDisconnect</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, mqttclient.o(i.MQTTDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = MQTTDisconnect &rArr; TimerInit &rArr; os_timer_create &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRelease
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCountdownMS
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_disconnect
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTCloseSession
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_disconnect
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_client_subscribe
</UL>

<P><STRONG><a name="[6b4]"></a>MQTTIsConnected</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mqttclient.o(i.MQTTIsConnected))
<BR><BR>[Called By]<UL><LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_link
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_is_connected
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_disconnect
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_client_subscribe
</UL>

<P><STRONG><a name="[3c0]"></a>MQTTNetworkInit</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, mqttoneos.o(i.MQTTNetworkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = MQTTNetworkInit &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_init
</UL>

<P><STRONG><a name="[3c2]"></a>MQTTPacket_decode</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, mqttpacket.o(i.MQTTPacket_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MQTTPacket_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decodeBuf
</UL>

<P><STRONG><a name="[3b9]"></a>MQTTPacket_decodeBuf</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mqttpacket.o(i.MQTTPacket_decodeBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_suback
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_connack
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_ack
</UL>

<P><STRONG><a name="[3ca]"></a>MQTTPacket_encode</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, mqttpacket.o(i.MQTTPacket_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MQTTPacket_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_zero
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_ack
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPacket
</UL>

<P><STRONG><a name="[3c3]"></a>MQTTPacket_equals</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, mqttpacket.o(i.MQTTPacket_equals))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MQTTPacket_equals &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deliverMessage
</UL>

<P><STRONG><a name="[3cd]"></a>MQTTPacket_len</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mqttpacket.o(i.MQTTPacket_len))
<BR><BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>

<P><STRONG><a name="[3c5]"></a>MQTTPublish</STRONG> (Thumb, 264 bytes, Stack size 80 bytes, mqttclient.o(i.MQTTPublish))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = MQTTPublish &rArr; waitfor &rArr; cycle &rArr; keepalive &rArr; TimerInit &rArr; os_timer_create &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRelease
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCountdownMS
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_ack
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitfor
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTCloseSession
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacket
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextPacketId
</UL>
<BR>[Called By]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_client_publish
</UL>

<P><STRONG><a name="[3c8]"></a>MQTTSerialize_ack</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, mqttserializepublish.o(i.MQTTSerialize_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MQTTSerialize_ack &rArr; MQTTPacket_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[3b2]"></a>MQTTSerialize_connect</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, mqttconnectclient.o(i.MQTTSerialize_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MQTTSerialize_connect &rArr; writeMQTTString &rArr; writeCString &rArr; writeInt
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_len
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connectLength
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnectWithResults
</UL>

<P><STRONG><a name="[3cc]"></a>MQTTSerialize_connectLength</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, mqttconnectclient.o(i.MQTTSerialize_connectLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MQTTSerialize_connectLength &rArr; MQTTstrlen &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>

<P><STRONG><a name="[3bf]"></a>MQTTSerialize_disconnect</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mqttconnectclient.o(i.MQTTSerialize_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MQTTSerialize_disconnect &rArr; MQTTSerialize_zero &rArr; MQTTPacket_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
</UL>

<P><STRONG><a name="[3d2]"></a>MQTTSerialize_pingreq</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mqttconnectclient.o(i.MQTTSerialize_pingreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MQTTSerialize_pingreq &rArr; MQTTSerialize_zero &rArr; MQTTPacket_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keepalive
</UL>

<P><STRONG><a name="[3c7]"></a>MQTTSerialize_publish</STRONG> (Thumb, 176 bytes, Stack size 64 bytes, mqttserializepublish.o(i.MQTTSerialize_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MQTTSerialize_publish &rArr; MQTTSerialize_publishLength &rArr; MQTTstrlen &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_len
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publishLength
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
</UL>

<P><STRONG><a name="[3d3]"></a>MQTTSerialize_publishLength</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, mqttserializepublish.o(i.MQTTSerialize_publishLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MQTTSerialize_publishLength &rArr; MQTTstrlen &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
</UL>

<P><STRONG><a name="[3d4]"></a>MQTTSerialize_subscribe</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, mqttsubscribeclient.o(i.MQTTSerialize_subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MQTTSerialize_subscribe &rArr; MQTTSerialize_subscribeLength &rArr; MQTTstrlen &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_len
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribeLength
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribeWithResults
</UL>

<P><STRONG><a name="[3d5]"></a>MQTTSerialize_subscribeLength</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, mqttsubscribeclient.o(i.MQTTSerialize_subscribeLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MQTTSerialize_subscribeLength &rArr; MQTTstrlen &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
</UL>

<P><STRONG><a name="[3d1]"></a>MQTTSerialize_zero</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, mqttconnectclient.o(i.MQTTSerialize_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MQTTSerialize_zero &rArr; MQTTPacket_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_pingreq
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_disconnect
</UL>

<P><STRONG><a name="[3d6]"></a>MQTTSetMessageHandler</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, mqttclient.o(i.MQTTSetMessageHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MQTTSetMessageHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribeWithResults
</UL>

<P><STRONG><a name="[3d8]"></a>MQTTSubscribe</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, mqttclient.o(i.MQTTSubscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = MQTTSubscribe &rArr; MQTTSubscribeWithResults &rArr; waitfor &rArr; cycle &rArr; keepalive &rArr; TimerInit &rArr; os_timer_create &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribeWithResults
</UL>
<BR>[Called By]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_client_subscribe
</UL>

<P><STRONG><a name="[3d9]"></a>MQTTSubscribeWithResults</STRONG> (Thumb, 214 bytes, Stack size 88 bytes, mqttclient.o(i.MQTTSubscribeWithResults))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = MQTTSubscribeWithResults &rArr; waitfor &rArr; cycle &rArr; keepalive &rArr; TimerInit &rArr; os_timer_create &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRelease
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCountdownMS
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_suback
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitfor
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSetMessageHandler
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTCloseSession
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacket
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextPacketId
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribe
</UL>

<P><STRONG><a name="[3da]"></a>MQTTYield</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, mqttclient.o(i.MQTTYield))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = MQTTYield &rArr; cycle &rArr; keepalive &rArr; TimerInit &rArr; os_timer_create &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_msleep
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRelease
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIsExpired
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCountdownMS
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>
<BR>[Called By]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_yield
</UL>

<P><STRONG><a name="[3d0]"></a>MQTTstrlen</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, mqttpacket.o(i.MQTTstrlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MQTTstrlen &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connectLength
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribeLength
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publishLength
</UL>

<P><STRONG><a name="[7dc]"></a>MX_IWDG1_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_iwdg.o(i.MX_IWDG1_Init))
<BR><BR>[Called By]<UL><LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_iwdg_start
</UL>

<P><STRONG><a name="[7dd]"></a>MX_IWDG2_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_iwdg.o(i.MX_IWDG2_Init))
<BR><BR>[Called By]<UL><LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_iwdg_start
</UL>

<P><STRONG><a name="[3ea]"></a>MX_IWDG_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bsp.o(i.MX_IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MX_IWDG_Init &rArr; HAL_IWDG_Init &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_iwdg_start
</UL>

<P><STRONG><a name="[3ec]"></a>MX_QUADSPI_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsp.o(i.MX_QUADSPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MX_QUADSPI_Init &rArr; HAL_QSPI_Init &rArr; HAL_QSPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[3fc]"></a>MX_USB_DEVICE_Init</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, drv_usbd.o(i.MX_USB_DEVICE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MX_USB_DEVICE_Init &rArr; USBD_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RegisterClass
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_usbd_probe
</UL>

<P><STRONG><a name="[1e5]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l4xx_it_bsp.o(i.OTG_FS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = OTG_FS_IRQHandler &rArr; HAL_PCD_IRQHandler &rArr; HAL_PCD_SuspendCallback &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1cb]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_rtc.o(i.RTC_Alarm_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = RTC_Alarm_IRQHandler &rArr; HAL_RTC_AlarmIRQHandler &rArr; HAL_RTC_AlarmAEventCallback &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[342]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l4xx_hal_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>

<P><STRONG><a name="[349]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32l4xx_hal_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
</UL>

<P><STRONG><a name="[346]"></a>RTC_EnterInitMode</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32l4xx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_EnterInitMode &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[347]"></a>RTC_ExitInitMode</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32l4xx_hal_rtc.o(i.RTC_ExitInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RTC_ExitInitMode &rArr; HAL_RTC_WaitForSynchro &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[402]"></a>RTC_Set_AlarmA</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, drv_rtc.o(i.RTC_Set_AlarmA))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RTC_Set_AlarmA &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_rtc_set_alarm_stamp
</UL>

<P><STRONG><a name="[1a1]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l4xx_it_bsp.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[411]"></a>SystemClock_Config</STRONG> (Thumb, 244 bytes, Stack size 232 bytes, bsp.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[31]"></a>SystemInit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, system_stm32l4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(.text)
</UL>
<P><STRONG><a name="[1ba]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l4xx_it_bsp.o(i.TIM1_BRK_TIM15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = TIM1_BRK_TIM15_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; os_clockevent_isr &rArr; os_clockevent_next &rArr; os_clockevent_calc_param &rArr; period_calc_next_nsec &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1bc]"></a>TIM1_TRG_COM_TIM17_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l4xx_it_bsp.o(i.TIM1_TRG_COM_TIM17_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = TIM1_TRG_COM_TIM17_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; os_clockevent_isr &rArr; os_clockevent_next &rArr; os_clockevent_calc_param &rArr; period_calc_next_nsec &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1bb]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l4xx_it_bsp.o(i.TIM1_UP_TIM16_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = TIM1_UP_TIM16_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; os_clockevent_isr &rArr; os_clockevent_next &rArr; os_clockevent_calc_param &rArr; period_calc_next_nsec &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1c0]"></a>TIM4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l4xx_it_bsp.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = TIM4_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; os_clockevent_isr &rArr; os_clockevent_next &rArr; os_clockevent_calc_param &rArr; period_calc_next_nsec &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[36e]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[388]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32l4xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>

<P><STRONG><a name="[370]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, stm32l4xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[380]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 156 bytes, Stack size 12 bytes, stm32l4xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[51]"></a>TimerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mqttoneos.o(i.TimerCallback))
<BR>[Address Reference Count : 1]<UL><LI> mqttoneos.o(i.TimerInit)
</UL>
<P><STRONG><a name="[414]"></a>TimerCheckForTimeOut</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, mqttoneos.o(i.TimerCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = TimerCheckForTimeOut &rArr; os_timer_stop &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_get
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_is_active
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIsExpired
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_write_tcp
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_read_tcp
</UL>

<P><STRONG><a name="[3b1]"></a>TimerCountdown</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mqttoneos.o(i.TimerCountdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = TimerCountdown &rArr; TimerCountdownMS &rArr; TimerSetTimeOutState &rArr; os_timer_start &rArr; _k_timer_activate &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCountdownMS
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnectWithResults
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacket
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPacket
</UL>

<P><STRONG><a name="[3b0]"></a>TimerCountdownMS</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, mqttoneos.o(i.TimerCountdownMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = TimerCountdownMS &rArr; TimerSetTimeOutState &rArr; os_timer_start &rArr; _k_timer_activate &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_from_ms
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCountdown
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keepalive
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribeWithResults
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnectWithResults
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTYield
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
</UL>

<P><STRONG><a name="[3ab]"></a>TimerInit</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, mqttoneos.o(i.TimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = TimerInit &rArr; os_timer_create &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_get
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keepalive
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribeWithResults
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnectWithResults
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTYield
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTClientInit
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_write_tcp
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_read_tcp
</UL>

<P><STRONG><a name="[3dd]"></a>TimerIsExpired</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mqttoneos.o(i.TimerIsExpired))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = TimerIsExpired &rArr; TimerCheckForTimeOut &rArr; os_timer_stop &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCheckForTimeOut
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitfor
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keepalive
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacket
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTYield
</UL>

<P><STRONG><a name="[77d]"></a>TimerLeftMS</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mqttoneos.o(i.TimerLeftMS))
<BR><BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacket
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPacket
</UL>

<P><STRONG><a name="[3b6]"></a>TimerRelease</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mqttoneos.o(i.TimerRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = TimerRelease &rArr; os_timer_destroy &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_get
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keepalive
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribeWithResults
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnectWithResults
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTYield
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_write_tcp
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_read_tcp
</UL>

<P><STRONG><a name="[418]"></a>TimerSetTimeOutState</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, mqttoneos.o(i.TimerSetTimeOutState))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = TimerSetTimeOutState &rArr; os_timer_start &rArr; _k_timer_activate &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_get
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_set_timeout_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCountdownMS
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_write_tcp
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_read_tcp
</UL>

<P><STRONG><a name="[1d6]"></a>UART4_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l4xx_it_bsp.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = UART4_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback &rArr; os_hw_serial_isr_txdone &rArr; os_device_send_notify &rArr; os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_USART_IDLE_PROCESS
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[39a]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 248 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[39b]"></a>UART_CheckIdleState</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32l4xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[399]"></a>UART_SetConfig</STRONG> (Thumb, 842 bytes, Stack size 40 bytes, stm32l4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[39e]"></a>UART_Start_Receive_DMA</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, stm32l4xx_hal_uart.o(i.UART_Start_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
</UL>

<P><STRONG><a name="[3a0]"></a>UART_Start_Receive_IT</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.UART_Start_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>

<P><STRONG><a name="[3a5]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[1c7]"></a>USART1_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l4xx_it_bsp.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback &rArr; os_hw_serial_isr_txdone &rArr; os_device_send_notify &rArr; os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_USART_IDLE_PROCESS
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1c8]"></a>USART2_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l4xx_it_bsp.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback &rArr; os_hw_serial_isr_txdone &rArr; os_device_send_notify &rArr; os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_USART_IDLE_PROCESS
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1c9]"></a>USART3_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l4xx_it_bsp.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback &rArr; os_hw_serial_isr_txdone &rArr; os_device_send_notify &rArr; os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_USART_IDLE_PROCESS
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[438]"></a>USBD_ClrClassConfig</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, proto_usbd_core.o(i.USBD_ClrClassConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_ClrClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[42c]"></a>USBD_CtlContinueRx</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, proto_usbd_ioreq.o(i.USBD_CtlContinueRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_CtlContinueRx
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>

<P><STRONG><a name="[429]"></a>USBD_CtlContinueSendData</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, proto_usbd_ioreq.o(i.USBD_CtlContinueSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_CtlContinueSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[423]"></a>USBD_CtlError</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, proto_usbd_ctlreq.o(i.USBD_CtlError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[42a]"></a>USBD_CtlReceiveStatus</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, proto_usbd_ioreq.o(i.USBD_CtlReceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_CtlReceiveStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[425]"></a>USBD_CtlSendData</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, proto_usbd_ioreq.o(i.USBD_CtlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_CtlSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[422]"></a>USBD_CtlSendStatus</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, proto_usbd_ioreq.o(i.USBD_CtlSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetFeature
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[428]"></a>USBD_Get_USB_Status</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, drv_usbd.o(i.USBD_Get_USB_Status))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Stop
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_FlushEP
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DeInit
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
</UL>

<P><STRONG><a name="[3fd]"></a>USBD_Init</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, proto_usbd_core.o(i.USBD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[d]"></a>USBD_LL_ClearStallEP</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, drv_usbd.o(i.USBD_LL_ClearStallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBD_LL_ClearStallEP &rArr; HAL_PCD_EP_ClrStall &rArr; USB_EPClearStall
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_ClrStall
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbd.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>USBD_LL_CloseEP</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, drv_usbd.o(i.USBD_LL_CloseEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_LL_CloseEP &rArr; HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Close
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbd.o(.data)
</UL>
<P><STRONG><a name="[2d9]"></a>USBD_LL_DataInStage</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, proto_usbd_core.o(i.USBD_LL_DataInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_LL_DataInStage &rArr; USBD_CtlContinueSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RunTestMode
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
</UL>

<P><STRONG><a name="[2db]"></a>USBD_LL_DataOutStage</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, proto_usbd_core.o(i.USBD_LL_DataOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_LL_DataOutStage &rArr; USBD_CtlContinueRx
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
</UL>

<P><STRONG><a name="[6]"></a>USBD_LL_DeInit</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, drv_usbd.o(i.USBD_LL_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBD_LL_DeInit &rArr; HAL_PCD_DeInit &rArr; HAL_PCD_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DeInit
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbd.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>USBD_LL_Delay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_usbd.o(i.USBD_LL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_LL_Delay &rArr; HAL_Delay &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbd.o(.data)
</UL>
<P><STRONG><a name="[2d7]"></a>USBD_LL_DevConnected</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, proto_usbd_core.o(i.USBD_LL_DevConnected))
<BR><BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ConnectCallback
</UL>

<P><STRONG><a name="[2e0]"></a>USBD_LL_DevDisconnected</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, proto_usbd_core.o(i.USBD_LL_DevDisconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_DevDisconnected
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DisconnectCallback
</UL>

<P><STRONG><a name="[b]"></a>USBD_LL_FlushEP</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, drv_usbd.o(i.USBD_LL_FlushEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_LL_FlushEP &rArr; HAL_PCD_EP_Flush &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Flush
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbd.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>USBD_LL_GetEPMaxPacket</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, drv_usbd.o(i.USBD_LL_GetEPMaxPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_GetEPMaxPacket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbd.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>USBD_LL_GetRxDataSize</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, drv_usbd.o(i.USBD_LL_GetRxDataSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_LL_GetRxDataSize
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_GetRxCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbd.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>USBD_LL_Init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, drv_usbd.o(i.USBD_LL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USBD_LL_Init &rArr; HAL_PCDEx_SetTxFiFo
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_SetTxFiFo
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_SetRxFiFo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbd.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>USBD_LL_IsStallEP</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, drv_usbd.o(i.USBD_LL_IsStallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_IsStallEP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbd.o(.data)
</UL>
<P><STRONG><a name="[307]"></a>USBD_LL_IsoINIncomplete</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, proto_usbd_core.o(i.USBD_LL_IsoINIncomplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_LL_IsoINIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOINIncompleteCallback
</UL>

<P><STRONG><a name="[308]"></a>USBD_LL_IsoOUTIncomplete</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, proto_usbd_core.o(i.USBD_LL_IsoOUTIncomplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_LL_IsoOUTIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOOUTIncompleteCallback
</UL>

<P><STRONG><a name="[9]"></a>USBD_LL_OpenEP</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, drv_usbd.o(i.USBD_LL_OpenEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Open
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbd.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>USBD_LL_PrepareReceive</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, drv_usbd.o(i.USBD_LL_PrepareReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbd.o(.data)
</UL>
<P><STRONG><a name="[317]"></a>USBD_LL_Reset</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, proto_usbd_core.o(i.USBD_LL_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_LL_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[318]"></a>USBD_LL_Resume</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, proto_usbd_core.o(i.USBD_LL_Resume))
<BR><BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
</UL>

<P><STRONG><a name="[319]"></a>USBD_LL_SOF</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, proto_usbd_core.o(i.USBD_LL_SOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_SOF
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
</UL>

<P><STRONG><a name="[316]"></a>USBD_LL_SetSpeed</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, proto_usbd_core.o(i.USBD_LL_SetSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[f]"></a>USBD_LL_SetUSBAddress</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, drv_usbd.o(i.USBD_LL_SetUSBAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_LL_SetUSBAddress &rArr; HAL_PCD_SetAddress &rArr; USB_SetDevAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbd.o(.data)
</UL>
<P><STRONG><a name="[31d]"></a>USBD_LL_SetupStage</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, proto_usbd_core.o(i.USBD_LL_SetupStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ParseSetupRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
</UL>

<P><STRONG><a name="[c]"></a>USBD_LL_StallEP</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, drv_usbd.o(i.USBD_LL_StallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBD_LL_StallEP &rArr; HAL_PCD_EP_SetStall &rArr; USB_EPSetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbd.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>USBD_LL_Start</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, drv_usbd.o(i.USBD_LL_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_LL_Start &rArr; HAL_PCD_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbd.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>USBD_LL_Stop</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, drv_usbd.o(i.USBD_LL_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_LL_Stop &rArr; HAL_PCD_Stop &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Stop
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbd.o(.data)
</UL>
<P><STRONG><a name="[322]"></a>USBD_LL_Suspend</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, proto_usbd_core.o(i.USBD_LL_Suspend))
<BR><BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
</UL>

<P><STRONG><a name="[10]"></a>USBD_LL_Transmit</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, drv_usbd.o(i.USBD_LL_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbd.o(.data)
</UL>
<P><STRONG><a name="[430]"></a>USBD_ParseSetupRequest</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, proto_usbd_ctlreq.o(i.USBD_ParseSetupRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USBD_ParseSetupRequest &rArr; SWAPBYTE
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWAPBYTE
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[3fe]"></a>USBD_RegisterClass</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, proto_usbd_core.o(i.USBD_RegisterClass))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_RegisterClass
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[42b]"></a>USBD_RunTestMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, proto_usbd_core.o(i.USBD_RunTestMode))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[437]"></a>USBD_SetClassConfig</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, proto_usbd_core.o(i.USBD_SetClassConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_SetClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[7fa]"></a>USBD_Start</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, proto_usbd_core.o(i.USBD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_start
</UL>

<P><STRONG><a name="[431]"></a>USBD_StdDevReq</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, proto_usbd_ctlreq.o(i.USBD_StdDevReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetFeature
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[433]"></a>USBD_StdEPReq</STRONG> (Thumb, 586 bytes, Stack size 24 bytes, proto_usbd_ctlreq.o(i.USBD_StdEPReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_StdEPReq &rArr; USBD_CtlSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[432]"></a>USBD_StdItfReq</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, proto_usbd_ctlreq.o(i.USBD_StdItfReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_StdItfReq &rArr; USBD_CtlError
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[2e9]"></a>USB_ActivateEndpoint</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, stm32l4xx_ll_usb.o(i.USB_ActivateEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_ActivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Open
</UL>

<P><STRONG><a name="[2ff]"></a>USB_ActivateSetup</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32l4xx_ll_usb.o(i.USB_ActivateSetup))
<BR><BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[30c]"></a>USB_CoreInit</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, stm32l4xx_ll_usb.o(i.USB_CoreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_CoreInit
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreReset
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[2e2]"></a>USB_DeactivateEndpoint</STRONG> (Thumb, 318 bytes, Stack size 16 bytes, stm32l4xx_ll_usb.o(i.USB_DeactivateEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_DeactivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Close
</UL>

<P><STRONG><a name="[320]"></a>USB_DevConnect</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32l4xx_ll_usb.o(i.USB_DevConnect))
<BR><BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>

<P><STRONG><a name="[310]"></a>USB_DevDisconnect</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32l4xx_ll_usb.o(i.USB_DevDisconnect))
<BR><BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Stop
</UL>

<P><STRONG><a name="[30e]"></a>USB_DevInit</STRONG> (Thumb, 430 bytes, Stack size 36 bytes, stm32l4xx_ll_usb.o(i.USB_DevInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_DevInit &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetDevSpeed
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[30b]"></a>USB_DisableGlobalInt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_ll_usb.o(i.USB_DisableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Stop
</UL>

<P><STRONG><a name="[2eb]"></a>USB_EP0StartXfer</STRONG> (Thumb, 402 bytes, Stack size 16 bytes, stm32l4xx_ll_usb.o(i.USB_EP0StartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
</UL>

<P><STRONG><a name="[2ef]"></a>USB_EP0_OutStart</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, stm32l4xx_ll_usb.o(i.USB_EP0_OutStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
</UL>

<P><STRONG><a name="[2e4]"></a>USB_EPClearStall</STRONG> (Thumb, 142 bytes, Stack size 12 bytes, stm32l4xx_ll_usb.o(i.USB_EPClearStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_ClrStall
</UL>

<P><STRONG><a name="[2ee]"></a>USB_EPSetStall</STRONG> (Thumb, 154 bytes, Stack size 12 bytes, stm32l4xx_ll_usb.o(i.USB_EPSetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_EPSetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
</UL>

<P><STRONG><a name="[2ec]"></a>USB_EPStartXfer</STRONG> (Thumb, 690 bytes, Stack size 24 bytes, stm32l4xx_ll_usb.o(i.USB_EPStartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
</UL>

<P><STRONG><a name="[31f]"></a>USB_EnableGlobalInt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_ll_usb.o(i.USB_EnableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>

<P><STRONG><a name="[2e7]"></a>USB_FlushRxFifo</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32l4xx_ll_usb.o(i.USB_FlushRxFifo))
<BR><BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Flush
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StopDevice
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
</UL>

<P><STRONG><a name="[2e6]"></a>USB_FlushTxFifo</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32l4xx_ll_usb.o(i.USB_FlushTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_FlushTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Stop
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Flush
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StopDevice
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
</UL>

<P><STRONG><a name="[300]"></a>USB_GetDevSpeed</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l4xx_ll_usb.o(i.USB_GetDevSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_GetDevSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[2f2]"></a>USB_GetMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_ll_usb.o(i.USB_GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[2f9]"></a>USB_ReadDevAllInEpInterrupt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l4xx_ll_usb.o(i.USB_ReadDevAllInEpInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[2f5]"></a>USB_ReadDevAllOutEpInterrupt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l4xx_ll_usb.o(i.USB_ReadDevAllOutEpInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[2fa]"></a>USB_ReadDevInEPInterrupt</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32l4xx_ll_usb.o(i.USB_ReadDevInEPInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_ReadDevInEPInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[2f6]"></a>USB_ReadDevOutEPInterrupt</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32l4xx_ll_usb.o(i.USB_ReadDevOutEPInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ReadDevOutEPInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[2f3]"></a>USB_ReadInterrupts</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_ll_usb.o(i.USB_ReadInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[2f4]"></a>USB_ReadPacket</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, stm32l4xx_ll_usb.o(i.USB_ReadPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[30d]"></a>USB_SetCurrentMode</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32l4xx_ll_usb.o(i.USB_SetCurrentMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_SetCurrentMode &rArr; HAL_Delay &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[31b]"></a>USB_SetDevAddress</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32l4xx_ll_usb.o(i.USB_SetDevAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_SetDevAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
</UL>

<P><STRONG><a name="[43b]"></a>USB_SetDevSpeed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l4xx_ll_usb.o(i.USB_SetDevSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
</UL>

<P><STRONG><a name="[302]"></a>USB_SetTurnaroundTime</STRONG> (Thumb, 186 bytes, Stack size 12 bytes, stm32l4xx_ll_usb.o(i.USB_SetTurnaroundTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_SetTurnaroundTime
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[2dd]"></a>USB_StopDevice</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, stm32l4xx_ll_usb.o(i.USB_StopDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_StopDevice &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DeInit
</UL>

<P><STRONG><a name="[400]"></a>USB_WritePacket</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, stm32l4xx_ll_usb.o(i.USB_WritePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteEmptyTxFifo
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
</UL>

<P><STRONG><a name="[315]"></a>_Error_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, drv_common.o(i._Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_start
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[265]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[24a]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stubs.o(i.__aeabi_errno_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_errno_addr &rArr; os_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_recvfrom_udp
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_recv_tcp
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneos_read
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_write_tcp
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_read_tcp
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[43e]"></a>__hardfp___mathlib_tofloat</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, narrow.o(i.__hardfp___mathlib_tofloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __hardfp___mathlib_tofloat &rArr; frexp &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[443]"></a>__hardfp_ldexp</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, ldexp.o(i.__hardfp_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
</UL>

<P><STRONG><a name="[446]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>

<P><STRONG><a name="[445]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>

<P><STRONG><a name="[272]"></a>__mathlib_narrow</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, narrow.o(i.__mathlib_narrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __mathlib_narrow &rArr; __hardfp___mathlib_tofloat &rArr; frexp &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[448]"></a>__os_hw_console_output</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, drv_usart.o(i.__os_hw_console_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __os_hw_console_output &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_console_output
</UL>

<P><STRONG><a name="[449]"></a>__os_hw_pin_init</STRONG> (Thumb, 378 bytes, Stack size 8 bytes, drv_gpio.o(i.__os_hw_pin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __os_hw_pin_init
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableVddIO2
</UL>
<BR>[Called By]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_pin_init
</UL>

<P><STRONG><a name="[283]"></a>__support_ldexp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ldexp.o(i.__support_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __support_ldexp &rArr; __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[98]"></a>_audio_player_callback</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, audio_player.o(i._audio_player_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _audio_player_callback &rArr; os_mp_free &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mp_free
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> audio_player.o(.constdata)
</UL>
<P><STRONG><a name="[242]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[bb]"></a>_pwm_set</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, pwm.o(i._pwm_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _pwm_set &rArr; os_pwm_set_pulse
</UL>
<BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pwm_set_pulse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm.o(.constdata)
</UL>
<P><STRONG><a name="[230]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stubs.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[53c]"></a>ap3216c_read_ambient_light</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, ap3216c.o(i.ap3216c_read_ambient_light))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = ap3216c_read_ambient_light &rArr; ap3216c_get_param &rArr; read_regs &rArr; os_i2c_client_read &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_low_and_high
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_get_param
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_fetch_light_data
</UL>

<P><STRONG><a name="[53b]"></a>ap3216c_read_ir_data</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, ap3216c.o(i.ap3216c_read_ir_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = ap3216c_read_ir_data &rArr; read_low_and_high &rArr; read_regs &rArr; os_i2c_client_read &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_low_and_high
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_fetch_ir_data
</UL>

<P><STRONG><a name="[53d]"></a>ap3216c_read_ps_data</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ap3216c.o(i.ap3216c_read_ps_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = ap3216c_read_ps_data &rArr; read_low_and_high &rArr; read_regs &rArr; os_i2c_client_read &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_low_and_high
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_fetch_proximity_data
</UL>

<P><STRONG><a name="[546]"></a>at_parser_connect</STRONG> (Thumb, 146 bytes, Stack size 312 bytes, at_parser.o(i.at_parser_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = at_parser_connect &rArr; at_parser_send &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_wait
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_from_ms
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_send
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_unlock
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_lock
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_at_init
</UL>

<P><STRONG><a name="[54a]"></a>at_parser_deinit</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, at_parser.o(i.at_parser_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = at_parser_deinit &rArr; os_device_close &rArr; os_sem_wait &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_deinit
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_destroy
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_close
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_deinit
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_deinit
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_object_deinit
</UL>

<P><STRONG><a name="[552]"></a>at_parser_exec_cmd</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, at_parser.o(i.at_parser_exec_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = at_parser_exec_cmd &rArr; at_parser_exec_cmd_valist &rArr; at_parser_vasprintfln &rArr; at_parser_vasprintf &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_cmd_valist
</UL>
<BR>[Called By]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_alloc
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_start_ap
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_set_mode
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_set_ipdinofo
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_set_ap_cip
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_scan_info
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_get_stat
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_get_sta_mac
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_get_sta_cip
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_get_mode
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_get_ap_mac
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_get_ap_cip
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_disconnect_ap
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_connect_ap
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_set_dnsserver
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_ping
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_sendto
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_send
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_gethostbyname
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_destroy
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_connect
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_bind
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_ipaddr
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_firmware_version
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_dnsserver
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_at_test
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_at_init
</UL>

<P><STRONG><a name="[553]"></a>at_parser_exec_cmd_valist</STRONG> (Thumb, 284 bytes, Stack size 56 bytes, at_parser.o(i.at_parser_exec_cmd_valist))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = at_parser_exec_cmd_valist &rArr; at_parser_vasprintfln &rArr; at_parser_vasprintf &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_wait
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_unlock
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_lock
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_vasprintfln
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_cmd
</UL>

<P><STRONG><a name="[547]"></a>at_parser_exec_lock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, at_parser.o(i.at_parser_exec_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = at_parser_exec_lock &rArr; os_mutex_recursive_lock &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_recursive_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_sendto
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_send
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_send
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_cmd_valist
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_connect
</UL>

<P><STRONG><a name="[549]"></a>at_parser_exec_unlock</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, at_parser.o(i.at_parser_exec_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = at_parser_exec_unlock &rArr; os_mutex_recursive_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_recursive_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_sendto
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_send
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_send
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_cmd_valist
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_connect
</UL>

<P><STRONG><a name="[55b]"></a>at_parser_init</STRONG> (Thumb, 304 bytes, Stack size 48 bytes, at_parser.o(i.at_parser_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = at_parser_init &rArr; at_parser_device_open &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_init
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_init
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_deinit
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_create
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_close
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_deinit
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_init
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_deinit
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_snprintf
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_list_add
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_device_open
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_object_init_with_mcu
</UL>

<P><STRONG><a name="[562]"></a>at_parser_recv</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, at_parser.o(i.at_parser_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = at_parser_recv &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_getchar
</UL>
<BR>[Called By]<UL><LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_recv_read_param
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_recv_func
</UL>

<P><STRONG><a name="[548]"></a>at_parser_send</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, at_parser.o(i.at_parser_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = at_parser_send &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_write_block
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_unlock
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_sendto
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_send
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_connect
</UL>

<P><STRONG><a name="[568]"></a>at_parser_set_end_mark</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, at_parser.o(i.at_parser_set_end_mark))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = at_parser_set_end_mark &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_sendto
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_send
</UL>

<P><STRONG><a name="[569]"></a>at_parser_set_urc_table</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, at_parser.o(i.at_parser_set_urc_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = at_parser_set_urc_table &rArr; os_schedule_unlock &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_schedule_unlock
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_schedule_lock
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_slist_init
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_slist_add_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_init
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_init
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_at_init
</UL>

<P><STRONG><a name="[56b]"></a>at_parser_startup</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, at_parser.o(i.at_parser_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = at_parser_startup &rArr; os_task_startup &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_startup
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_object_init_with_mcu
</UL>

<P><STRONG><a name="[56e]"></a>at_resp_get_data_by_kw</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, at_resp.o(i.at_resp_get_data_by_kw))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = at_resp_get_data_by_kw &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_line_by_kw
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_get_stat
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_get_sta_cip
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_get_mode
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_get_ap_cip
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_ping
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_gethostbyname
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_ipaddr
</UL>

<P><STRONG><a name="[570]"></a>at_resp_get_data_by_line</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, at_resp.o(i.at_resp_get_data_by_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = at_resp_get_data_by_line &rArr; at_resp_get_line &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_line
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_scan_info
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_dnsserver
</UL>

<P><STRONG><a name="[571]"></a>at_resp_get_line</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, at_resp.o(i.at_resp_get_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = at_resp_get_line &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_firmware_version
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_data_by_line
</UL>

<P><STRONG><a name="[56f]"></a>at_resp_get_line_by_kw</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, at_resp.o(i.at_resp_get_line_by_kw))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = at_resp_get_line_by_kw &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_alloc
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_get_sta_mac
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_get_ap_mac
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_data_by_kw
</UL>

<P><STRONG><a name="[55c]"></a>at_snprintf</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, at_printf.o(i.at_snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = at_snprintf &rArr; _vsnprintf &rArr; _ntoa_long_long &rArr; _ntoa_format &rArr; _out_rev
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_init
</UL>

<P><STRONG><a name="[56d]"></a>at_vsnprintf</STRONG> (Thumb, 30 bytes, Stack size 40 bytes, at_printf.o(i.at_vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = at_vsnprintf &rArr; _vsnprintf &rArr; _ntoa_long_long &rArr; _ntoa_format &rArr; _out_rev
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_vasprintf
</UL>

<P><STRONG><a name="[a8]"></a>audio_es8388_receive</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, es8388.o(i.audio_es8388_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = audio_es8388_receive &rArr; os_device_read_nonblock &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_read_nonblock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es8388.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>audio_es8388_transmit</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, es8388.o(i.audio_es8388_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = audio_es8388_transmit &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_write_nonblock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es8388.o(.constdata)
</UL>
<P><STRONG><a name="[579]"></a>block_device_register</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, block_device.o(i.block_device_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = block_device_register &rArr; os_device_register &rArr; os_plug_in &rArr; os_sem_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_register
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msd_init
</UL>

<P><STRONG><a name="[50]"></a>bufchar</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mqttpacket.o(i.bufchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bufchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqttpacket.o(i.MQTTPacket_decodeBuf)
</UL>
<P><STRONG><a name="[57c]"></a>calc_mult_shift</STRONG> (Thumb, 152 bytes, Stack size 64 bytes, driver.o(i.calc_mult_shift))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = calc_mult_shift &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clocksource_register
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_register
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_post_init
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pwm_register
</UL>

<P><STRONG><a name="[57e]"></a>calloc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, mem_std.o(i.calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = calloc &rArr; os_calloc &rArr; os_memheap_alloc &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_get_sta_mac
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_get_ap_mac
</UL>

<P><STRONG><a name="[583]"></a>closedir</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, dirent.o(i.closedir))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = closedir &rArr; vfs_closedir &rArr; dp_free &rArr; dp_ref_dec &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_closedir
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_do_auto_complete_path
</UL>

<P><STRONG><a name="[584]"></a>closesocket</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, socket.o(i.closesocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = closesocket &rArr; mo_closesocket &rArr; mo_netconn_destroy &rArr; get_netconn_ops &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_get_default
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_closesocket
</UL>
<BR>[Called By]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_network_connect
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneos_disconnect
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_disconnect_tcp
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_connect_tcp
</UL>

<P><STRONG><a name="[589]"></a>connect</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, socket.o(i.connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = connect &rArr; mo_connect &rArr; mo_netconn_connect &rArr; get_netconn_ops &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_get_default
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_network_connect
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_connect_tcp
</UL>

<P><STRONG><a name="[58b]"></a>copy_line_to_ring</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, soft_dma.o(i.copy_line_to_ring))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = copy_line_to_ring &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_ring_to_ring
</UL>

<P><STRONG><a name="[521]"></a>copy_ring_to_line</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, soft_dma.o(i.copy_ring_to_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = copy_ring_to_line &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_rx
</UL>

<P><STRONG><a name="[58c]"></a>copy_ring_to_ring</STRONG> (Thumb, 356 bytes, Stack size 24 bytes, soft_dma.o(i.copy_ring_to_ring))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = copy_ring_to_ring &rArr; copy_line_to_ring &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_line_to_ring
</UL>
<BR>[Called By]<UL><LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_normal_updata_buffer
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_circular_updata_buffer
</UL>

<P><STRONG><a name="[58d]"></a>cortexm_systick_clocksource_init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, clocksource_cortexm.o(i.cortexm_systick_clocksource_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = cortexm_systick_clocksource_init &rArr; os_clocksource_register &rArr; os_device_register &rArr; os_plug_in &rArr; os_sem_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clocksource_register
</UL>
<BR>[Called By]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cortexm_systick_init
</UL>

<P><STRONG><a name="[57d]"></a>cortexm_systick_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, drv_common.o(i.cortexm_systick_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = cortexm_systick_init &rArr; cortexm_systick_clocksource_init &rArr; os_clocksource_register &rArr; os_device_register &rArr; os_plug_in &rArr; os_sem_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cortexm_systick_clocksource_init
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_post_init
</UL>

<P><STRONG><a name="[3dc]"></a>cycle</STRONG> (Thumb, 360 bytes, Stack size 80 bytes, mqttclient.o(i.cycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = cycle &rArr; keepalive &rArr; TimerInit &rArr; os_timer_create &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_ack
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_ack
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keepalive
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deliverMessage
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTCloseSession
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacket
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitfor
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTYield
</UL>

<P><STRONG><a name="[598]"></a>deliverMessage</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, mqttclient.o(i.deliverMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = deliverMessage &rArr; MQTTPacket_equals &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_equals
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isTopicMatched
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewMessageData
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[62e]"></a>disk_get_devid</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, diskio.o(i.disk_get_devid))
<BR><BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_disk
</UL>

<P><STRONG><a name="[60e]"></a>disk_initialize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[5ad]"></a>disk_ioctl</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = disk_ioctl &rArr; os_device_control &rArr; os_sem_wait &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_control
</UL>
<BR>[Called By]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[5ae]"></a>disk_read</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = disk_read &rArr; os_device_read_nonblock &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_read_nonblock
</UL>
<BR>[Called By]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[803]"></a>disk_set_devid</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, diskio.o(i.disk_set_devid))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_unmount
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_mount
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_mkfs
</UL>

<P><STRONG><a name="[62c]"></a>disk_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, diskio.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[5af]"></a>disk_write</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = disk_write &rArr; os_device_write_nonblock &rArr;  os_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_write_nonblock
</UL>
<BR>[Called By]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[5b5]"></a>dlog_backend_register</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, dlog.o(i.dlog_backend_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = dlog_backend_register &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_add_tail
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_unlock
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_console_backend_init
</UL>

<P><STRONG><a name="[5bd]"></a>dlog_flush</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dlog.o(i.dlog_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = dlog_flush &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_unlock
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_lock
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_async_output
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_dlog_flush
</UL>

<P><STRONG><a name="[5ce]"></a>dlog_global_lvl_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dlog.o(i.dlog_global_lvl_get))
<BR><BR>[Called By]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_voutput
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_dlog_glvl_ctrl
</UL>

<P><STRONG><a name="[5c5]"></a>dlog_global_lvl_set</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, dlog.o(i.dlog_global_lvl_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = dlog_global_lvl_set &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_dlog_glvl_ctrl
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_init
</UL>

<P><STRONG><a name="[146]"></a>dlog_init</STRONG> (Thumb, 334 bytes, Stack size 16 bytes, dlog.o(i.dlog_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = dlog_init &rArr; os_sem_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_init
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_init
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_deinit
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_global_lvl_set
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_init
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_startup
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_create
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_lock_init
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbb_destroy
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbb_create
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_console_backend_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dlog.o(.init_call.3.1)
</UL>
<P><STRONG><a name="[324]"></a>dlog_output</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, dlog.o(i.dlog_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_voutput
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sai_write
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sai_read
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sai_control
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_i2c_transfer
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_audio_recorder_init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_audio_player_init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_es8388_recorder_start
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_es8388_recorder_config
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_es8388_player_start
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_es8388_player_config
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_audio_recorder_init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_audio_recorder_deinit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_audio_player_write
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_audio_player_init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_audio_player_deinit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_upload_data_task_func
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_upload_cycle_start
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_start
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;working_dir_set
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;working_dir_get
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vfs_conjunction_path
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;working_dir_init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_init
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vfs_mkfs_dev_ref
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vfs_mkfs_dev_deref
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vfs_fs_ops_get
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_fdshow
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_to_fp
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_ref_inc
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_ref_dec
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_alloc
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_ref_inc
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_ref_dec
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_check_valid
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_alloc
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_register
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_unlink
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_rename
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_mount
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_mkfs
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v_fat_deinit
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mount_point_find_and_ref
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mount_point_deref
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mkfs
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_part_init
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_i2c_bus_device_find
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_write
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_read
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_i2c_bus_probe
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeb
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_waitack
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_bytes
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_address
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_ack_or_nack
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_recv_bytes
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readb
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_transfer
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_send_address
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_pin_init
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_write_half_word
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_write_data
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_write_cmd
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_rx_timer_callback
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_rx_sync
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_rx_repeat1
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_rx_repeat0
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_rx_idle
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_rx_data
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_rx_addr
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_recv_init
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmAEventCallback
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_rtc_set_time_stamp
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_rtc_init
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_rtc_get_timestamp
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rtc_control
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pwm_set_pulse
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pwm_enabled
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_iwdt_probe
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_iwdt_control
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_iwdg_refresh
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_flash_write
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_flash_read
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_flash_erase
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dectect_task_create
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_probe
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixfer
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_sai_set_frq
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_sai_set_channel
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_sai_probe
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_sai_dma_tx_enable
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_sai_dma_transmit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_sai_dma_rx_enable
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_object_get_default
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_sta_disconnected_func
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_sta_connected_func
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_ipv6_func
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_ip_func
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_dist_sta_ip_func
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_connect_func
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_wifi_netconn_data_recv_notice
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_recv_func
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_close_func
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_alloc
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_netconn_by_id
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_wifi_connect_ap
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_object_init
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_get_firmware_version
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_start_ap
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_set_mode
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_set_ipdinofo
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_scan_info
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_get_stat
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_get_sta_cip
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_get_ap_cip
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_set_dnsserver
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_ping
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_sendto
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_send
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_gethostbyname
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_destroy
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_create
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_connect
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_bind
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_ipaddr
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_dnsserver
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_esp8266_create
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_auto_create
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_ready_func
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_busy_s_func
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_busy_p_func
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_at_init
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_line
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_set_end_mark
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_send
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_recv
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_init
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_cmd_valist
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_vasprintf
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_resp_handle
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_readline
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_device_open
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wifi_ops
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_socket
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_setsockopt
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_sendto
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_select
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_recvfrom
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_gethostbyname
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_connect
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_closesocket
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_udp_sendto
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_tcp_send
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_recvfrom_udp
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_recv_tcp
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_tryget_socket
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_get_socket
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_event_callback
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_object_init_with_mcu
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_sendto
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_send
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_recvfrom
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_gethostbyname
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_destroy
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_create
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_connect
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_netconn_ops
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_general_ops
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTNetworkInit
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_publish
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_register
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_link
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_event_callback
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_network_connect
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneos_disconnect
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_client_subscribe
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_client_publish
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_client_connect
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_message_queue_init
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_sensor_register
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_mpu6xxx_init
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mpu6xxx_set_range
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mpu6xxx_set_power
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mpu6xxx_acc_set_mode
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_init
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sensor_irq_init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sensor_control
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_read_ps_data
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_read_ir_data
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_read_ambient_light
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_ap3216c_proximity_init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_ap3216c_light_init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_ap3216c_ir_init
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_set_param
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_init
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_get_param
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_aht10_temp_init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_aht10_humi_init
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aht10_temp_fetch_data
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aht10_init
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aht10_humi_fetch_data
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_write_tcp
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_read_tcp
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_disconnect_tcp
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_connect_tcp
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_net_write
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_net_read
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_net_disconnect
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_net_connect
</UL>

<P><STRONG><a name="[5c9]"></a>dlog_voutput</STRONG> (Thumb, 288 bytes, Stack size 48 bytes, dlog.o(i.dlog_voutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_global_lvl_get
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_unlock
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_tag_lvl_filter_get
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_lock
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_get_log_buf
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_formater
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_do_output
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
</UL>

<P><STRONG><a name="[5cf]"></a>do_closedir</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, vfs.o(i.do_closedir))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = do_closedir &rArr; vfs_mount_point_deref &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mount_point_deref
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mkdir
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_closedir
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_chdir
</UL>

<P><STRONG><a name="[5d1]"></a>do_closefile</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, vfs.o(i.do_closefile))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = do_closefile &rArr; vfs_mount_point_deref &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mount_point_deref
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_close
</UL>

<P><STRONG><a name="[5d2]"></a>do_opendir</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, vfs.o(i.do_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = do_opendir &rArr; vfs_mount_point_find_and_ref &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mount_point_find_and_ref
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mount_point_deref
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_create_rel_mnt_path
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_opendir
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mkdir
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_chdir
</UL>

<P><STRONG><a name="[5d5]"></a>do_openfile</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, vfs.o(i.do_openfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = do_openfile &rArr; vfs_mount_point_find_and_ref &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mount_point_find_and_ref
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mount_point_deref
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_create_rel_mnt_path
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_open
</UL>

<P><STRONG><a name="[80a]"></a>do_readdir</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, vfs.o(i.do_readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = do_readdir
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_readdir
</UL>

<P><STRONG><a name="[809]"></a>do_readfile</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, vfs.o(i.do_readfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = do_readfile
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_read
</UL>

<P><STRONG><a name="[5d6]"></a>do_rename</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, vfs.o(i.do_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = do_rename &rArr; vfs_mount_point_find_and_ref &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mount_point_find_and_ref
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mount_point_deref
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_get_rel_mnt_path
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_rename
</UL>

<P><STRONG><a name="[5d8]"></a>do_stat</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, vfs.o(i.do_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = do_stat &rArr; vfs_mount_point_find_and_ref &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mount_point_find_and_ref
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mount_point_deref
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_get_rel_mnt_path
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_statfs
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_stat
</UL>

<P><STRONG><a name="[5d9]"></a>do_statfs</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, vfs.o(i.do_statfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = do_statfs &rArr; vfs_mount_point_find_and_ref &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mount_point_find_and_ref
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mount_point_deref
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_statfs
</UL>

<P><STRONG><a name="[5da]"></a>do_unlink</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, vfs.o(i.do_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = do_unlink &rArr; vfs_mount_point_find_and_ref &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mount_point_find_and_ref
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mount_point_deref
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_get_rel_mnt_path
</UL>
<BR>[Called By]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_unlink
</UL>

<P><STRONG><a name="[80b]"></a>do_writefile</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, vfs.o(i.do_writefile))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = do_writefile
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_write
</UL>

<P><STRONG><a name="[5db]"></a>dp_alloc</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, vfs_fd.o(i.dp_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = dp_alloc &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_malloc
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_opendir
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mkdir
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_chdir
</UL>

<P><STRONG><a name="[5dc]"></a>dp_check_valid</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, vfs_fd.o(i.dp_check_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = dp_check_valid &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_readdir
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_closedir
</UL>

<P><STRONG><a name="[5dd]"></a>dp_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, vfs_fd.o(i.dp_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = dp_free &rArr; dp_ref_dec &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_ref_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_opendir
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mkdir
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_closedir
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_chdir
</UL>

<P><STRONG><a name="[5de]"></a>dp_ref_dec</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, vfs_fd.o(i.dp_ref_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = dp_ref_dec &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_free
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_readdir
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_opendir
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mkdir
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_closedir
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_chdir
</UL>

<P><STRONG><a name="[5df]"></a>dp_ref_inc</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, vfs_fd.o(i.dp_ref_inc))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = dp_ref_inc &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_readdir
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_opendir
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mkdir
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_closedir
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_chdir
</UL>

<P><STRONG><a name="[43d]"></a>driver_match_devices</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, bus.o(i.driver_match_devices))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = driver_match_devices
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__driver_soft_i2c_bus_driver_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__driver_stm32_flash_driver_init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__driver_stm32_rng_driver_init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__driver_stm32_crc_driver_init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__driver_stm32_can_driver_init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__driver_stm32_rtc_driver_init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__driver_stm32_qspi_driver_init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__driver_stm32_lptim_driver_init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__driver_stm32_iwdt_driver_init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__driver_stm32_tim_driver_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__driver_stm32_usbd_driver_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__driver_stm32_usart_early_driver_init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__driver_stm32_usart_driver_init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__driver_stm32_spi_driver_init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__driver_stm32_sai_driver_init
</UL>

<P><STRONG><a name="[574]"></a>es8388_deinit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, es8388_ll.o(i.es8388_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = es8388_deinit &rArr; os_device_close &rArr; os_sem_wait &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es8388_pa_power
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_close
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_es8388_recorder_deinit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_es8388_player_deinit
</UL>

<P><STRONG><a name="[575]"></a>es8388_init</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, es8388_ll.o(i.es8388_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = es8388_init &rArr; es8388_set_adc_dac_volume &rArr; reg_write &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_open
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es8388_pa_power
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_write
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es8388_set_adc_dac_volume
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_mode
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_msleep
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_es8388_recorder_init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_es8388_player_init
</UL>

<P><STRONG><a name="[5e0]"></a>es8388_pa_power</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, es8388_ll.o(i.es8388_pa_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = es8388_pa_power &rArr; os_pin_write &rArr; raw_os_pin_write &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es8388_init
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es8388_deinit
</UL>

<P><STRONG><a name="[5e4]"></a>es8388_set_voice_mute</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, es8388_ll.o(i.es8388_set_voice_mute))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = es8388_set_voice_mute &rArr; reg_write &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_write
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_read
</UL>
<BR>[Called By]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es8388_stop
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es8388_start
</UL>

<P><STRONG><a name="[576]"></a>es8388_start</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, es8388_ll.o(i.es8388_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = es8388_start &rArr; es8388_set_voice_mute &rArr; reg_write &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es8388_set_voice_mute
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_write
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_read
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_es8388_recorder_start
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_es8388_player_start
</UL>

<P><STRONG><a name="[577]"></a>es8388_stop</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, es8388_ll.o(i.es8388_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = es8388_stop &rArr; es8388_set_voice_mute &rArr; reg_write &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es8388_set_voice_mute
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_write
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_es8388_recorder_stop
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_es8388_player_stop
</UL>

<P><STRONG><a name="[573]"></a>es8388_volume_set</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, es8388_ll.o(i.es8388_volume_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = es8388_volume_set &rArr; reg_write &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_write
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_es8388_player_config
</UL>

<P><STRONG><a name="[11e]"></a>esp8266_at_test</STRONG> (Thumb, 56 bytes, Stack size 104 bytes, esp8266_general.o(i.esp8266_at_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = esp8266_at_test &rArr; at_parser_exec_cmd &rArr; at_parser_exec_cmd_valist &rArr; at_parser_vasprintfln &rArr; at_parser_vasprintf &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_from_ms
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_cmd
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[168]"></a>esp8266_auto_create</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, esp8266.o(i.esp8266_auto_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120 + Unknown Stack Size
<LI>Call Chain = esp8266_auto_create &rArr; module_esp8266_create &rArr; esp8266_at_init &rArr; at_parser_connect &rArr; at_parser_send &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_control
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_find
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_wifi_connect_ap
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_esp8266_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.init_call.5.2)
</UL>
<P><STRONG><a name="[124]"></a>esp8266_get_dnsserver</STRONG> (Thumb, 162 bytes, Stack size 312 bytes, esp8266_ifconfig.o(i.esp8266_get_dnsserver))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = esp8266_get_dnsserver &rArr; at_parser_exec_cmd &rArr; at_parser_exec_cmd_valist &rArr; at_parser_vasprintfln &rArr; at_parser_vasprintf &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_from_ms
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_data_by_line
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_cmd
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[11f]"></a>esp8266_get_firmware_version</STRONG> (Thumb, 190 bytes, Stack size 320 bytes, esp8266_general.o(i.esp8266_get_firmware_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = esp8266_get_firmware_version &rArr; at_parser_exec_cmd &rArr; at_parser_exec_cmd_valist &rArr; at_parser_vasprintfln &rArr; at_parser_vasprintf &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_from_ms
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_get_firmware_version_free
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_line
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_cmd
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[122]"></a>esp8266_get_ipaddr</STRONG> (Thumb, 194 bytes, Stack size 336 bytes, esp8266_ifconfig.o(i.esp8266_get_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = esp8266_get_ipaddr &rArr; at_parser_exec_cmd &rArr; at_parser_exec_cmd_valist &rArr; at_parser_vasprintfln &rArr; at_parser_vasprintf &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_data_by_kw
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_cmd
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_ifconfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[121]"></a>esp8266_ifconfig</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, esp8266_ifconfig.o(i.esp8266_ifconfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = esp8266_ifconfig &rArr; esp8266_get_ipaddr &rArr; at_parser_exec_cmd &rArr; at_parser_exec_cmd_valist &rArr; at_parser_vasprintfln &rArr; at_parser_vasprintf &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_get_stat
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_get_mode
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_ipaddr
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[128]"></a>esp8266_netconn_bind</STRONG> (Thumb, 276 bytes, Stack size 176 bytes, esp8266_netconn.o(i.esp8266_netconn_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = esp8266_netconn_bind &rArr; at_parser_exec_cmd &rArr; at_parser_exec_cmd_valist &rArr; at_parser_vasprintfln &rArr; at_parser_vasprintf &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4addr_ntoa
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_cmd
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[127]"></a>esp8266_netconn_connect</STRONG> (Thumb, 256 bytes, Stack size 176 bytes, esp8266_netconn.o(i.esp8266_netconn_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = esp8266_netconn_connect &rArr; at_parser_exec_cmd &rArr; at_parser_exec_cmd_valist &rArr; at_parser_vasprintfln &rArr; at_parser_vasprintf &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4addr_ntoa
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_cmd
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[125]"></a>esp8266_netconn_create</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, esp8266_netconn.o(i.esp8266_netconn_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = esp8266_netconn_create &rArr; esp8266_netconn_alloc &rArr; at_parser_exec_cmd &rArr; at_parser_exec_cmd_valist &rArr; at_parser_vasprintfln &rArr; at_parser_vasprintf &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_create
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_unlock
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_alloc
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[126]"></a>esp8266_netconn_destroy</STRONG> (Thumb, 276 bytes, Stack size 136 bytes, esp8266_netconn.o(i.esp8266_netconn_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = esp8266_netconn_destroy &rArr; at_parser_exec_cmd &rArr; at_parser_exec_cmd_valist &rArr; at_parser_vasprintfln &rArr; at_parser_vasprintf &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4addr_aton
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_mq_destroy
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_unlock
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_lock
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_cmd
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[12c]"></a>esp8266_netconn_get_info</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, esp8266_netconn.o(i.esp8266_netconn_get_info))
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[12b]"></a>esp8266_netconn_gethostbyname</STRONG> (Thumb, 310 bytes, Stack size 224 bytes, esp8266_netconn.o(i.esp8266_netconn_gethostbyname))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = esp8266_netconn_gethostbyname &rArr; at_parser_exec_cmd &rArr; at_parser_exec_cmd_valist &rArr; at_parser_vasprintfln &rArr; at_parser_vasprintf &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4addr_aton
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_data_by_kw
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_cmd
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[5f4]"></a>esp8266_netconn_init</STRONG> (Thumb, 174 bytes, Stack size 112 bytes, esp8266_netconn.o(i.esp8266_netconn_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = esp8266_netconn_init &rArr; at_parser_exec_cmd &rArr; at_parser_exec_cmd_valist &rArr; at_parser_vasprintfln &rArr; at_parser_vasprintf &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_from_ms
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_data_by_kw
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_set_urc_table
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_cmd
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_esp8266_create
</UL>

<P><STRONG><a name="[12a]"></a>esp8266_netconn_send</STRONG> (Thumb, 480 bytes, Stack size 168 bytes, esp8266_netconn.o(i.esp8266_netconn_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = esp8266_netconn_send &rArr; at_parser_exec_cmd &rArr; at_parser_exec_cmd_valist &rArr; at_parser_vasprintfln &rArr; at_parser_vasprintf &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_msleep
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_recv
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_set_end_mark
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_send
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_unlock
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_lock
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_cmd
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[129]"></a>esp8266_netconn_sendto</STRONG> (Thumb, 454 bytes, Stack size 192 bytes, esp8266_netconn.o(i.esp8266_netconn_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = esp8266_netconn_sendto &rArr; at_parser_exec_cmd &rArr; at_parser_exec_cmd_valist &rArr; at_parser_vasprintfln &rArr; at_parser_vasprintf &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_msleep
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_recv
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4addr_ntoa
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_set_end_mark
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_send
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_unlock
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_lock
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_cmd
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[120]"></a>esp8266_ping</STRONG> (Thumb, 276 bytes, Stack size 216 bytes, esp8266_ping.o(i.esp8266_ping))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = esp8266_ping &rArr; at_parser_exec_cmd &rArr; at_parser_exec_cmd_valist &rArr; at_parser_vasprintfln &rArr; at_parser_vasprintf &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_from_ms
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4addr_aton
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_data_by_kw
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_cmd
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[123]"></a>esp8266_set_dnsserver</STRONG> (Thumb, 170 bytes, Stack size 136 bytes, esp8266_ifconfig.o(i.esp8266_set_dnsserver))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = esp8266_set_dnsserver &rArr; at_parser_exec_cmd &rArr; at_parser_exec_cmd_valist &rArr; at_parser_vasprintfln &rArr; at_parser_vasprintf &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_from_ms
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_cmd
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[136]"></a>esp8266_wifi_connect_ap</STRONG> (Thumb, 114 bytes, Stack size 192 bytes, esp8266_wifi.o(i.esp8266_wifi_connect_ap))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = esp8266_wifi_connect_ap &rArr; at_parser_exec_cmd &rArr; at_parser_exec_cmd_valist &rArr; at_parser_vasprintfln &rArr; at_parser_vasprintf &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_cmd
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[137]"></a>esp8266_wifi_disconnect_ap</STRONG> (Thumb, 56 bytes, Stack size 104 bytes, esp8266_wifi.o(i.esp8266_wifi_disconnect_ap))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = esp8266_wifi_disconnect_ap &rArr; at_parser_exec_cmd &rArr; at_parser_exec_cmd_valist &rArr; at_parser_vasprintfln &rArr; at_parser_vasprintf &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_from_ms
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_cmd
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[132]"></a>esp8266_wifi_get_ap_cip</STRONG> (Thumb, 334 bytes, Stack size 376 bytes, esp8266_wifi.o(i.esp8266_wifi_get_ap_cip))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = esp8266_wifi_get_ap_cip &rArr; at_parser_exec_cmd &rArr; at_parser_exec_cmd_valist &rArr; at_parser_vasprintfln &rArr; at_parser_vasprintf &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ipaddr_addr
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_data_by_kw
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_cmd
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[134]"></a>esp8266_wifi_get_ap_mac</STRONG> (Thumb, 160 bytes, Stack size 72 bytes, esp8266_wifi.o(i.esp8266_wifi_get_ap_mac))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = esp8266_wifi_get_ap_mac &rArr; at_parser_exec_cmd &rArr; at_parser_exec_cmd_valist &rArr; at_parser_vasprintfln &rArr; at_parser_vasprintf &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_to_uint
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_line_by_kw
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_cmd
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[12e]"></a>esp8266_wifi_get_mode</STRONG> (Thumb, 126 bytes, Stack size 120 bytes, esp8266_wifi.o(i.esp8266_wifi_get_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = esp8266_wifi_get_mode &rArr; at_parser_exec_cmd &rArr; at_parser_exec_cmd_valist &rArr; at_parser_vasprintfln &rArr; at_parser_vasprintf &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_from_ms
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_data_by_kw
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_cmd
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_ifconfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[130]"></a>esp8266_wifi_get_sta_cip</STRONG> (Thumb, 334 bytes, Stack size 352 bytes, esp8266_wifi.o(i.esp8266_wifi_get_sta_cip))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = esp8266_wifi_get_sta_cip &rArr; at_parser_exec_cmd &rArr; at_parser_exec_cmd_valist &rArr; at_parser_vasprintfln &rArr; at_parser_vasprintf &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4addr_aton
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_data_by_kw
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_cmd
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[133]"></a>esp8266_wifi_get_sta_mac</STRONG> (Thumb, 160 bytes, Stack size 80 bytes, esp8266_wifi.o(i.esp8266_wifi_get_sta_mac))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = esp8266_wifi_get_sta_mac &rArr; at_parser_exec_cmd &rArr; at_parser_exec_cmd_valist &rArr; at_parser_vasprintfln &rArr; at_parser_vasprintf &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_to_uint
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_line_by_kw
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_cmd
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[12f]"></a>esp8266_wifi_get_stat</STRONG> (Thumb, 220 bytes, Stack size 64 bytes, esp8266_wifi.o(i.esp8266_wifi_get_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = esp8266_wifi_get_stat &rArr; at_parser_exec_cmd &rArr; at_parser_exec_cmd_valist &rArr; at_parser_vasprintfln &rArr; at_parser_vasprintf &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_data_by_kw
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_cmd
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_ifconfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[5f8]"></a>esp8266_wifi_init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, esp8266_wifi.o(i.esp8266_wifi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = esp8266_wifi_init &rArr; at_parser_set_urc_table &rArr; os_schedule_unlock &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_set_urc_table
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_esp8266_create
</UL>

<P><STRONG><a name="[135]"></a>esp8266_wifi_scan_info</STRONG> (Thumb, 398 bytes, Stack size 96 bytes, esp8266_wifi.o(i.esp8266_wifi_scan_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = esp8266_wifi_scan_info &rArr; at_parser_exec_cmd &rArr; at_parser_exec_cmd_valist &rArr; at_parser_vasprintfln &rArr; at_parser_vasprintf &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_msleep
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_data_by_line
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_cmd
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[131]"></a>esp8266_wifi_set_ap_cip</STRONG> (Thumb, 76 bytes, Stack size 312 bytes, esp8266_wifi.o(i.esp8266_wifi_set_ap_cip))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = esp8266_wifi_set_ap_cip &rArr; at_parser_exec_cmd &rArr; at_parser_exec_cmd_valist &rArr; at_parser_vasprintfln &rArr; at_parser_vasprintf &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_cmd
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[5f9]"></a>esp8266_wifi_set_ipdinofo</STRONG> (Thumb, 128 bytes, Stack size 128 bytes, esp8266_wifi.o(i.esp8266_wifi_set_ipdinofo))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = esp8266_wifi_set_ipdinofo &rArr; at_parser_exec_cmd &rArr; at_parser_exec_cmd_valist &rArr; at_parser_vasprintfln &rArr; at_parser_vasprintf &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_from_ms
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_cmd
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_esp8266_create
</UL>

<P><STRONG><a name="[12d]"></a>esp8266_wifi_set_mode</STRONG> (Thumb, 104 bytes, Stack size 120 bytes, esp8266_wifi.o(i.esp8266_wifi_set_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = esp8266_wifi_set_mode &rArr; at_parser_exec_cmd &rArr; at_parser_exec_cmd_valist &rArr; at_parser_vasprintfln &rArr; at_parser_vasprintf &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_cmd
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_esp8266_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[138]"></a>esp8266_wifi_start_ap</STRONG> (Thumb, 108 bytes, Stack size 216 bytes, esp8266_wifi.o(i.esp8266_wifi_start_ap))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = esp8266_wifi_start_ap &rArr; at_parser_exec_cmd &rArr; at_parser_exec_cmd_valist &rArr; at_parser_vasprintfln &rArr; at_parser_vasprintf &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_cmd
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[139]"></a>esp8266_wifi_stop_ap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, esp8266_wifi.o(i.esp8266_wifi_stop_ap))
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[5fa]"></a>f_close</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; disk_ioctl &rArr; os_device_control &rArr; os_sem_wait &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_close
</UL>

<P><STRONG><a name="[5fe]"></a>f_closedir</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ff.o(i.f_closedir))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = f_closedir &rArr; unlock_fs &rArr; ff_rel_grant &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_closedir
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_rename_check
</UL>

<P><STRONG><a name="[5ff]"></a>f_getfree</STRONG> (Thumb, 262 bytes, Stack size 72 bytes, ff.o(i.f_getfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = f_getfree &rArr; find_volume &rArr; disk_ioctl &rArr; os_device_control &rArr; os_sem_wait &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_statfs
</UL>

<P><STRONG><a name="[601]"></a>f_lseek</STRONG> (Thumb, 870 bytes, Stack size 72 bytes, ff.o(i.f_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = f_lseek &rArr; unlock_fs &rArr; ff_rel_grant &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_open
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_lseek
</UL>

<P><STRONG><a name="[603]"></a>f_mkdir</STRONG> (Thumb, 406 bytes, Stack size 96 bytes, ff.o(i.f_mkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; os_device_read_nonblock &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_opendir
</UL>

<P><STRONG><a name="[60c]"></a>f_mkfs</STRONG> (Thumb, 1702 bytes, Stack size 136 bytes, ff.o(i.f_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = f_mkfs &rArr; disk_ioctl &rArr; os_device_control &rArr; os_sem_wait &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_mkfs
</UL>

<P><STRONG><a name="[610]"></a>f_mount</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = f_mount &rArr; find_volume &rArr; disk_ioctl &rArr; os_device_control &rArr; os_sem_wait &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_del_syncobj
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_unmount
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_mount
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_mkfs
</UL>

<P><STRONG><a name="[613]"></a>f_open</STRONG> (Thumb, 564 bytes, Stack size 112 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; os_device_read_nonblock &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_open
</UL>

<P><STRONG><a name="[615]"></a>f_opendir</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, ff.o(i.f_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; os_device_read_nonblock &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_opendir
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_rename_check
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_mount
</UL>

<P><STRONG><a name="[616]"></a>f_read</STRONG> (Thumb, 564 bytes, Stack size 72 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = f_read &rArr; unlock_fs &rArr; ff_rel_grant &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_read
</UL>

<P><STRONG><a name="[617]"></a>f_readdir</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ff.o(i.f_readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = f_readdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; os_device_read_nonblock &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_readdir
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_rename_check
</UL>

<P><STRONG><a name="[619]"></a>f_rename</STRONG> (Thumb, 322 bytes, Stack size 160 bytes, ff.o(i.f_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = f_rename &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; os_device_read_nonblock &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_rename
</UL>

<P><STRONG><a name="[61a]"></a>f_seekdir</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ff.o(i.f_seekdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = f_seekdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; os_device_read_nonblock &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_seekdir
</UL>

<P><STRONG><a name="[61b]"></a>f_stat</STRONG> (Thumb, 104 bytes, Stack size 72 bytes, ff.o(i.f_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; os_device_read_nonblock &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_stat
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_rename_check
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_open
</UL>

<P><STRONG><a name="[5fb]"></a>f_sync</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = f_sync &rArr; sync_fs &rArr; disk_ioctl &rArr; os_device_control &rArr; os_sem_wait &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_sync
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[61c]"></a>f_unlink</STRONG> (Thumb, 212 bytes, Stack size 120 bytes, ff.o(i.f_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; os_device_read_nonblock &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_unlink
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_rename_check
</UL>

<P><STRONG><a name="[61d]"></a>f_write</STRONG> (Thumb, 632 bytes, Stack size 72 bytes, ff.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = f_write &rArr; unlock_fs &rArr; ff_rel_grant &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_write
</UL>

<P><STRONG><a name="[61e]"></a>fal_flash_find</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fal.o(i.fal_flash_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fal_flash_find
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_part_init
</UL>

<P><STRONG><a name="[61f]"></a>fal_flash_register</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, fal.o(i.fal_flash_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fal_flash_register
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sflash_init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_flash_probe
</UL>

<P><STRONG><a name="[15d]"></a>fal_part_init</STRONG> (Thumb, 324 bytes, Stack size 40 bytes, fal_part.o(i.fal_part_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = fal_part_init &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_show_part_table
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fal_part.o(.init_call.4.3)
</UL>
<P><STRONG><a name="[804]"></a>fat_get_vol</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ff.o(i.fat_get_vol))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_opendir
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_unlink
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_stat
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_rename
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_open
</UL>

<P><STRONG><a name="[166]"></a>fat_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, vfs_fatfs.o(i.fat_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = fat_init &rArr; vfs_register &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vfs_fatfs.o(.init_call.5.2)
</UL>
<P><STRONG><a name="[622]"></a>fd_alloc</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, vfs_fd.o(i.fd_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = fd_alloc &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_open
</UL>

<P><STRONG><a name="[623]"></a>fd_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, vfs_fd.o(i.fd_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = fd_free &rArr; fd_ref_dec &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_ref_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_open
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_close
</UL>

<P><STRONG><a name="[624]"></a>fd_ref_dec</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, vfs_fd.o(i.fd_ref_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = fd_ref_dec &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_free
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_write
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_read
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_open
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_close
</UL>

<P><STRONG><a name="[625]"></a>fd_ref_inc</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, vfs_fd.o(i.fd_ref_inc))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = fd_ref_inc &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_write
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_read
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_open
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_close
</UL>

<P><STRONG><a name="[626]"></a>fd_table_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, vfs_fd.o(i.fd_table_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fd_table_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_init
</UL>

<P><STRONG><a name="[627]"></a>fd_to_fp</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, vfs_fd.o(i.fd_to_fp))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = fd_to_fp &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_write
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_read
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_open
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_close
</UL>

<P><STRONG><a name="[594]"></a>ff_convert</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, unicode.o(i.ff_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[612]"></a>ff_cre_syncobj</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, syscall.o(i.ff_cre_syncobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = ff_cre_syncobj &rArr; os_mutex_create &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_snprintf
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[611]"></a>ff_del_syncobj</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, syscall.o(i.ff_del_syncobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ff_del_syncobj &rArr; os_mutex_destroy &rArr; _k_mutex_deinit &rArr; os_spin_unlock &rArr; os_schedule_unlock &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[604]"></a>ff_memalloc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, syscall.o(i.ff_memalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ff_memalloc &rArr; os_malloc &rArr; os_memheap_alloc &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[60b]"></a>ff_memfree</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, syscall.o(i.ff_memfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ff_memfree &rArr; os_free &rArr; os_memheap_free &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
</UL>
<BR>[Called By]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[629]"></a>ff_rel_grant</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, syscall.o(i.ff_rel_grant))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = ff_rel_grant &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
</UL>

<P><STRONG><a name="[62a]"></a>ff_req_grant</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, syscall.o(i.ff_req_grant))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ff_req_grant &rArr; os_mutex_lock &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
</UL>

<P><STRONG><a name="[588]"></a>ff_wtoupper</STRONG> (Thumb, 156 bytes, Stack size 12 bytes, unicode.o(i.ff_wtoupper))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[5f6]"></a>free</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mem_std.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = free &rArr; os_free &rArr; os_memheap_free &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
</UL>
<BR>[Called By]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_wifi_netconn_data_recv_notice
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_get_sta_mac
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_get_ap_mac
</UL>

<P><STRONG><a name="[43f]"></a>frexp</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, frexp.o(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = frexp &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[7ac]"></a>ft</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, hmac_sha1.o(i.ft))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ft
</UL>
<BR>[Called By]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1
</UL>

<P><STRONG><a name="[606]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, syscall.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[632]"></a>getcwd</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, getcwd.o(i.getcwd))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = getcwd &rArr; vfs_getcwd &rArr; working_dir_get &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_getcwd
</UL>
<BR>[Called By]<UL><LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_do_auto_complete_path
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_get_prompt
</UL>

<P><STRONG><a name="[634]"></a>gethostbyname</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, socket.o(i.gethostbyname))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = gethostbyname &rArr; mo_gethostbyname &rArr; mo_netconn_gethostbyname &rArr; get_netconn_ops &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_get_default
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_gethostbyname
</UL>
<BR>[Called By]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_network_connect
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_connect_tcp
</UL>

<P><STRONG><a name="[636]"></a>hardware_init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, bsp.o(i.hardware_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = hardware_init &rArr; SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_QUADSPI_Init
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_OTG_FS_PCD_Init
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM17_Init
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM15_Init
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI3_Init
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SAI1_Init
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RNG_Init
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPTIM1_Init
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_board_init
</UL>

<P><STRONG><a name="[637]"></a>hmac_sha1</STRONG> (Thumb, 330 bytes, Stack size 4584 bytes, hmac_sha1.o(i.hmac_sha1))
<BR><BR>[Stack]<UL><LI>Max Depth = 5012<LI>Call Chain = hmac_sha1 &rArr; sha1 &rArr; rotl
</UL>
<BR>[Calls]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_authorization
</UL>

<P><STRONG><a name="[479]"></a>infrared_send</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, infrared.o(i.infrared_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = infrared_send &rArr; irk_on_us &rArr; os_pin_write &rArr; raw_os_pin_write &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irk_on_us
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irk_off_us
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_infrared_write
</UL>

<P><STRONG><a name="[656]"></a>infrared_send_ac</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, infrared.o(i.infrared_send_ac))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = infrared_send_ac &rArr; os_device_open_s &rArr; os_sem_wait &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_open_s
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irk_on_us
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irk_off_us
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_upload_data_task_func
</UL>

<P><STRONG><a name="[7ad]"></a>k</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hmac_sha1.o(i.k))
<BR><BR>[Called By]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1
</UL>

<P><STRONG><a name="[4b9]"></a>k_block_task</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, os_block.o(i.k_block_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = k_block_task &rArr; k_tickq_put
</UL>
<BR>[Calls]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tickq_put
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_readyq_remove
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_blockq_insert
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_add_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mp_alloc
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_wait
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mb_send
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mb_recv
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_recv
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_recursive_lock
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_recv
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mq_send
</UL>

<P><STRONG><a name="[65d]"></a>k_blockq_insert</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, os_block.o(i.k_blockq_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = k_blockq_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_add_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_block_task
</UL>

<P><STRONG><a name="[4c2]"></a>k_cancle_all_blocked_task</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, os_block.o(i.k_cancle_all_blocked_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = k_cancle_all_blocked_task &rArr; k_unblock_task &rArr; k_readyq_put
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_unblock_task
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mp_destroy
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_deinit
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_deinit
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mutex_deinit
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_destroy
</UL>

<P><STRONG><a name="[15]"></a>k_firstfit_mem_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, os_mem_firstfit.o(i.k_firstfit_mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = k_firstfit_mem_init &rArr; _k_firstfit_mem_init &rArr; os_sem_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_memory.o(.data)
</UL>
<P><STRONG><a name="[7a9]"></a>k_get_blocked_task</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, os_block.o(i.k_get_blocked_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = k_get_blocked_task
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_mempool_info
</UL>

<P><STRONG><a name="[4cf]"></a>k_idle_task_init</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, os_idle.o(i.k_idle_task_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = k_idle_task_init &rArr; os_task_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_startup
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_init
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_startup
</UL>

<P><STRONG><a name="[660]"></a>k_iter_show_blocked_task</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, os_block.o(i.k_iter_show_blocked_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = k_iter_show_blocked_task &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mb_show
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_show
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_show
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_show
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_show
</UL>

<P><STRONG><a name="[4b7]"></a>k_kernel_enter_check</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, os_kernel_lock.o(i.k_kernel_enter_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = k_kernel_enter_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_fault_active
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_num
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mp_free
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mp_destroy
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mp_alloc
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_wait
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_post
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_schedule_locked
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_destroy
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_startup
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_deinit
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_schedule_unlock
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_schedule_lock
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_errno
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_increase
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mb_send
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mb_recv
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mb_show
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_show
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_send
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_recv
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_deinit
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_show
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_recursive_unlock
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_recursive_lock
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mutex_deinit
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_show
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_recv
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_destroy
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mq_send
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_mempool_info
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_timer_info
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_set_timeout_ticks
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_is_active
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_destroy
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_create
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_task_entry
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_tsleep
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_show
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_task_exit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_recycle_task_entry
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_show
</UL>

<P><STRONG><a name="[4b8]"></a>k_kernel_exit_check</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, os_kernel_lock.o(i.k_kernel_exit_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_fault_active
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_num
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mp_free
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mp_destroy
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mp_alloc
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_wait
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_post
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_schedule_locked
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_destroy
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_startup
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_deinit
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_schedule_unlock
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_schedule_lock
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_errno
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_increase
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mb_send
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mb_recv
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mb_show
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_show
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_send
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_recv
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_deinit
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_show
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_recursive_unlock
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_recursive_lock
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mutex_deinit
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_show
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_recv
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_destroy
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mq_send
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_mempool_info
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_timer_info
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_set_timeout_ticks
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_is_active
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_destroy
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_create
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_task_entry
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_tsleep
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_show
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_task_exit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_recycle_task_entry
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_show
</UL>

<P><STRONG><a name="[774]"></a>k_move_timer_list_one_step</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_timer.o(i.k_move_timer_list_one_step))
<BR><BR>[Called By]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_increase
</UL>

<P><STRONG><a name="[662]"></a>k_readyq_move_tail</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, os_sched.o(i.k_readyq_move_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = k_readyq_move_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_add_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_increase
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_tsleep
</UL>

<P><STRONG><a name="[4c0]"></a>k_readyq_put</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, os_sched.o(i.k_readyq_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = k_readyq_put
</UL>
<BR>[Calls]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_add_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_startup
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_increase
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_timer_need_handle
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_unblock_task
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_recursive_unlock
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mutex_set_owner_priority
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mutex_deinit
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_wakeup_recycle_task
</UL>

<P><STRONG><a name="[4bf]"></a>k_readyq_remove</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, os_sched.o(i.k_readyq_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = k_readyq_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_block_task
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_recursive_unlock
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mutex_set_owner_priority
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mutex_deinit
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_task_entry
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_tsleep
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_task_exit
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_task_deinit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_recycle_task_entry
</UL>

<P><STRONG><a name="[4ce]"></a>k_recycle_task_init</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, os_task.o(i.k_recycle_task_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = k_recycle_task_init &rArr; os_task_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_startup
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_init
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_startup
</UL>

<P><STRONG><a name="[4cc]"></a>k_sched_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, os_sched.o(i.k_sched_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = k_sched_init
</UL>
<BR>[Calls]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_readq_bmap_init
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_startup
</UL>

<P><STRONG><a name="[665]"></a>k_show_blocked_task</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, os_block.o(i.k_show_blocked_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = k_show_blocked_task &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_mempool_info
</UL>

<P><STRONG><a name="[4d0]"></a>k_start</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_sched.o(i.k_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = k_start
</UL>
<BR>[Calls]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_first_task_start
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_startup
</UL>

<P><STRONG><a name="[4cb]"></a>k_tickq_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_clock.o(i.k_tickq_init))
<BR><BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_startup
</UL>

<P><STRONG><a name="[65f]"></a>k_tickq_put</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, os_clock.o(i.k_tickq_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = k_tickq_put
</UL>
<BR>[Calls]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_add_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_block_task
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_tsleep
</UL>

<P><STRONG><a name="[4d2]"></a>k_tickq_remove</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, os_clock.o(i.k_tickq_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = k_tickq_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_increase
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_unblock_task
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_task_deinit
</UL>

<P><STRONG><a name="[4cd]"></a>k_timer_module_init</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, os_timer.o(i.k_timer_module_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = k_timer_module_init &rArr; os_task_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_startup
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_init
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_init
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_set_head
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_set_handle_flag_index
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_startup
</UL>

<P><STRONG><a name="[669]"></a>k_timer_need_handle</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, os_timer.o(i.k_timer_need_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = k_timer_need_handle &rArr; k_readyq_put
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_readyq_put
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_increase
</UL>

<P><STRONG><a name="[4bc]"></a>k_unblock_task</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, os_block.o(i.k_unblock_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = k_unblock_task &rArr; k_readyq_put
</UL>
<BR>[Calls]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tickq_remove
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_readyq_put
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mp_free
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_post
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mb_send
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mb_recv
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_send
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_cancle_all_blocked_task
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_recursive_unlock
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_recv
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mq_send
</UL>

<P><STRONG><a name="[599]"></a>keepalive</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, mqttclient.o(i.keepalive))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = keepalive &rArr; TimerInit &rArr; os_timer_create &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRelease
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIsExpired
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCountdownMS
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_pingreq
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[167]"></a>libc_system_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, libc.o(i.libc_system_init))
<BR>[Address Reference Count : 1]<UL><LI> libc.o(.init_call.5.2)
</UL>
<P><STRONG><a name="[4a6]"></a>$Super$$main</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = $Super$$main &rArr; onenet_upload_cycle_start &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_upload_cycle_start
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_start
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_main_task_entry
</UL>

<P><STRONG><a name="[586]"></a>mo_closesocket</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, mo_socket.o(i.mo_closesocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = mo_closesocket &rArr; mo_netconn_destroy &rArr; get_netconn_ops &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_schedule_unlock
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_schedule_lock
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_get_socket
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
</UL>

<P><STRONG><a name="[58a]"></a>mo_connect</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, mo_socket.o(i.mo_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = mo_connect &rArr; mo_netconn_connect &rArr; get_netconn_ops &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_get_socket
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
</UL>

<P><STRONG><a name="[585]"></a>mo_get_default</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mo_common.o(i.mo_get_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = mo_get_default &rArr; mo_object_get_default &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_object_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostbyname
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
</UL>

<P><STRONG><a name="[66f]"></a>mo_get_firmware_version</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, mo_general.o(i.mo_get_firmware_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = mo_get_firmware_version &rArr; get_general_ops &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_general_ops
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_esp8266_create
</UL>

<P><STRONG><a name="[5ea]"></a>mo_get_firmware_version_free</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, mo_general.o(i.mo_get_firmware_version_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = mo_get_firmware_version_free &rArr; os_free &rArr; os_memheap_free &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_firmware_version
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_esp8266_create
</UL>

<P><STRONG><a name="[635]"></a>mo_gethostbyname</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, mo_socket.o(i.mo_gethostbyname))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = mo_gethostbyname &rArr; mo_netconn_gethostbyname &rArr; get_netconn_ops &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_gethostbyname
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostbyname
</UL>

<P><STRONG><a name="[66c]"></a>mo_netconn_connect</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, mo_netconn.o(i.mo_netconn_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = mo_netconn_connect &rArr; get_netconn_ops &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_netconn_ops
</UL>
<BR>[Called By]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_connect
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_udp_sendto
</UL>

<P><STRONG><a name="[671]"></a>mo_netconn_create</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, mo_netconn.o(i.mo_netconn_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = mo_netconn_create &rArr; get_netconn_ops &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_netconn_ops
</UL>
<BR>[Called By]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_socket
</UL>

<P><STRONG><a name="[66b]"></a>mo_netconn_destroy</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, mo_netconn.o(i.mo_netconn_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = mo_netconn_destroy &rArr; get_netconn_ops &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_netconn_ops
</UL>
<BR>[Called By]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_socket
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_closesocket
</UL>

<P><STRONG><a name="[670]"></a>mo_netconn_gethostbyname</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, mo_netconn.o(i.mo_netconn_gethostbyname))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = mo_netconn_gethostbyname &rArr; get_netconn_ops &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ipaddr_addr
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4addr_aton
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_netconn_ops
</UL>
<BR>[Called By]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_gethostbyname
</UL>

<P><STRONG><a name="[5f2]"></a>mo_netconn_mq_destroy</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, mo_netconn.o(i.mo_netconn_mq_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = mo_netconn_mq_destroy &rArr; os_mq_recv &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_recv
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_destroy
</UL>

<P><STRONG><a name="[674]"></a>mo_netconn_pasv_close_notice</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, mo_netconn.o(i.mo_netconn_pasv_close_notice))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = mo_netconn_pasv_close_notice &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_close_func
</UL>

<P><STRONG><a name="[675]"></a>mo_netconn_recvfrom</STRONG> (Thumb, 422 bytes, Stack size 80 bytes, mo_netconn.o(i.mo_netconn_recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = mo_netconn_recvfrom &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_recvfrom_udp
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_recv_tcp
</UL>

<P><STRONG><a name="[676]"></a>mo_netconn_send</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, mo_netconn.o(i.mo_netconn_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = mo_netconn_send &rArr; get_netconn_ops &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_netconn_ops
</UL>
<BR>[Called By]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_udp_sendto
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_tcp_send
</UL>

<P><STRONG><a name="[677]"></a>mo_netconn_sendto</STRONG> (Thumb, 326 bytes, Stack size 64 bytes, mo_netconn.o(i.mo_netconn_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = mo_netconn_sendto &rArr; get_netconn_ops &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_netconn_ops
</UL>
<BR>[Called By]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_udp_sendto
</UL>

<P><STRONG><a name="[678]"></a>mo_object_deinit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, mo_object.o(i.mo_object_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = mo_object_deinit &rArr; at_parser_deinit &rArr; os_device_close &rArr; os_sem_wait &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_deinit
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_object_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_esp8266_create
</UL>

<P><STRONG><a name="[67a]"></a>mo_object_get_by_name</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, mo_object.o(i.mo_object_get_by_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = mo_object_get_by_name &rArr; os_schedule_unlock &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_schedule_unlock
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_schedule_lock
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_object_init
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_esp8266_create
</UL>

<P><STRONG><a name="[66e]"></a>mo_object_get_default</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mo_object.o(i.mo_object_get_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = mo_object_get_default &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_get_default
</UL>

<P><STRONG><a name="[67b]"></a>mo_object_init</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, mo_object.o(i.mo_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = mo_object_init &rArr; mo_object_init_with_mcu &rArr; at_parser_init &rArr; at_parser_device_open &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_object_get_by_name
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_object_init_with_mcu
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_esp8266_create
</UL>

<P><STRONG><a name="[67f]"></a>mo_recv</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, mo_socket.o(i.mo_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = mo_recv &rArr; mo_recvfrom &rArr; module_recv_tcp &rArr; mo_netconn_recvfrom &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_recvfrom
</UL>
<BR>[Called By]<UL><LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</UL>

<P><STRONG><a name="[680]"></a>mo_recvfrom</STRONG> (Thumb, 172 bytes, Stack size 56 bytes, mo_socket.o(i.mo_recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = mo_recvfrom &rArr; module_recv_tcp &rArr; mo_netconn_recvfrom &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_recvfrom_udp
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_recv_tcp
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_recv
</UL>

<P><STRONG><a name="[683]"></a>mo_select</STRONG> (Thumb, 680 bytes, Stack size 160 bytes, mo_socket.o(i.mo_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = mo_select &rArr; mo_selscan &rArr; mo_get_socket &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_wait
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_deinit
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_schedule_unlock
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_schedule_lock
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_from_ms
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_tryget_socket
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_selscan
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_do_sem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
</UL>

<P><STRONG><a name="[686]"></a>mo_send</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, mo_socket.o(i.mo_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = mo_send &rArr; mo_sendto &rArr; module_udp_sendto &rArr; mo_netconn_sendto &rArr; get_netconn_ops &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>

<P><STRONG><a name="[687]"></a>mo_sendto</STRONG> (Thumb, 240 bytes, Stack size 56 bytes, mo_socket.o(i.mo_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = mo_sendto &rArr; module_udp_sendto &rArr; mo_netconn_sendto &rArr; get_netconn_ops &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_udp_sendto
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_tcp_send
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_send
</UL>

<P><STRONG><a name="[68a]"></a>mo_setsockopt</STRONG> (Thumb, 236 bytes, Stack size 56 bytes, mo_socket.o(i.mo_setsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = mo_setsockopt &rArr; mo_get_socket &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
</UL>

<P><STRONG><a name="[68b]"></a>mo_socket</STRONG> (Thumb, 268 bytes, Stack size 48 bytes, mo_socket.o(i.mo_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = mo_socket &rArr; mo_netconn_destroy &rArr; get_netconn_ops &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_destroy
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_create
</UL>
<BR>[Called By]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
</UL>

<P><STRONG><a name="[5e9]"></a>mo_wifi_connect_ap</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, mo_wifi.o(i.mo_wifi_connect_ap))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = mo_wifi_connect_ap &rArr; get_wifi_ops &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wifi_ops
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_auto_create
</UL>

<P><STRONG><a name="[68c]"></a>mo_wifi_netconn_data_recv_notice</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, mo_netconn.o(i.mo_wifi_netconn_data_recv_notice))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = mo_wifi_netconn_data_recv_notice &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_send
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_recv_func
</UL>

<P><STRONG><a name="[5e8]"></a>module_esp8266_create</STRONG> (Thumb, 302 bytes, Stack size 48 bytes, esp8266.o(i.module_esp8266_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = module_esp8266_create &rArr; esp8266_at_init &rArr; at_parser_connect &rArr; at_parser_send &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_init
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_malloc
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_init
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_object_init
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_object_get_by_name
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_object_deinit
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_get_firmware_version_free
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_get_firmware_version
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_set_mode
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_set_ipdinofo
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_init
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_init
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_at_init
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_auto_create
</UL>

<P><STRONG><a name="[67d]"></a>module_object_get_by_device</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, mo_object.o(i.module_object_get_by_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = module_object_get_by_device &rArr; os_schedule_unlock &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_schedule_unlock
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_schedule_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_object_init_with_mcu
</UL>

<P><STRONG><a name="[68f]"></a>mpu6xxx_deinit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, mpu6xxx.o(i.mpu6xxx_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = mpu6xxx_deinit &rArr; os_free &rArr; os_memheap_free &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_test
</UL>

<P><STRONG><a name="[4ff]"></a>mpu6xxx_get_accel</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, mpu6xxx.o(i.mpu6xxx_get_accel))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = mpu6xxx_get_accel &rArr; mpu6xxx_get_accel_raw &rArr; mpu6xxx_read_regs &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_get_accel_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_test
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mpu6xxx_polling_get_data
</UL>

<P><STRONG><a name="[501]"></a>mpu6xxx_get_gyro</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, mpu6xxx.o(i.mpu6xxx_get_gyro))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = mpu6xxx_get_gyro &rArr; mpu6xxx_get_gyro_raw &rArr; mpu6xxx_read_regs &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_get_gyro_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_test
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mpu6xxx_polling_get_data
</UL>

<P><STRONG><a name="[502]"></a>mpu6xxx_get_temp</STRONG> (Thumb, 262 bytes, Stack size 48 bytes, mpu6xxx.o(i.mpu6xxx_get_temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = mpu6xxx_get_temp &rArr; mpu6xxx_get_temp_raw &rArr; mpu6xxx_read_regs &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_get_temp_raw
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_test
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mpu6xxx_polling_get_data
</UL>

<P><STRONG><a name="[4fd]"></a>mpu6xxx_init</STRONG> (Thumb, 678 bytes, Stack size 40 bytes, mpu6xxx.o(i.mpu6xxx_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = mpu6xxx_init &rArr; mpu6xxx_get_param &rArr; mpu6xxx_read_bits &rArr; mpu6xxx_read_regs &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_find
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_write_bits
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_read_regs
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_get_param
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_set_param
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_test
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mpu6xxx_init
</UL>

<P><STRONG><a name="[504]"></a>mpu6xxx_set_param</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, mpu6xxx.o(i.mpu6xxx_set_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = mpu6xxx_set_param &rArr; mpu6xxx_write_bits &rArr; mpu6xxx_read_regs &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_write_reg
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_write_bits
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_write_bit
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_read_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_test
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mpu6xxx_set_range
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mpu6xxx_set_power
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_init
</UL>

<P><STRONG><a name="[6a6]"></a>msd_init</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, spi_msd.o(i.msd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = msd_init &rArr; msd_blk_init &rArr; os_spi_configure &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_device_register
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_find
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msd_blk_init
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_spi_tfcard
</UL>

<P><STRONG><a name="[5f3]"></a>net_ip4addr_aton</STRONG> (Thumb, 444 bytes, Stack size 48 bytes, mo_ipaddr.o(i.net_ip4addr_aton))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = net_ip4addr_aton &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ipaddr_addr
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_recv_func
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_get_sta_cip
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_ping
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_gethostbyname
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_destroy
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_gethostbyname
</UL>

<P><STRONG><a name="[5ef]"></a>net_ip4addr_ntoa</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mo_ipaddr.o(i.net_ip4addr_ntoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = net_ip4addr_ntoa &rArr; net_ip4addr_ntoa_r
</UL>
<BR>[Calls]<UL><LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4addr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_sendto
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_connect
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_bind
</UL>

<P><STRONG><a name="[6a7]"></a>net_ip4addr_ntoa_r</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, mo_ipaddr.o(i.net_ip4addr_ntoa_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = net_ip4addr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4addr_ntoa
</UL>

<P><STRONG><a name="[5f5]"></a>net_ipaddr_addr</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, mo_ipaddr.o(i.net_ipaddr_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = net_ipaddr_addr &rArr; net_ip4addr_aton &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4addr_aton
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_get_ap_cip
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_gethostbyname
</UL>

<P><STRONG><a name="[6a8]"></a>onenet_authorization</STRONG> (Thumb, 278 bytes, Stack size 328 bytes, token.o(i.onenet_authorization))
<BR><BR>[Stack]<UL><LI>Max Depth = 5340 + Unknown Stack Size
<LI>Call Chain = onenet_authorization &rArr; hmac_sha1 &rArr; sha1 &rArr; rotl
</UL>
<BR>[Calls]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_url_encode
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASE64_Encode
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASE64_Decode
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha1
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_register
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_device_link
</UL>

<P><STRONG><a name="[6ae]"></a>onenet_event_callback</STRONG> (Thumb, 388 bytes, Stack size 16 bytes, onenet_mqtts.o(i.onenet_event_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = onenet_event_callback &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_register
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_publish
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_link
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_entry
</UL>

<P><STRONG><a name="[6af]"></a>onenet_get_device_info</STRONG> (Thumb, 126 bytes, Stack size 72 bytes, onenet_mqtts.o(i.onenet_get_device_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = onenet_get_device_info &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_entry
</UL>

<P><STRONG><a name="[6b5]"></a>onenet_mqtts_device_disconnect</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, onenet_mqtts.o(i.onenet_mqtts_device_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = onenet_mqtts_device_disconnect &rArr; MQTTDisconnect &rArr; TimerInit &rArr; os_timer_create &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTIsConnected
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_entry
</UL>

<P><STRONG><a name="[194]"></a>onenet_mqtts_device_end</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, onenet_mqtts.o(i.onenet_mqtts_device_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = onenet_mqtts_device_end &rArr; os_task_msleep &rArr; os_task_tsleep &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_msleep
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_onenet_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> onenet_mqtts.o(FSymTab)
</UL>
<P><STRONG><a name="[6bd]"></a>onenet_mqtts_device_is_connected</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, onenet_mqtts.o(i.onenet_mqtts_device_is_connected))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = onenet_mqtts_device_is_connected
</UL>
<BR>[Calls]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTIsConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_publish
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_entry
</UL>

<P><STRONG><a name="[6bc]"></a>onenet_mqtts_device_link</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, onenet_mqtts.o(i.onenet_mqtts_device_link))
<BR><BR>[Stack]<UL><LI>Max Depth = 5572 + Unknown Stack Size
<LI>Call Chain = onenet_mqtts_device_link &rArr; onenet_device_link &rArr; onenet_authorization &rArr; hmac_sha1 &rArr; sha1 &rArr; rotl
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTIsConnected
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_event_callback
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_device_link
</UL>
<BR>[Called By]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_entry
</UL>

<P><STRONG><a name="[6bf]"></a>onenet_mqtts_device_publish</STRONG> (Thumb, 198 bytes, Stack size 360 bytes, onenet_mqtts.o(i.onenet_mqtts_device_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = onenet_mqtts_device_publish &rArr; onenet_mqtts_client_publish &rArr; MQTTPublish &rArr; waitfor &rArr; cycle &rArr; keepalive &rArr; TimerInit &rArr; os_timer_create &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_recv
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_event_callback
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_client_publish
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_entry
</UL>

<P><STRONG><a name="[6ba]"></a>onenet_mqtts_device_register</STRONG> (Thumb, 494 bytes, Stack size 1296 bytes, onenet_mqtts.o(i.onenet_mqtts_device_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 6636 + Unknown Stack Size
<LI>Call Chain = onenet_mqtts_device_register &rArr; onenet_authorization &rArr; hmac_sha1 &rArr; sha1 &rArr; rotl
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_malloc
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_authorization
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_event_callback
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_network_init
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_network_connect
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_entry
</UL>

<P><STRONG><a name="[193]"></a>onenet_mqtts_device_start</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, onenet_mqtts.o(i.onenet_mqtts_device_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = onenet_mqtts_device_start &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_startup
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_create
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> onenet_mqtts.o(FSymTab)
</UL>
<P><STRONG><a name="[6be]"></a>onenet_mqtts_device_subscribe</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, onenet_mqtts.o(i.onenet_mqtts_device_subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = onenet_mqtts_device_subscribe &rArr; onenet_mqtts_client_subscribe &rArr; MQTTSubscribe &rArr; MQTTSubscribeWithResults &rArr; waitfor &rArr; cycle &rArr; keepalive &rArr; TimerInit &rArr; os_timer_create &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_client_subscribe
</UL>
<BR>[Called By]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_entry
</UL>

<P><STRONG><a name="[6b8]"></a>onenet_mqtts_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, onenet_mqtts.o(i.onenet_mqtts_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 984 + Unknown Stack Size
<LI>Call Chain = onenet_mqtts_init &rArr; mqtt_subscribe_message_handlers_init &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTNetworkInit
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTClientInit
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_subscribe_message_handlers_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_entry
</UL>

<P><STRONG><a name="[195]"></a>onenet_mqtts_publish</STRONG> (Thumb, 168 bytes, Stack size 176 bytes, onenet_mqtts.o(i.onenet_mqtts_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = onenet_mqtts_publish &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_send
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_is_connected
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> onenet_mqtts.o(FSymTab)
</UL>
<P><STRONG><a name="[16d]"></a>onenet_upload_cycle_start</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, onenet_process.o(i.onenet_upload_cycle_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = onenet_upload_cycle_start &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_startup
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_create
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> onenet_process.o(FSymTab)
</UL>
<P><STRONG><a name="[6c6]"></a>opendir</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, dirent.o(i.opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = opendir &rArr; vfs_opendir &rArr; do_opendir &rArr; vfs_mount_point_find_and_ref &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_malloc
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_opendir
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_do_auto_complete_path
</UL>

<P><STRONG><a name="[6c7]"></a>opt_get</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, option_parse.o(i.opt_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = opt_get &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_dlog_ctrl_info_get
</UL>

<P><STRONG><a name="[6c9]"></a>opt_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, option_parse.o(i.opt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = opt_init &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_dlog_ctrl_info_get
</UL>

<P><STRONG><a name="[6ca]"></a>os_aligned_malloc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, os_memory.o(i.os_aligned_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = os_aligned_malloc &rArr; os_memheap_aligned_alloc &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memheap_aligned_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_create
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dma_malloc_align
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_create
</UL>

<P><STRONG><a name="[231]"></a>os_arch_fault_exception</STRONG> (Thumb, 382 bytes, Stack size 32 bytes, arch_exception.o(i.os_arch_fault_exception))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = os_arch_fault_exception &rArr; _os_arch_hard_fault_track &rArr; _os_arch_usage_fault_track &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_self
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_arch_hard_fault_track
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[6cd]"></a>os_audio_player_register</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, audio_player.o(i.os_audio_player_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = os_audio_player_register &rArr; os_device_register &rArr; os_plug_in &rArr; os_sem_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_register
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_audio_player_init
</UL>

<P><STRONG><a name="[6ce]"></a>os_audio_recorder_register</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, audio_recorder.o(i.os_audio_recorder_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = os_audio_recorder_register &rArr; os_device_register &rArr; os_plug_in &rArr; os_sem_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_register
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_audio_recorder_init
</UL>

<P><STRONG><a name="[450]"></a>os_calloc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, os_memory.o(i.os_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = os_calloc &rArr; os_memheap_alloc &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memheap_alloc
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_audio_recorder_init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_audio_player_init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_audio_recorder_init
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_control
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_audio_player_init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_can_init
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hwcrypto_ctx_create
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_part_init
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_spi_device_attach
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfbus_attach
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfbus_spi_transfer
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_i2c_bus_probe
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sflash_init
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_read_sfdp
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_find_flash_info_by_sfdp
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_flash_probe
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_rng_probe
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_crc_probe
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_pin_init
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_can_probe
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_fill_color
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_lcd_init
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_rtc_probe
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_qspi_bus_probe
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_lptim_probe
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_iwdt_probe
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pwm_register
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_tim_probe
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_usbd_probe
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_usart_probe
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_probe
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_sai_probe
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_sai_dma_rx_enable
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_recv_func
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_alloc
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_scan_info
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_get_stat
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_firmware_version
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_init
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_vasprintf
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_sensor_register
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_mpu6xxx_init
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_init
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_init
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aht10_init
</UL>

<P><STRONG><a name="[6fd]"></a>os_clockevent_best</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clockevent.o(i.os_clockevent_best))
<BR><BR>[Called By]<UL><LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hrtimer_start
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hrtimer_init
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hrtimer_trig_hwtimer
</UL>

<P><STRONG><a name="[b4]"></a>os_clockevent_deinit</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, clockevent.o(i.os_clockevent_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = os_clockevent_deinit &rArr; os_clockevent_stop &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_stop
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_register_isr
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clockevent.o(.constdata)
</UL>
<P><STRONG><a name="[38a]"></a>os_clockevent_isr</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, clockevent.o(i.os_clockevent_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = os_clockevent_isr &rArr; os_clockevent_next &rArr; os_clockevent_calc_param &rArr; period_calc_next_nsec &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clocksource_update
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_next
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_auto_period
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lptim_callback
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[6d8]"></a>os_clockevent_register</STRONG> (Thumb, 510 bytes, Stack size 48 bytes, clockevent.o(i.os_clockevent_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = os_clockevent_register &rArr; os_device_register &rArr; os_plug_in &rArr; os_sem_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_register
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_mult_shift
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_enqueue
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_lptim_probe
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_tim_probe
</UL>

<P><STRONG><a name="[6d5]"></a>os_clockevent_register_isr</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, clockevent.o(i.os_clockevent_register_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = os_clockevent_register_isr &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_deinit
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hrtimer_init
</UL>

<P><STRONG><a name="[6da]"></a>os_clockevent_select_best</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, clockevent.o(i.os_clockevent_select_best))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = os_clockevent_select_best &rArr; os_device_open_s &rArr; os_sem_wait &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_valid
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_open_s
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_close
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hrtimer_init
</UL>

<P><STRONG><a name="[6dc]"></a>os_clockevent_start_oneshot</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, clockevent.o(i.os_clockevent_start_oneshot))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = os_clockevent_start_oneshot &rArr; os_clockevent_next &rArr; os_clockevent_calc_param &rArr; period_calc_next_nsec &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clocksource_gettime
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_stop
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_next
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hrtimer_trig_hwtimer
</UL>

<P><STRONG><a name="[6d4]"></a>os_clockevent_stop</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, clockevent.o(i.os_clockevent_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = os_clockevent_stop &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_start_oneshot
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_deinit
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hrtimer_trig_hwtimer
</UL>

<P><STRONG><a name="[6fc]"></a>os_clocksource_best</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clocksource.o(i.os_clocksource_best))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hrtimer_init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_tim_probe
</UL>

<P><STRONG><a name="[650]"></a>os_clocksource_gettime</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, clocksource.o(i.os_clocksource_gettime))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = os_clocksource_gettime &rArr; os_clocksource_gettime_cs &rArr; os_clocksource_update_cs
</UL>
<BR>[Calls]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clocksource_gettime_cs
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_get
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_start_oneshot
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_calc_param
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hrtimer_start
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hrtimer_trig_hwtimer
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hrtimer_callback
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irk_on_us
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_rx_timer_callback
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_rx_pin_callback
</UL>

<P><STRONG><a name="[65b]"></a>os_clocksource_ndelay</STRONG> (Thumb, 242 bytes, Stack size 56 bytes, clocksource.o(i.os_clocksource_ndelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = os_clocksource_ndelay &rArr; __os_clocksource_ndelay
</UL>
<BR>[Calls]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__os_clocksource_ndelay
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_i2c_delay
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_udelay
</UL>

<P><STRONG><a name="[58e]"></a>os_clocksource_register</STRONG> (Thumb, 426 bytes, Stack size 48 bytes, clocksource.o(i.os_clocksource_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = os_clocksource_register &rArr; os_device_register &rArr; os_plug_in &rArr; os_sem_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_register
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clocksource_valid
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clocksource_select
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clocksource_enqueue
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_mult_shift
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cortexm_systick_clocksource_init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_tim_probe
</UL>

<P><STRONG><a name="[6d6]"></a>os_clocksource_update</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, clocksource.o(i.os_clocksource_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = os_clocksource_update &rArr; os_clocksource_update_cs
</UL>
<BR>[Calls]<UL><LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clocksource_update_cs
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_isr
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_handler
</UL>

<P><STRONG><a name="[706]"></a>os_console_get_device</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, console.o(i.os_console_get_device))
<BR><BR>[Called By]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_console_output
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_serial_write
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_do_connect_console
</UL>

<P><STRONG><a name="[14c]"></a>os_console_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, console.o(i.os_console_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = os_console_init &rArr; os_console_set_device &rArr; os_device_open_s &rArr; os_sem_wait &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_console_set_device
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console.o(.init_call.3.2)
</UL>
<P><STRONG><a name="[6e3]"></a>os_console_set_device</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, console.o(i.os_console_set_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = os_console_set_device &rArr; os_device_open_s &rArr; os_sem_wait &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_open_s
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_close
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_console_init
</UL>

<P><STRONG><a name="[54f]"></a>os_device_close</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, device.o(i.os_device_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = os_device_close &rArr; os_sem_wait &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_wait
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_post
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_plug_put
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_notify
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es8388_deinit
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clocksource_select
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_select_best
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_mkfs
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_console_set_device
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_init
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_deinit
</UL>

<P><STRONG><a name="[452]"></a>os_device_control</STRONG> (Thumb, 506 bytes, Stack size 40 bytes, device.o(i.os_device_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = os_device_control &rArr; os_sem_wait &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_wait
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_post
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_notify
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_del
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_audio_player_init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_es8388_recorder_stop
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_es8388_recorder_start
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_es8388_recorder_init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_es8388_recorder_config
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_es8388_player_stop
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_es8388_player_start
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_es8388_player_init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_es8388_player_config
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_audio_player_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_mount
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_auto_create
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_device_open
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_do_connect_console
</UL>

<P><STRONG><a name="[5e7]"></a>os_device_find</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, device.o(i.os_device_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = os_device_find &rArr; os_sem_wait &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_wait
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_post
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_register
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mkfs
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfbus_attach
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_i2c_bus_device_find
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msd_init
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_hw_config
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_sai_dma_rx_enable
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_auto_create
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_init
</UL>

<P><STRONG><a name="[6e5]"></a>os_device_for_each</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, device.o(i.os_device_for_each))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = os_device_for_each &rArr; os_sem_wait &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_wait
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_post
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_list_device
</UL>

<P><STRONG><a name="[59d]"></a>os_device_notify</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, device.o(i.os_device_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = os_device_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_open
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_write_nonblock
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_register
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_control
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_read_nonblock
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_write_block
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_open_s
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_close
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_release
</UL>

<P><STRONG><a name="[551]"></a>os_device_open</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, device.o(i.os_device_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = os_device_open &rArr; os_sem_wait &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_wait
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_post
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_plug_get
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es8388_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_mount
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_mkfs
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_device_open
</UL>

<P><STRONG><a name="[657]"></a>os_device_open_s</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, device.o(i.os_device_open_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = os_device_open_s &rArr; os_sem_wait &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_wait
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_post
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_plug_get
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_notify
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_audio_recorder_init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_audio_player_init
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clocksource_select
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_select_best
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_send_ac
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_upload_data_task_func
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_console_set_device
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfbus_attach
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfbus_spi_attach
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_bus_attach_device
</UL>

<P><STRONG><a name="[6e7]"></a>os_device_pin_register</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, pin.o(i.os_device_pin_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = os_device_pin_register &rArr; os_device_register &rArr; os_plug_in &rArr; os_sem_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_register
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_snprintf
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_pin_init
</UL>

<P><STRONG><a name="[6e8]"></a>os_device_pwm_register</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, pwm.o(i.os_device_pwm_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = os_device_pwm_register &rArr; os_device_register &rArr; os_plug_in &rArr; os_sem_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pwm_register
</UL>

<P><STRONG><a name="[55a]"></a>os_device_read_nonblock</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, device.o(i.os_device_read_nonblock))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = os_device_read_nonblock &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_es8388_receive
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_upload_data_task_func
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_getchar
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_get_char
</UL>

<P><STRONG><a name="[64e]"></a>os_device_recv_notify</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, device.o(i.os_device_recv_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = os_device_recv_notify &rArr; os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_post
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_can_isr_rxdone
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_serial_isr_rxdone
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_rx_data_enqueue
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sensor_cb
</UL>

<P><STRONG><a name="[57a]"></a>os_device_register</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, device.o(i.os_device_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = os_device_register &rArr; os_plug_in &rArr; os_sem_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_wait
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_post
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_init
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_plug_in
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_notify
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_find
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_init
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_add
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sai_register
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_audio_recorder_register
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_audio_player_register
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clocksource_register
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_register
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_can_register
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_device_register
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_watchdog_register
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hwcrypto_register
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfbus_xspi_register
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfbus_spi_attach
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_serial_register
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_pwm_register
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_pin_register
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_i2c_bus_device_register
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spidev_device_init
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_bus_device_init
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_graphic_register
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_rtc_probe
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_infrared_register_device
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_sensor_register
</UL>

<P><STRONG><a name="[572]"></a>os_device_send_notify</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, device.o(i.os_device_send_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = os_device_send_notify &rArr; os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_post
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_sai_isr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_es8388_data_tx_done
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_can_isr_txdone
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_can_control
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_serial_isr_txdone
</UL>

<P><STRONG><a name="[567]"></a>os_device_write_block</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, device.o(i.os_device_write_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = os_device_write_block &rArr; os_sem_wait &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_wait
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_post
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_send
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_vasprintfln
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_vasprintf
</UL>

<P><STRONG><a name="[578]"></a>os_device_write_nonblock</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, device.o(i.os_device_write_nonblock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = os_device_write_nonblock &rArr;  os_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_es8388_transmit
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_console_output
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[6ec]"></a>os_dma_free_align</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dma_ram.o(i.os_dma_free_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = os_dma_free_align &rArr; os_free &rArr; os_memheap_free &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_serial_deinit
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_buffer_deinit
</UL>

<P><STRONG><a name="[6ed]"></a>os_dma_malloc_align</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, dma_ram.o(i.os_dma_malloc_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = os_dma_malloc_align &rArr; os_aligned_malloc &rArr; os_memheap_aligned_alloc &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_aligned_malloc
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_serial_init
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_normal_buffer_init
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_circular_buffer_init
</UL>

<P><STRONG><a name="[704]"></a>os_dma_mem_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma_ram.o(i.os_dma_mem_init))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_board_init
</UL>

<P><STRONG><a name="[43c]"></a>os_errno</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, os_task.o(i.os_errno))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_active
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[54d]"></a>os_event_deinit</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, os_event.o(i.os_event_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = os_event_deinit &rArr; os_spin_unlock &rArr; os_schedule_unlock &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_switch
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_active
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_unlock
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_lock
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_del
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_exit_check
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_enter_check
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_cancle_all_blocked_task
</UL>
<BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_init
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_deinit
</UL>

<P><STRONG><a name="[55d]"></a>os_event_init</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, os_event.o(i.os_event_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = os_event_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_active
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_unlock
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_lock
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_print
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_add_tail
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_event_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_esp8266_create
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_init
</UL>

<P><STRONG><a name="[559]"></a>os_event_recv</STRONG> (Thumb, 694 bytes, Stack size 56 bytes, os_event.o(i.os_event_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = os_event_recv &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_switch
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_schedule_locked
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_disabled
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_active
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_print
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_event_flag_check
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_exit_check
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_enter_check
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_block_task
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_sendto
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_send
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_getchar
</UL>

<P><STRONG><a name="[566]"></a>os_event_send</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, os_event.o(i.os_event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = os_event_send &rArr; _k_event_flag_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_switch
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_event_flag_check
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_exit_check
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_enter_check
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_unblock_task
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_send_func
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_rx_indicate
</UL>

<P><STRONG><a name="[6f0]"></a>os_event_show</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, os_event.o(i.os_event_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = os_event_show &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_exit_check
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_enter_check
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_iter_show_blocked_task
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_event_info
</UL>

<P><STRONG><a name="[44f]"></a>os_free</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, os_memory.o(i.os_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = os_free &rArr; os_memheap_free &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memheap_free
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_audio_recorder_deinit
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mp_destroy
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mp_create
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_control
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_audio_player_init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_audio_player_deinit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_can_deinit
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_tag_lvl_filter_del
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_destroy
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_create
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_close
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbb_destroy
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbb_create
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vfs_conjunction_path
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_ref_dec
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_ref_dec
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_alloc
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_readdir
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_opendir
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_closedir
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_unlink
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_stat
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_rename_check
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_rename
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_open
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_mount
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_mkfs
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_close
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v_fat_del_entry
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v_fat_deinit
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_destroy
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_destroy_absolute_path
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_create_absolute_path
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_pwd
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_ls
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rm_node_destroy
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_removedir
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_path_node_destroy
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_move
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_copyfile
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hwcrypto_ctx_create
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_part_init
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dma_free_align
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfbus_spi_transfer
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_find_flash_info_by_sfdp
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_rng_probe
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_crc_probe
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_fill_color
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_uart_release
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_sai_dma_rx_enable
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_exec
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_destroy
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_create
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_mempool_info
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_destroy
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_recycle_task_entry
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_mq_destroy
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_recv_func
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_alloc
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_get_firmware_version_free
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_scan_info
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_get_stat
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_esp8266_create
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_init
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_cmd_valist
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_deinit
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_closesocket
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_recvfrom_udp
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_recv_tcp
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_register
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_sensor_register
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_init
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_deinit
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_do_set_prompt
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_ap3216c_proximity_init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_ap3216c_light_init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_ap3216c_ir_init
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_aht10_temp_init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_aht10_humi_init
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aht10_init
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_do_auto_complete_path
</UL>

<P><STRONG><a name="[6f6]"></a>os_graphic_register</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, graphic.o(i.os_graphic_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = os_graphic_register &rArr; os_device_register &rArr; os_plug_in &rArr; os_sem_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_register
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_lcd_init
</UL>

<P><STRONG><a name="[14f]"></a>os_hrtimer_init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, hrtimer.o(i.os_hrtimer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = os_hrtimer_init &rArr; os_hrtimer_start &rArr; os_hrtimer_trig_hwtimer &rArr; os_clockevent_start_oneshot &rArr; os_clockevent_next &rArr; os_clockevent_calc_param &rArr; period_calc_next_nsec &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clocksource_best
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_select_best
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_register_isr
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_best
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hrtimer_start
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_empty
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hrtimer_trig_hwtimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hrtimer.o(.init_call.3.3)
</UL>
<P><STRONG><a name="[6fe]"></a>os_hrtimer_start</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, hrtimer.o(i.os_hrtimer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = os_hrtimer_start &rArr; os_hrtimer_trig_hwtimer &rArr; os_clockevent_start_oneshot &rArr; os_clockevent_next &rArr; os_clockevent_calc_param &rArr; period_calc_next_nsec &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clocksource_gettime
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_best
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_empty
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hrtimer_trig_hwtimer
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hrtimer_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hrtimer_init
</UL>

<P><STRONG><a name="[15b]"></a>os_hw_audio_player_init</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, es8388.o(i.os_hw_audio_player_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = os_hw_audio_player_init &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_control
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_audio_player_register
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_open_s
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es8388.o(.init_call.4.3)
</UL>
<P><STRONG><a name="[15c]"></a>os_hw_audio_recorder_init</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, es8388.o(i.os_hw_audio_recorder_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = os_hw_audio_recorder_init &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_mode
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_audio_recorder_register
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_open_s
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es8388.o(.init_call.4.3)
</UL>
<P><STRONG><a name="[2a6]"></a>os_hw_can_isr_rxdone</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, can.o(i.os_hw_can_isr_rxdone))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = os_hw_can_isr_rxdone &rArr; os_device_recv_notify &rArr; os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_recv_notify
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_empty
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_del
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_add_tail
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo1MsgPendingCallback
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
</UL>

<P><STRONG><a name="[293]"></a>os_hw_can_isr_txdone</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, can.o(i.os_hw_can_isr_txdone))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = os_hw_can_isr_txdone &rArr; os_device_send_notify &rArr; os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_send_notify
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_empty
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_del
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_add_tail
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox2CompleteCallback
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox2AbortCallback
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox1CompleteCallback
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox1AbortCallback
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox0CompleteCallback
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox0AbortCallback
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ErrorCallback
</UL>

<P><STRONG><a name="[705]"></a>os_hw_can_register</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, can.o(i.os_hw_can_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = os_hw_can_register &rArr; os_device_register &rArr; os_plug_in &rArr; os_sem_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_register
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_init
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_can_probe
</UL>

<P><STRONG><a name="[5b9]"></a>os_hw_console_output</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, console.o(i.os_hw_console_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = os_hw_console_output &rArr; __os_hw_console_output &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_write_nonblock
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_console_get_device
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__os_hw_console_output
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_console_backend_output
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_print
</UL>

<P><STRONG><a name="[707]"></a>os_hw_cpu_reset</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, drv_common.o(i.os_hw_cpu_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_hw_cpu_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot
</UL>

<P><STRONG><a name="[70a]"></a>os_hw_mpu6xxx_init</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, sensor_inven_mpu6xxx.o(i.os_hw_mpu6xxx_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = os_hw_mpu6xxx_init &rArr; _mpu6xxx_init &rArr; mpu6xxx_init &rArr; mpu6xxx_get_param &rArr; mpu6xxx_read_bits &rArr; mpu6xxx_read_regs &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_sensor_register
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mpu6xxx_init
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_mpu6xxx_port
</UL>

<P><STRONG><a name="[57b]"></a>os_hw_pin_init</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, drv_gpio.o(i.os_hw_pin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = os_hw_pin_init &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_pin_register
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__os_hw_pin_init
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_post_init
</UL>

<P><STRONG><a name="[360]"></a>os_hw_sai_isr</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, sai.o(i.os_hw_sai_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = os_hw_sai_isr &rArr; os_device_send_notify &rArr; os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_send_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_TxHalfCpltCallback
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_TxCpltCallback
</UL>

<P><STRONG><a name="[6ff]"></a>os_hw_sensor_register</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, sensor.o(i.os_hw_sensor_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = os_hw_sensor_register &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_register
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_mpu6xxx_init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_ap3216c_proximity_init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_ap3216c_light_init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_ap3216c_ir_init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_aht10_temp_init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_aht10_humi_init
</UL>

<P><STRONG><a name="[70c]"></a>os_hw_serial_isr_rxdone</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, serial.o(i.os_hw_serial_isr_rxdone))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = os_hw_serial_isr_rxdone &rArr; os_device_recv_notify &rArr; os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_recv_notify
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_count
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_usart_sdma_callback
</UL>

<P><STRONG><a name="[3a8]"></a>os_hw_serial_isr_txdone</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, serial.o(i.os_hw_serial_isr_txdone))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = os_hw_serial_isr_txdone &rArr; os_device_send_notify &rArr; os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_send_notify
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_post
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_ring_buff_put
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_ring_buff_get
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_ring_buff_data_len
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>

<P><STRONG><a name="[70d]"></a>os_hw_serial_register</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, serial.o(i.os_hw_serial_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = os_hw_serial_register &rArr; os_device_register &rArr; os_plug_in &rArr; os_sem_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_register
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_init
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_plug_in
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_usart_probe
</UL>

<P><STRONG><a name="[70e]"></a>os_hw_spi_device_attach</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, spi_core.o(i.os_hw_spi_device_attach))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = os_hw_spi_device_attach &rArr; os_spi_bus_attach_device &rArr; os_spidev_device_init &rArr; os_device_register &rArr; os_plug_in &rArr; os_sem_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_write
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_mode
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_bus_attach_device
</UL>
<BR>[Called By]<UL><LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfbus_spi_attach
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_spi_tfcard
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_init
</UL>

<P><STRONG><a name="[4d6]"></a>os_hw_stack_init</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, arch_task.o(i.os_hw_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = os_hw_stack_init
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_task_init
</UL>

<P><STRONG><a name="[772]"></a>os_hw_stack_max_used</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, arch_task.o(i.os_hw_stack_max_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_hw_stack_max_used
</UL>
<BR>[Called By]<UL><LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_show
</UL>

<P><STRONG><a name="[710]"></a>os_hw_watchdog_register</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, watchdog.o(i.os_hw_watchdog_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = os_hw_watchdog_register &rArr; os_device_register &rArr; os_plug_in &rArr; os_sem_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_register
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_iwdt_probe
</UL>

<P><STRONG><a name="[711]"></a>os_hwcrypto_crc_register</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, hw_crc.o(i.os_hwcrypto_crc_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = os_hwcrypto_crc_register &rArr; os_hwcrypto_register &rArr; os_device_register &rArr; os_plug_in &rArr; os_sem_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hwcrypto_register
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_crc_probe
</UL>

<P><STRONG><a name="[713]"></a>os_hwcrypto_ctx_create</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, hwcrypto.o(i.os_hwcrypto_ctx_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = os_hwcrypto_ctx_create &rArr; os_calloc &rArr; os_memheap_alloc &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hwcrypto_ctx_init
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hwcrypto_rng_register
</UL>

<P><STRONG><a name="[714]"></a>os_hwcrypto_ctx_init</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, hwcrypto.o(i.os_hwcrypto_ctx_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = os_hwcrypto_ctx_init
</UL>
<BR>[Calls]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hwcrypto_set_type
</UL>
<BR>[Called By]<UL><LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hwcrypto_ctx_create
</UL>

<P><STRONG><a name="[712]"></a>os_hwcrypto_register</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, hwcrypto.o(i.os_hwcrypto_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = os_hwcrypto_register &rArr; os_device_register &rArr; os_plug_in &rArr; os_sem_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_register
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hwcrypto_rng_register
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hwcrypto_crc_register
</UL>

<P><STRONG><a name="[716]"></a>os_hwcrypto_rng_register</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, hw_rng.o(i.os_hwcrypto_rng_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = os_hwcrypto_rng_register &rArr; os_hwcrypto_register &rArr; os_device_register &rArr; os_plug_in &rArr; os_sem_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hwcrypto_register
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hwcrypto_ctx_create
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_rng_probe
</UL>

<P><STRONG><a name="[715]"></a>os_hwcrypto_set_type</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, hwcrypto.o(i.os_hwcrypto_set_type))
<BR><BR>[Called By]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hwcrypto_ctx_init
</UL>

<P><STRONG><a name="[533]"></a>os_i2c_bus_device_find</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, i2c.o(i.os_i2c_bus_device_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = os_i2c_bus_device_find &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_find
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_init
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aht10_init
</UL>

<P><STRONG><a name="[717]"></a>os_i2c_bus_device_register</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, i2c.o(i.os_i2c_bus_device_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = os_i2c_bus_device_register &rArr; os_device_register &rArr; os_plug_in &rArr; os_sem_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_register
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_init
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_i2c_bus_probe
</UL>

<P><STRONG><a name="[535]"></a>os_i2c_client_read</STRONG> (Thumb, 188 bytes, Stack size 64 bytes, i2c.o(i.os_i2c_client_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = os_i2c_client_read &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_i2c_transfer
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_regs
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aht10_read_user_reg
</UL>

<P><STRONG><a name="[537]"></a>os_i2c_client_write</STRONG> (Thumb, 188 bytes, Stack size 64 bytes, i2c.o(i.os_i2c_client_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = os_i2c_client_write &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_i2c_transfer
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_i2c_client_write_byte
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aht10_write_user_reg
</UL>

<P><STRONG><a name="[718]"></a>os_i2c_client_write_byte</STRONG> (Thumb, 30 bytes, Stack size 40 bytes, i2c.o(i.os_i2c_client_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = os_i2c_client_write_byte &rArr; os_i2c_client_write &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_i2c_client_write
</UL>
<BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
</UL>

<P><STRONG><a name="[642]"></a>os_i2c_master_recv</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, i2c.o(i.os_i2c_master_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = os_i2c_master_recv &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_i2c_transfer
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_read
</UL>

<P><STRONG><a name="[643]"></a>os_i2c_master_send</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, i2c.o(i.os_i2c_master_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = os_i2c_master_send &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_i2c_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_write
</UL>

<P><STRONG><a name="[641]"></a>os_i2c_transfer</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, i2c.o(i.os_i2c_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_write
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_read
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_i2c_master_send
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_i2c_master_recv
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_i2c_client_write
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_i2c_client_read
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_control
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_write_reg
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_read_regs
</UL>

<P><STRONG><a name="[719]"></a>os_infrared_register_device</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, infrared.o(i.os_infrared_register_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = os_infrared_register_device &rArr; os_device_register &rArr; os_plug_in &rArr; os_sem_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_register
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_control_atk_init
</UL>

<P><STRONG><a name="[4b6]"></a>os_is_schedule_locked</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, os_sched.o(i.os_is_schedule_locked))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_exit_check
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_enter_check
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mp_destroy
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mp_create
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mp_alloc
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_wait
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_unlock
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_lock
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_destroy
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_create
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_destroy
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_create
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mb_send
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mb_recv
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_recv
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_recursive_lock
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_recv
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_destroy
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_create
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mq_send
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_destroy
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_create
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_tsleep
</UL>

<P><STRONG><a name="[4a9]"></a>os_kernel_print</STRONG> (Thumb, 526 bytes, Stack size 48 bytes, os_kernel_log.o(i.os_kernel_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_vsnprintf
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_get
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_snprintf
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_console_output
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_klog_tag_lvl
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_init
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_init
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_create
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_create
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_heap_init
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mb_init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_work_sys_workqueue_init
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mb_init
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_init
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_recv
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_init
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_init
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_recursive_unlock
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_recv
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_init
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_create
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mq_init
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memheap_init
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memheap_add
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mp_add_resourcelist
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_create
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_task_stack_check
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_recycle_task_entry
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_startup
</UL>

<P><STRONG><a name="[419]"></a>os_kprintf</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, os_util.o(i.os_kprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_vsnprintf
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_console_output
</UL>
<BR>[Called By]<UL><LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sai_register
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_open
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_write
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_read
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_write_nonblock
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_es8388_transmit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_es8388_receive
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_es8388_recorder_stop
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_es8388_recorder_start
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_es8388_recorder_init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_es8388_recorder_deinit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_es8388_recorder_config
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_es8388_player_stop
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_es8388_player_start
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_es8388_player_init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_es8388_player_deinit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_es8388_player_config
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_audio_recorder_register
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_audio_recorder_read
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_audio_recorder_init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_audio_recorder_deinit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_audio_recorder_control
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mp_free
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mp_destroy
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mp_create
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mp_alloc
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_control
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_audio_player_register
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_audio_player_callback
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_audio_player_write
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_audio_player_init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_audio_player_deinit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_audio_player_control
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_stack_is_overflow
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clocksource_register
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clocksource_select
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_stop
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_start_oneshot
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_select_best
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_register_isr
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_register
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_deinit
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;period_calc_next_nsec
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_calc_param
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_can_register
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_can_isr_txdone
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_can_isr_rxdone
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_can_write
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_can_read
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_can_init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_can_deinit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_can_control
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_rx
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_device_register
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_dev_control
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_wait
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_post
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_init
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_init
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_deinit
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_schedule_locked
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_voutput
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_global_lvl_set
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_do_dlog_tlvl_ctrl
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_dlog_tlvl_ctrl_help
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_dlog_tlvl_ctrl
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_dlog_gtag_ctrl_help
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_dlog_gtag_ctrl
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_dlog_glvl_ctrl_help
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_dlog_glvl_ctrl
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_dlog_gkw_ctrl_help
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_dlog_gkw_ctrl
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_dlog_flush
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_dlog_ctrl_info_get
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_unlock
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_tag_lvl_filter_set
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_tag_lvl_filter_get
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_tag_lvl_filter_del
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_lock
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_global_filter_tag_set
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_global_filter_kw_set
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_do_output
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_async_output_task_entry
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_arch_fault_exception
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_arch_usage_fault_track
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_arch_mem_manage_fault_track
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_arch_hard_fault_track
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_arch_bus_fault_track
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_destroy
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_read_nonblock
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_send_ac
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_upload_data_task_func
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_upload_cycle_start
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_start
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_startup
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_create
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_write_block
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_open_s
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_close
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_init
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_backend_register
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_console_backend_output
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_ring_buff_space_len
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_ring_buff_put
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_ring_buff_init
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_ring_buff_get
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_ring_buff_data_len
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_unlock_irqrestore
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_lock_irqsave
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_lock_init
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbb_destroy
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbb_blk_put
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbb_blk_get
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbb_blk_free
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbb_blk_alloc
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opt_init
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opt_get
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;working_dir_set
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;working_dir_get
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vfs_conjunction_path
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;working_dir_init
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_unlock
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_lock
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_init
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vfs_mkfs_dev_ref
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vfs_mkfs_dev_deref
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vfs_fs_ops_get
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_fdshow
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_to_fp
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_ref_inc
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_ref_dec
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_alloc
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_ref_inc
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_ref_dec
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_check_valid
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_alloc
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_register
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mount_point_find_and_ref
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mount_point_deref
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_destroy
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_create
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_rm
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_pwd
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_mv
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_mkfs
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_mkdir
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_ls
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_echo
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_df
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_cp
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_cd
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_cat
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rm_node_create
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_removedir
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_remove
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_path_node_create
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_move
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ls
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_echo
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_df
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_copyfile
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_copydir
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_copy
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cat
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_watchdog_register
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_watchdog_init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_watchdog_deinit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_watchdog_control
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hwcrypto_rng_register
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hwcrypto_register
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hwcrypto_crc_register
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hrtimer_init
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;period_calc_next_nsec
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hrtimer_enqueue
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_part_init
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_show_part_table
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_deinit
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_plug_put
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_plug_in
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_list_device
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_print_device_info
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_release
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_halt
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_append_sflash_info
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_transfer_message
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_spi_device_attach
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_configure
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfbus_attach
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfbus_spi_transfer
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfbus_spi_attach
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_ring_to_line
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_serial_register
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_serial_isr_txdone
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_serial_isr_rxdone
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_release
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_halt
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_serial_write
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_serial_read
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_serial_init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_serial_deinit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_serial_control
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_tx
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_rx
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_tx
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_schedule_unlock
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_configure
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_os_pin_write
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_os_pin_read
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_os_pin_mode
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_irq_enable
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_detach_irq
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_attach_irq
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_pin_register
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_pin_write
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_pin_read
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_pin_mode
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_write
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_read
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_control
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_i2c_master_recv
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_i2c_client_write
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_i2c_client_read
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_i2c_bus_device_register
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_write
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_read
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_control
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spidev_device_write
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spidev_device_read
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_write
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_read
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spidev_device_init
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_bus_device_init
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_transfer
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_take
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_send_then_send
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_send_then_recv
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_release
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_i2c_bus_probe
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_start
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_init
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_ring_to_ring
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_line_to_ring
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_normal_updata_buffer
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_normal_buffer_init
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_circular_buffer_init
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_write_page
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_read_page
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_init
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_erase_block
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sflash_init
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_unlock_blocks
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_read_status
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_read_sfdp
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_prepare_cmds
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_find_flash_info_by_sfdp
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_flash_probe
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_rng_probe
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_rng_crypto_create
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_crc_probe
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_crc_crypto_create
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_crc_config
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_can_stop_send
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_can_stop_recv
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_can_start_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_can_start_recv
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_can_recvmsg
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_can_probe
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_can_control
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_can_config
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_can_calc_baud
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_hw_config
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_frame_flush
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_lcd_init
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_graphic_register
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_graphic_control
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_infrared
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_rx_pin_callback
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_infrared_write
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_infrared_read
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_rtc_probe
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rtc_control
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_qspi_xfer_command
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_qspi_configure
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_qspi_bus_probe
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_lptimer_stop
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_lptimer_start
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_lptim_probe
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_iwdt_probe
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pwm_register
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_timer_stop
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_timer_start
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_timer_get_freq
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_tim_probe
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mb_send
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mb_recv
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mb_init
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dectect_task_create
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_usart_probe
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_uart_start_send
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_uart_release
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_uart_poll_send
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_uart_init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_uart_halt
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_uart_deinit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_sdma_dma_stop
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_probe
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixfer
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_configure
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_sai_probe
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_exec
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_workqueue_init
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mb_show
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_mb_info
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_klog_tag_lvl
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_init
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_idle_task_init
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_print
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_event_info
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_show
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_send
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_recv
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_init
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_deinit
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_event_flag_check
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_exit_check
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_enter_check
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_show_blocked_task
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_iter_show_blocked_task
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_init
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_infrared_register_device
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_mutex_info
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_show
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_recursive_unlock
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_recursive_lock
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_show
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_recv
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_init
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_destroy
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_create
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_mq_info
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mq_send
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mq_get_msg_from_queue
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_memshow
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_memheap_show
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memory_info
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memheap_init
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memheap_info
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memheap_free
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memheap_check
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memheap_alloc
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memheap_aligned_alloc
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memheap_add
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_mempool_info
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_split_chunks
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_free_list_remove_bidx
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_free_list_add_bidx
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_realloc
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_free
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_check
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_aligned_alloc
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunk_set
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunk_mem
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_bucket_idx
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_alloc_chunk
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_query_oneos_version
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_timer_info
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_set_timeout_ticks
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_is_active
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_destroy
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_create
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_task_entry
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_calc_remain_ticks
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_activate
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_task_info
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_tsleep
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_show
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_name
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_task_stack_check
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_timer_module_init
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_recycle_task_init
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_startup
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_main_task_entry
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_application_init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_sem_info
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_show
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_connect_func
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4addr_aton
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_wifi_netconn_data_recv_notice
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_pasv_close_notice
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_mq_destroy
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_send_func
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_send_bfsz_func
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_recv_func
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_close_func
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_netconn_by_id
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_wifi_connect_ap
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_object_init
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_object_get_by_name
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_object_deinit
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_get_firmware_version_free
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_get_firmware_version
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_connect_ap
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_gethostbyname
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_ifconfig
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_line_by_kw
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_line
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_data_by_line
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_data_by_kw
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_startup
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_set_urc_table
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_set_end_mark
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_send
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_recv
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_cmd_valist
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_cmd
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_deinit
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_connect
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_list_del
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_list_add
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_get_urc
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_test
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_get_param
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_socket
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_setsockopt
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_sendto
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_send
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_recvfrom
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_recv
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_gethostbyname
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_connect
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_closesocket
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_udp_sendto
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_object_get_by_device
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_object_list_del
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_sendto
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_send
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_recvfrom
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_gethostbyname
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_destroy
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_create
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_connect
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;submessage_pubdata_rejected_arrived_handler
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;submessage_pubdata_accepted_arrived_handler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;submessage_image_arrived_handler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;submessage_cmd_response_result_arrived_handler
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;submessage_cmd_request_arrived_handler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;submessage_arrived_default_handler
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_message_queue_init
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_sensor_register
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_mpu6xxx_init
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_fetch_data
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_set_param
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_init
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_deinit
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_do_set_prompt
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_set_prompt
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_help
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sensor_read
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sensor_init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sensor_deinit
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sensor_control
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_mpu6xxx_port
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_read_ps_data
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_read_ir_data
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_read_ambient_light
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_sensor
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_set_param
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_get_param
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_fetch_proximity_data
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_fetch_light_data
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_fetch_ir_data
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aht10_temp_fetch_data
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aht10_humi_fetch_data
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeOutState
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_split
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_do_exec_cmd
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_do_auto_complete_path
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_do_exec
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_auto_complete
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_get_prompt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_task_entry
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_system_init
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_print_history
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_handle_right_key
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_handle_normal_character
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_handle_left_key
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_handle_enter_key
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_handle_backspace_key
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_do_connect_console
</UL>

<P><STRONG><a name="[46f]"></a>os_malloc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, os_memory.o(i.os_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = os_malloc &rArr; os_memheap_alloc &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memheap_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mp_create
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_tag_lvl_filter_set
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_create
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbb_create
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vfs_conjunction_path
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_alloc
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_readdir
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_opendir
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_unlink
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_stat
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_rename_check
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_rename
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_open
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_mount
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_mkfs
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v_fat_init
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v_fat_add_entry
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_create_rel_mnt_path
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_create
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_pwd
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_ls
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rm_node_create
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_path_node_create
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_move
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_copyfile
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_exec
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_create
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_mempool_info
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_create
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_esp8266_create
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_register
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_do_set_prompt
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_do_auto_complete_path
</UL>

<P><STRONG><a name="[71a]"></a>os_mb_init</STRONG> (Thumb, 336 bytes, Stack size 56 bytes, os_mb.o(i.os_mb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = os_mb_init &rArr; _k_mb_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_active
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_unlock
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_lock
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_del
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_add_tail
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mb_init
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_print
</UL>
<BR>[Called By]<UL><LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dectect_task_create
</UL>

<P><STRONG><a name="[71d]"></a>os_mb_recv</STRONG> (Thumb, 668 bytes, Stack size 40 bytes, os_mb.o(i.os_mb_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = os_mb_recv &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_switch
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_schedule_locked
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_disabled
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_active
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_empty
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mb_modify_write_index
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mb_modify_read_index
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_exit_check
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_enter_check
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_unblock_task
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_block_task
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hotplug_detect
</UL>

<P><STRONG><a name="[323]"></a>os_mb_send</STRONG> (Thumb, 600 bytes, Stack size 40 bytes, os_mb.o(i.os_mb_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = os_mb_send &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_switch
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_schedule_locked
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_disabled
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_active
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_empty
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mb_modify_write_index
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_exit_check
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_enter_check
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_unblock_task
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_block_task
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
</UL>

<P><STRONG><a name="[721]"></a>os_mb_show</STRONG> (Thumb, 172 bytes, Stack size 72 bytes, os_mb.o(i.os_mb_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = os_mb_show &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_len
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_exit_check
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_enter_check
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_iter_show_blocked_task
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_mb_info
</UL>

<P><STRONG><a name="[723]"></a>os_memheap_add</STRONG> (Thumb, 600 bytes, Stack size 88 bytes, os_memory.o(i.os_memheap_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = os_memheap_add &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_unlock
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_lock
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_print
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_heap_add
</UL>

<P><STRONG><a name="[6cb]"></a>os_memheap_aligned_alloc</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, os_memory.o(i.os_memheap_aligned_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = os_memheap_aligned_alloc &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_aligned_malloc
</UL>

<P><STRONG><a name="[6cf]"></a>os_memheap_alloc</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, os_memory.o(i.os_memheap_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = os_memheap_alloc &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_malloc
</UL>

<P><STRONG><a name="[724]"></a>os_memheap_check</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, os_memory.o(i.os_memheap_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = os_memheap_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memory_check
</UL>

<P><STRONG><a name="[6f1]"></a>os_memheap_free</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, os_memory.o(i.os_memheap_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = os_memheap_free &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
</UL>

<P><STRONG><a name="[725]"></a>os_memheap_info</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, os_memory.o(i.os_memheap_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = os_memheap_info &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_memheap_show
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memory_info
</UL>

<P><STRONG><a name="[726]"></a>os_memheap_init</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, os_memory.o(i.os_memheap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = os_memheap_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_unlock
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_lock
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_print
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_heap_init
</UL>

<P><STRONG><a name="[727]"></a>os_memory_check</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, os_memory.o(i.os_memory_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = os_memory_check &rArr; os_memheap_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memheap_check
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_memcheck
</UL>

<P><STRONG><a name="[728]"></a>os_memory_info</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, os_memory.o(i.os_memory_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = os_memory_info &rArr; os_memheap_info &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memheap_info
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_memshow
</UL>

<P><STRONG><a name="[455]"></a>os_mp_alloc</STRONG> (Thumb, 488 bytes, Stack size 40 bytes, os_mem_pool.o(i.os_mp_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = os_mp_alloc &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_switch
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_get
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_schedule_locked
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_disabled
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_active
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_exit_check
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_enter_check
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_block_task
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_audio_player_write
</UL>

<P><STRONG><a name="[451]"></a>os_mp_create</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, os_mem_pool.o(i.os_mp_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = os_mp_create &rArr; _k_mp_add_resourcelist &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_schedule_locked
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_disabled
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_active
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_malloc
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mp_init
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mp_add_resourcelist
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_audio_player_init
</UL>

<P><STRONG><a name="[44e]"></a>os_mp_destroy</STRONG> (Thumb, 366 bytes, Stack size 16 bytes, os_mem_pool.o(i.os_mp_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = os_mp_destroy &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_switch
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_schedule_locked
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_disabled
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_active
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_unlock
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_lock
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_exit_check
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_enter_check
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_cancle_all_blocked_task
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_audio_player_deinit
</UL>

<P><STRONG><a name="[44d]"></a>os_mp_free</STRONG> (Thumb, 384 bytes, Stack size 24 bytes, os_mem_pool.o(i.os_mp_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = os_mp_free &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_switch
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_exit_check
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_enter_check
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_unblock_task
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_audio_player_callback
</UL>

<P><STRONG><a name="[5f1]"></a>os_mq_create</STRONG> (Thumb, 368 bytes, Stack size 56 bytes, os_mq.o(i.os_mq_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = os_mq_create &rArr; _k_mq_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_schedule_locked
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_disabled
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_active
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_malloc
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_unlock
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_lock
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_aligned_malloc
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_print
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_add_tail
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mq_init
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_create
</UL>

<P><STRONG><a name="[673]"></a>os_mq_destroy</STRONG> (Thumb, 380 bytes, Stack size 16 bytes, os_mq.o(i.os_mq_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = os_mq_destroy &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_switch
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_schedule_locked
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_disabled
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_active
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_unlock
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_lock
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_exit_check
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_enter_check
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_cancle_all_blocked_task
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_mq_destroy
</UL>

<P><STRONG><a name="[6b1]"></a>os_mq_init</STRONG> (Thumb, 376 bytes, Stack size 72 bytes, os_mq.o(i.os_mq_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = os_mq_init &rArr; _k_mq_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_active
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_unlock
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_lock
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_print
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_del
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_add_tail
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mq_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_message_queue_init
</UL>

<P><STRONG><a name="[672]"></a>os_mq_recv</STRONG> (Thumb, 844 bytes, Stack size 64 bytes, os_mq.o(i.os_mq_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = os_mq_recv &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_switch
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_schedule_locked
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_disabled
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_active
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_print
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_exit_check
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_enter_check
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_unblock_task
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_block_task
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_empty
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mq_release_free_msg
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mq_get_msg_from_queue
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_mq_destroy
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_recvfrom
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_publish
</UL>

<P><STRONG><a name="[68d]"></a>os_mq_send</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, os_mq.o(i.os_mq_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = os_mq_send &rArr; _k_mq_send &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mq_send
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_upload_data_task_func
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_wifi_netconn_data_recv_notice
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_publish
</UL>

<P><STRONG><a name="[72d]"></a>os_mq_show</STRONG> (Thumb, 172 bytes, Stack size 96 bytes, os_mq.o(i.os_mq_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = os_mq_show &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_exit_check
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_enter_check
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_iter_show_blocked_task
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_len
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_mq_info
</UL>

<P><STRONG><a name="[534]"></a>os_mutex_create</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, os_mutex.o(i.os_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = os_mutex_create &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_schedule_locked
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_disabled
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_active
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_malloc
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_unlock
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_lock
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_print
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_add_tail
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mutex_init
</UL>
<BR>[Called By]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aht10_init
</UL>

<P><STRONG><a name="[54e]"></a>os_mutex_deinit</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, os_mutex.o(i.os_mutex_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = os_mutex_deinit &rArr; _k_mutex_deinit &rArr; os_spin_unlock &rArr; os_schedule_unlock &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_active
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mutex_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_init
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v_fat_deinit
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_init
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_deinit
</UL>

<P><STRONG><a name="[628]"></a>os_mutex_destroy</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, os_mutex.o(i.os_mutex_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = os_mutex_destroy &rArr; _k_mutex_deinit &rArr; os_spin_unlock &rArr; os_schedule_unlock &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_schedule_locked
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_disabled
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_active
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mutex_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_del_syncobj
</UL>

<P><STRONG><a name="[55e]"></a>os_mutex_init</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, os_mutex.o(i.os_mutex_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = os_mutex_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_active
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_unlock
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_lock
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_print
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_add_tail
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mutex_init
</UL>
<BR>[Called By]<UL><LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_can_register
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_init
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;working_dir_init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_init
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v_fat_init
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfbus_xspi_register
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfbus_spi_attach
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_bus_register
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_i2c_bus_device_register
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_rng_probe
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_crc_probe
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_esp8266_create
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_system_init
</UL>

<P><STRONG><a name="[3e3]"></a>os_mutex_lock</STRONG> (Thumb, 668 bytes, Stack size 32 bytes, os_mutex.o(i.os_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = os_mutex_lock &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_switch
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_schedule_locked
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_disabled
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_active
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_exit_check
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_enter_check
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_block_task
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_add_tail
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mutex_set_owner_priority
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mutex_restore_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_i2c_transfer
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_can_init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_can_deinit
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_lock
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;working_dir_set
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;working_dir_get
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vfs_conjunction_path
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vfs_mkfs_dev_ref
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vfs_mkfs_dev_deref
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vfs_fs_ops_get
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_fdshow
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_to_fp
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_ref_inc
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_ref_dec
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_alloc
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_ref_inc
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_ref_dec
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_check_valid
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_alloc
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_register
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v_fat_find_entry
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v_fat_del_entry
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v_fat_deinit
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v_fat_add_entry
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mount_point_find_and_ref
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mount_point_deref
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_transfer_message
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfbus_transfer
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_configure
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_take_owner
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_transfer
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_send_then_send
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_send_then_recv
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_rng_rand
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_crc_update
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_crc_config
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aht10_temp_fetch_data
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aht10_humi_fetch_data
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_get_char
</UL>

<P><STRONG><a name="[555]"></a>os_mutex_recursive_lock</STRONG> (Thumb, 640 bytes, Stack size 32 bytes, os_mutex.o(i.os_mutex_recursive_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = os_mutex_recursive_lock &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_switch
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_schedule_locked
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_disabled
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_active
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_exit_check
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_enter_check
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_block_task
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_add_tail
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mutex_set_owner_priority
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mutex_restore_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_lock
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_lock
</UL>

<P><STRONG><a name="[556]"></a>os_mutex_recursive_unlock</STRONG> (Thumb, 614 bytes, Stack size 48 bytes, os_mutex.o(i.os_mutex_recursive_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = os_mutex_recursive_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_switch
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_active
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_print
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_exit_check
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_enter_check
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_readyq_remove
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_readyq_put
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_unblock_task
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_empty
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_del
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_add_tail
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mutex_restore_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_unlock
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_unlock
</UL>

<P><STRONG><a name="[730]"></a>os_mutex_show</STRONG> (Thumb, 218 bytes, Stack size 96 bytes, os_mutex.o(i.os_mutex_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = os_mutex_show &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_exit_check
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_enter_check
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_iter_show_blocked_task
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_mutex_info
</UL>

<P><STRONG><a name="[3e4]"></a>os_mutex_unlock</STRONG> (Thumb, 518 bytes, Stack size 40 bytes, os_mutex.o(i.os_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_switch
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_active
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_print
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_exit_check
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_enter_check
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_readyq_remove
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_readyq_put
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_unblock_task
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_empty
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_del
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_add_tail
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mutex_restore_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_i2c_transfer
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_can_init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_can_deinit
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_unlock
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;working_dir_set
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;working_dir_get
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vfs_conjunction_path
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vfs_mkfs_dev_ref
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vfs_mkfs_dev_deref
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vfs_fs_ops_get
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_fdshow
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_to_fp
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_ref_inc
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_ref_dec
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_alloc
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_ref_inc
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_ref_dec
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_check_valid
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_alloc
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_register
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v_fat_find_entry
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v_fat_del_entry
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v_fat_deinit
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v_fat_add_entry
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mount_point_find_and_ref
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mount_point_deref
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_transfer_message
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfbus_transfer
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_configure
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msd_blk_read_block
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_take_owner
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_transfer
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_send_then_send
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_send_then_recv
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_rng_rand
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_crc_update
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_crc_config
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aht10_temp_fetch_data
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aht10_humi_fetch_data
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_get_char
</UL>

<P><STRONG><a name="[64a]"></a>os_pin_attach_irq</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, pin.o(i.os_pin_attach_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = os_pin_attach_irq &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_recv_init
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sensor_irq_init
</UL>

<P><STRONG><a name="[649]"></a>os_pin_detach_irq</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, pin.o(i.os_pin_detach_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = os_pin_detach_irq &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_recv_deinit
</UL>

<P><STRONG><a name="[648]"></a>os_pin_irq_enable</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, pin.o(i.os_pin_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = os_pin_irq_enable &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_recv_init
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_recv_deinit
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sensor_irq_init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sensor_deinit
</UL>

<P><STRONG><a name="[5e1]"></a>os_pin_mode</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, pin.o(i.os_pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = os_pin_mode &rArr; raw_os_pin_mode &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_os_pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es8388_init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_audio_recorder_init
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_spi_device_attach
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfbus_attach
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_i2c_bus_unlock
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_waitack
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readb
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_gpio_init
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_send_init
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_send_deinit
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_recv_init
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_recv_deinit
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sensor_irq_init
</UL>

<P><STRONG><a name="[645]"></a>os_pin_read</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pin.o(i.os_pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = os_pin_read &rArr; raw_os_pin_read &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_os_pin_read
</UL>
<BR>[Called By]<UL><LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_i2c_bus_unlock
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_waitack
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readb
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_rx_pin_callback
</UL>

<P><STRONG><a name="[405]"></a>os_pin_write</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, pin.o(i.os_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = os_pin_write &rArr; raw_os_pin_write &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_os_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es8388_pa_power
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_spi_device_attach
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfbus_transfer
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfbus_attach
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_i2c_bus_unlock
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeb
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_waitack
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_ack_or_nack
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_restart
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readb
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_write_half_word
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_write_data
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_write_cmd
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_switch_on
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_switch_off
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_gpio_init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_frame_flush
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_fill_color
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_display_area
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irk_on_us
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixfer
</UL>

<P><STRONG><a name="[6e6]"></a>os_plug_get</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, plug.o(i.os_plug_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = os_plug_get &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_open
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_open_s
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_serial_init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_uart_init
</UL>

<P><STRONG><a name="[6eb]"></a>os_plug_in</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, plug.o(i.os_plug_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = os_plug_in &rArr; os_sem_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_init
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_register
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_serial_register
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_usart_probe
</UL>

<P><STRONG><a name="[6e4]"></a>os_plug_put</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, plug.o(i.os_plug_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = os_plug_put &rArr; os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_post
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_close
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_serial_deinit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_uart_deinit
</UL>

<P><STRONG><a name="[511]"></a>os_pwm_set_pulse</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, pwm.o(i.os_pwm_set_pulse))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_pwm_set_pulse
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pwm_set
</UL>

<P><STRONG><a name="[737]"></a>os_sai_register</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, sai.o(i.os_sai_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = os_sai_register &rArr; os_device_register &rArr; os_plug_in &rArr; os_sem_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_register
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_sai_probe
</UL>

<P><STRONG><a name="[539]"></a>os_schedule_lock</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, os_sched.o(i.os_schedule_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = os_schedule_lock &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_exit_check
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_enter_check
</UL>
<BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_lock_irqsave
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_lock
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_object_get_by_name
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_set_urc_table
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_list_del
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_list_add
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_get_urc
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_select
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_closesocket
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_recv_tcp
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_selscan
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_event_callback
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_object_get_by_device
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_object_list_del
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_object_list_add
</UL>

<P><STRONG><a name="[53a]"></a>os_schedule_unlock</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, os_sched.o(i.os_schedule_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = os_schedule_unlock &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_switch
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_exit_check
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_enter_check
</UL>
<BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_unlock_irqrestore
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_unlock
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_object_get_by_name
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_set_urc_table
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_list_del
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_list_add
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_get_urc
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_select
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_closesocket
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_recv_tcp
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_selscan
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_event_callback
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_object_get_by_device
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_object_list_del
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_object_list_add
</UL>

<P><STRONG><a name="[497]"></a>os_sem_deinit</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, os_sem.o(i.os_sem_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = os_sem_deinit &rArr; os_spin_unlock &rArr; os_schedule_unlock &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_switch
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_active
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_unlock
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_lock
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_exit_check
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_enter_check
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_cancle_all_blocked_task
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_release
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_release
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_sai_dma_tx_enable
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_sai_dma_rx_enable
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_deinit
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_init
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_deinit
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_select
</UL>

<P><STRONG><a name="[49a]"></a>os_sem_init</STRONG> (Thumb, 286 bytes, Stack size 48 bytes, os_sem.o(i.os_sem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = os_sem_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_active
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_unlock
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_lock
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_print
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_add_tail
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_sem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_register
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_init
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_plug_in
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_core_init
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_serial_register
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_sai_dma_tx_enable
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_sai_dma_rx_enable
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_workqueue_init
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_init
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_init
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_do_sem_init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_system_init
</UL>

<P><STRONG><a name="[359]"></a>os_sem_post</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, os_sem.o(i.os_sem_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_switch
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_exit_check
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_enter_check
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_unblock_task
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_open
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_send_notify
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_register
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_control
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_recv_notify
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_do_output
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_write_block
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_open_s
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_close
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_plug_put
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_for_each
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_find
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_release
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_halt
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_serial_isr_txdone
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_halt
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_serial_init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_serial_deinit
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_TxHalfCpltCallback
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_TxCpltCallback
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_RxCallback
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_realloc
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_free
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_check
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_alloc
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_aligned_alloc
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_resp_handle
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_event_callback
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_rx_ind
</UL>

<P><STRONG><a name="[73b]"></a>os_sem_show</STRONG> (Thumb, 130 bytes, Stack size 56 bytes, os_sem.o(i.os_sem_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = os_sem_show &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_exit_check
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_enter_check
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_iter_show_blocked_task
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_sem_info
</UL>

<P><STRONG><a name="[490]"></a>os_sem_wait</STRONG> (Thumb, 428 bytes, Stack size 24 bytes, os_sem.o(i.os_sem_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = os_sem_wait &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_switch
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_schedule_locked
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_disabled
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_active
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_exit_check
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_enter_check
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_block_task
</UL>
<BR>[Called By]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_open
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_register
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_control
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_async_output_task_entry
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_write_block
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_open_s
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_close
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_for_each
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_find
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_release
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_serial_init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_serial_deinit
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_tx
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_sai_dma_transmit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_sai_dma_receive
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_workqueue_task_entry
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_realloc
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_free
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_check
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_alloc
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_aligned_alloc
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_cmd_valist
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_connect
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_select
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_get_char
</UL>

<P><STRONG><a name="[65c]"></a>os_sensor_cb</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, sensor.o(i.os_sensor_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = os_sensor_cb &rArr; os_device_recv_notify &rArr; os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_recv_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_callback
</UL>

<P><STRONG><a name="[68e]"></a>os_set_errno</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, os_task.o(i.os_set_errno))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = os_set_errno &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_active
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_exit_check
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_enter_check
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_write
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_unlink
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_statfs
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_stat
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_rename
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_readdir
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_read
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_opendir
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_open
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mkfs
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mkdir
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_closedir
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_close
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_chdir
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_transfer_message
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_transfer
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_recvfrom_udp
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
</UL>

<P><STRONG><a name="[73d]"></a>os_sfbus_attach</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, sfbus.o(i.os_sfbus_attach))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = os_sfbus_attach &rArr; os_sfbus_spi_attach &rArr; os_hw_spi_device_attach &rArr; os_spi_bus_attach_device &rArr; os_spidev_device_init &rArr; os_device_register &rArr; os_plug_in &rArr; os_sem_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_write
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_mode
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_open_s
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_find
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfbus_spi_attach
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_init
</UL>

<P><STRONG><a name="[73f]"></a>os_sfbus_transfer</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, sfbus.o(i.os_sfbus_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = os_sfbus_transfer &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_write
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_write_page
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_read_page
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_erase_block
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_unlock_blocks
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_read_status
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_read_sfdp
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_read_id
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_dummy
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic_qer
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic_enter_mode_444
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic_enter_4bytes_addressing
</UL>

<P><STRONG><a name="[740]"></a>os_sfbus_xspi_register</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, sfbus.o(i.os_sfbus_xspi_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = os_sfbus_xspi_register &rArr; os_device_register &rArr; os_plug_in &rArr; os_sem_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_register
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_init
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_qspi_bus_probe
</UL>

<P><STRONG><a name="[742]"></a>os_sfdp_basic_init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, sfdp_basic.o(i.os_sfdp_basic_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = os_sfdp_basic_init &rArr; os_sfdp_decode_basic_qer &rArr; os_sfbus_transfer &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic_qer
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic_enter_mode_444
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic_enter_mode_044
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic_enter_4bytes_addressing
</UL>
<BR>[Called By]<UL><LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_init_sflash
</UL>

<P><STRONG><a name="[747]"></a>os_sfdp_decode</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, sfdp.o(i.os_sfdp_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = os_sfdp_decode &rArr; os_sfdp_decode_basic &rArr; os_sfdp_decode_basic_read &rArr; os_sfdp_decode_basic_read_444 &rArr; os_sfdp_append_sflash_info &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_aligned_malloc
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_find_flash_info_by_sfdp
</UL>

<P><STRONG><a name="[748]"></a>os_sfdp_decode_basic</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, sfdp_basic.o(i.os_sfdp_decode_basic))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = os_sfdp_decode_basic &rArr; os_sfdp_decode_basic_read &rArr; os_sfdp_decode_basic_read_444 &rArr; os_sfdp_append_sflash_info &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic_write
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic_status_busy
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic_read
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic_erase
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic_capacity
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic_addr_size
</UL>
<BR>[Called By]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode
</UL>

<P><STRONG><a name="[758]"></a>os_sfdp_init_sflash</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, sfdp.o(i.os_sfdp_init_sflash))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = os_sfdp_init_sflash &rArr; os_sfdp_basic_init &rArr; os_sfdp_decode_basic_qer &rArr; os_sfbus_transfer &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_basic_init
</UL>
<BR>[Called By]<UL><LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_init
</UL>

<P><STRONG><a name="[759]"></a>os_sflash_configure</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, sfbus.o(i.os_sflash_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = os_sflash_configure &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_init
</UL>

<P><STRONG><a name="[75b]"></a>os_sflash_erase_block</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, sflash.o(i.os_sflash_erase_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = os_sflash_erase_block &rArr; os_sflash_wait_busy &rArr; os_sflash_read_status &rArr; os_sfbus_transfer &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfbus_transfer
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_wait_busy
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_fal_erase_block
</UL>

<P><STRONG><a name="[761]"></a>os_sflash_init</STRONG> (Thumb, 442 bytes, Stack size 40 bytes, sflash.o(i.os_sflash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = os_sflash_init &rArr; os_sfbus_attach &rArr; os_sfbus_spi_attach &rArr; os_hw_spi_device_attach &rArr; os_spi_bus_attach_device &rArr; os_spidev_device_init &rArr; os_device_register &rArr; os_plug_in &rArr; os_sem_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_init_sflash
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_configure
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfbus_attach
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_unlock_blocks
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_read_id
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_prepare_cmds
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_find_flash_info_by_sfdp
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_find_flash_info_by_id
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sflash_init
</UL>

<P><STRONG><a name="[75d]"></a>os_sflash_read_page</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, sflash.o(i.os_sflash_read_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = os_sflash_read_page &rArr; os_sfbus_transfer &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfbus_transfer
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_fal_read_page
</UL>

<P><STRONG><a name="[75e]"></a>os_sflash_write_page</STRONG> (Thumb, 162 bytes, Stack size 64 bytes, sflash.o(i.os_sflash_write_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = os_sflash_write_page &rArr; os_sflash_wait_busy &rArr; os_sflash_read_status &rArr; os_sfbus_transfer &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfbus_transfer
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_wait_busy
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_fal_write_page
</UL>

<P><STRONG><a name="[4f8]"></a>os_snprintf</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, os_util.o(i.os_snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = os_snprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vfs_conjunction_path
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_opendir
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_unlink
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_statfs
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_stat
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_rename
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_open
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_mount
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v_fat_init
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_move
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_pin_register
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_print
</UL>

<P><STRONG><a name="[70f]"></a>os_spi_bus_attach_device</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, spi_core.o(i.os_spi_bus_attach_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = os_spi_bus_attach_device &rArr; os_spidev_device_init &rArr; os_device_register &rArr; os_plug_in &rArr; os_sem_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_open_s
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spidev_device_init
</UL>
<BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_spi_device_attach
</UL>

<P><STRONG><a name="[76a]"></a>os_spi_bus_device_init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, spi_dev.o(i.os_spi_bus_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = os_spi_bus_device_init &rArr; os_device_register &rArr; os_plug_in &rArr; os_sem_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_register
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_bus_register
</UL>

<P><STRONG><a name="[76b]"></a>os_spi_bus_register</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, spi_core.o(i.os_spi_bus_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = os_spi_bus_register &rArr; os_spi_bus_device_init &rArr; os_device_register &rArr; os_plug_in &rArr; os_sem_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_init
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_bus_device_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_probe
</UL>

<P><STRONG><a name="[6a3]"></a>os_spi_configure</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, spi_core.o(i.os_spi_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = os_spi_configure &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfbus_spi_configure
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msd_blk_init
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_hw_config
</UL>

<P><STRONG><a name="[6a4]"></a>os_spi_release</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, spi_core.o(i.os_spi_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = os_spi_release &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msd_sdhc_blk_write_block
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msd_sdhc_blk_read_block
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msd_blk_write_block
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msd_blk_read_block
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msd_blk_init
</UL>

<P><STRONG><a name="[699]"></a>os_spi_send_then_recv</STRONG> (Thumb, 298 bytes, Stack size 48 bytes, spi_core.o(i.os_spi_send_then_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = os_spi_send_then_recv &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_read_regs
</UL>

<P><STRONG><a name="[69c]"></a>os_spi_send_then_send</STRONG> (Thumb, 298 bytes, Stack size 48 bytes, spi_core.o(i.os_spi_send_then_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = os_spi_send_then_send &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_write_reg
</UL>

<P><STRONG><a name="[6a5]"></a>os_spi_take</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, spi_core.o(i.os_spi_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = os_spi_take &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msd_sdhc_blk_write_block
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msd_sdhc_blk_read_block
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msd_blk_write_block
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msd_blk_read_block
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msd_blk_init
</UL>

<P><STRONG><a name="[526]"></a>os_spi_transfer</STRONG> (Thumb, 252 bytes, Stack size 48 bytes, spi_core.o(i.os_spi_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = os_spi_transfer &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spidev_device_write
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spidev_device_read
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spidev_device_control
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_write
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_read
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_send
</UL>

<P><STRONG><a name="[76d]"></a>os_spi_transfer_message</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, spi_core.o(i.os_spi_transfer_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = os_spi_transfer_message &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfbus_spi_transfer
</UL>

<P><STRONG><a name="[769]"></a>os_spidev_device_init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, spi_dev.o(i.os_spidev_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = os_spidev_device_init &rArr; os_device_register &rArr; os_plug_in &rArr; os_sem_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_register
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_bus_attach_device
</UL>

<P><STRONG><a name="[4ab]"></a>os_spin_lock</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, os_spinlock.o(i.os_spin_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = os_spin_lock &rArr; os_schedule_lock &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_schedule_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mp_destroy
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_init
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_init
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_destroy
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_create
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_init
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_create
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_deinit
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mb_init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_mb_info
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_event_info
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_init
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_deinit
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_mutex_info
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mutex_deinit
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_init
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_destroy
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_create
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_mq_info
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_memheap_show
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memheap_init
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memheap_add
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_mempool_info
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mp_add_resourcelist
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_task_info
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_task_exit
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_sem_info
</UL>

<P><STRONG><a name="[4f1]"></a>os_spin_lock_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, os_spinlock.o(i.os_spin_lock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = os_spin_lock_init &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_init
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbb_do_init
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_workqueue_init
</UL>

<P><STRONG><a name="[4f3]"></a>os_spin_lock_irqsave</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, os_spinlock.o(i.os_spin_lock_irqsave))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = os_spin_lock_irqsave &rArr; os_schedule_lock &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_schedule_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_lock
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbb_blk_get
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbb_blk_free
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbb_blk_alloc
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_workqueue_task_entry
</UL>

<P><STRONG><a name="[4ac]"></a>os_spin_unlock</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, os_spinlock.o(i.os_spin_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = os_spin_unlock &rArr; os_schedule_unlock &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_schedule_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mp_destroy
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_init
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_init
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_destroy
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_create
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_init
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_create
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_deinit
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mb_init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_mb_info
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_event_info
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_init
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_deinit
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_mutex_info
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mutex_deinit
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_init
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_destroy
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_create
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_mq_info
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_memheap_show
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memheap_init
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memheap_add
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_mempool_info
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mp_add_resourcelist
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_task_info
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_task_exit
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_sem_info
</UL>

<P><STRONG><a name="[4f5]"></a>os_spin_unlock_irqrestore</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, os_spinlock.o(i.os_spin_unlock_irqrestore))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = os_spin_unlock_irqrestore &rArr; os_schedule_unlock &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_schedule_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_unlock
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbb_blk_get
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbb_blk_free
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbb_blk_alloc
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_workqueue_task_entry
</UL>

<P><STRONG><a name="[703]"></a>os_sys_heap_add</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, os_memory.o(i.os_sys_heap_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = os_sys_heap_add &rArr; os_memheap_add &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memheap_add
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_board_init
</UL>

<P><STRONG><a name="[702]"></a>os_sys_heap_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, os_memory.o(i.os_sys_heap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = os_sys_heap_init &rArr; os_memheap_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_print
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memheap_init
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_board_init
</UL>

<P><STRONG><a name="[481]"></a>os_task_create</STRONG> (Thumb, 378 bytes, Stack size 48 bytes, os_task.o(i.os_task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = os_task_create &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_schedule_locked
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_disabled
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_active
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_malloc
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_unlock
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_lock
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_aligned_malloc
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_print
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_add_tail
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_task_init
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_upload_cycle_start
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_start
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_init
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dectect_task_create
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_application_init
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_init
</UL>

<P><STRONG><a name="[54c]"></a>os_task_destroy</STRONG> (Thumb, 564 bytes, Stack size 32 bytes, os_task.o(i.os_task_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = os_task_destroy &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_switch
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_schedule_locked
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_disabled
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_active
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_unlock
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_lock
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_exit_check
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_enter_check
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_empty
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_del
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_add_tail
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_wakeup_recycle_task
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_task_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_upload_data_task_func
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_deinit
</UL>

<P><STRONG><a name="[4f2]"></a>os_task_init</STRONG> (Thumb, 390 bytes, Stack size 72 bytes, os_task.o(i.os_task_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = os_task_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_active
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_unlock
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_lock
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_print
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_add_tail
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_task_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_workqueue_init
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_idle_task_init
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_timer_module_init
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_recycle_task_init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_system_init
</UL>

<P><STRONG><a name="[3db]"></a>os_task_msleep</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, os_task.o(i.os_task_msleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = os_task_msleep &rArr; os_task_tsleep &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_from_ms
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_tsleep
</UL>
<BR>[Called By]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_write
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es8388_init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_audio_recorder_init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_audio_player_deinit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_upload_data_task_func
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_init
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_gpio_init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_scan_info
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_sendto
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_send
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_test
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTYield
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_end
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_entry
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_init
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aht10_init
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_connect_console
</UL>

<P><STRONG><a name="[4da]"></a>os_task_name</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, os_task.o(i.os_task_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = os_task_name &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_task_stack_check
</UL>

<P><STRONG><a name="[6cc]"></a>os_task_self</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_task.o(i.os_task_self))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_arch_fault_exception
</UL>

<P><STRONG><a name="[76f]"></a>os_task_show</STRONG> (Thumb, 316 bytes, Stack size 88 bytes, os_task.o(i.os_task_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = os_task_show &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_stack_max_used
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_current_task_sp
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ffs
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_exit_check
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_enter_check
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_task_info
</UL>

<P><STRONG><a name="[4d9]"></a>os_task_stack_is_overflow</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, arch_task.o(i.os_task_stack_is_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = os_task_stack_is_overflow &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_task_stack_check
</UL>

<P><STRONG><a name="[482]"></a>os_task_startup</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, os_task.o(i.os_task_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = os_task_startup &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_switch
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_exit_check
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_enter_check
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_readyq_put
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_upload_cycle_start
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_start
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_init
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dectect_task_create
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_workqueue_init
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_idle_task_init
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_timer_module_init
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_recycle_task_init
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_application_init
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_startup
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_system_init
</UL>

<P><STRONG><a name="[232]"></a>os_task_switch_notify</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_task.o(i.os_task_switch_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = os_task_switch_notify &rArr; _k_task_stack_check &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_task_stack_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[76e]"></a>os_task_tsleep</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, os_task.o(i.os_task_tsleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = os_task_tsleep &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_switch
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_schedule_locked
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_disabled
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_active
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_readyq_move_tail
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_exit_check
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_enter_check
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tickq_put
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_readyq_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_msleep
</UL>

<P><STRONG><a name="[417]"></a>os_tick_from_ms</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, os_clock.o(i.os_tick_from_ms))
<BR><BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_msleep
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msd_blk_init
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wait_token
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wait_ready
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_cmd
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_set_ipdinofo
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_get_mode
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_disconnect_ap
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_set_dnsserver
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_ping
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_firmware_version
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_dnsserver
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_at_test
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_at_init
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_connect
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_select
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_recvfrom_udp
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_recv_tcp
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCountdownMS
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneos_write
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneos_read
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_write_tcp
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_read_tcp
</UL>

<P><STRONG><a name="[33e]"></a>os_tick_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_clock.o(i.os_tick_get))
<BR><BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mp_alloc
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clocksource_gettime
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_formater
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_timeout
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msd_blk_init
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wait_token
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wait_ready
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_cmd
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmAEventCallback
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_print
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_timer_info
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRelease
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneos_write
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneos_read
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeOutState
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCheckForTimeOut
</UL>

<P><STRONG><a name="[4]"></a>os_tick_handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drv_common.o(i.os_tick_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = os_tick_handler &rArr; os_tick_increase &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clocksource_update
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_increase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hrtimer.o(.data)
</UL>
<P><STRONG><a name="[773]"></a>os_tick_increase</STRONG> (Thumb, 390 bytes, Stack size 24 bytes, os_clock.o(i.os_tick_increase))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = os_tick_increase &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_switch
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_timer_need_handle
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_readyq_move_tail
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_move_timer_list_one_step
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_exit_check
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_enter_check
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_del
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tickq_remove
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_readyq_put
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_handler
</UL>

<P><STRONG><a name="[41b]"></a>os_timer_create</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, os_timer.o(i.os_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = os_timer_create &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_schedule_locked
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_disabled
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_active
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_malloc
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_print
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_exit_check
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_enter_check
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_do_init
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_add_to_list
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
</UL>

<P><STRONG><a name="[41c]"></a>os_timer_destroy</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, os_timer.o(i.os_timer_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = os_timer_destroy &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_schedule_locked
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_disabled
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_active
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_exit_check
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_enter_check
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRelease
</UL>

<P><STRONG><a name="[659]"></a>os_timer_init</STRONG> (Thumb, 236 bytes, Stack size 56 bytes, os_timer.o(i.os_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = os_timer_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_unlock
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_lock
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_print
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_do_init
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_add_to_list
</UL>
<BR>[Called By]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_timer_init
</UL>

<P><STRONG><a name="[415]"></a>os_timer_is_active</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, os_timer.o(i.os_timer_is_active))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = os_timer_is_active &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_exit_check
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_enter_check
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCheckForTimeOut
</UL>

<P><STRONG><a name="[41d]"></a>os_timer_set_timeout_ticks</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, os_timer.o(i.os_timer_set_timeout_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = os_timer_set_timeout_ticks &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_exit_check
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_enter_check
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeOutState
</UL>

<P><STRONG><a name="[41e]"></a>os_timer_start</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, os_timer.o(i.os_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = os_timer_start &rArr; _k_timer_activate &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_exit_check
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_enter_check
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_deactivate
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_activate
</UL>
<BR>[Called By]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_timer_init
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeOutState
</UL>

<P><STRONG><a name="[416]"></a>os_timer_stop</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, os_timer.o(i.os_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = os_timer_stop &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_exit_check
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_enter_check
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_deactivate
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRelease
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeOutState
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCheckForTimeOut
</UL>

<P><STRONG><a name="[5c1]"></a>os_vsnprintf</STRONG> (Thumb, 910 bytes, Stack size 96 bytes, os_util.o(i.os_vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_atoi
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_snprintf
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_formater
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_print
</UL>

<P><STRONG><a name="[4ee]"></a>os_workqueue_init</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, os_workqueue.o(i.os_workqueue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = os_workqueue_init &rArr; _k_workqueue_init &rArr; os_task_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_active
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_workqueue_init
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_work_sys_workqueue_init
</UL>

<P><STRONG><a name="[731]"></a>raw_os_pin_mode</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, pin.o(i.raw_os_pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = raw_os_pin_mode &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_mode
</UL>

<P><STRONG><a name="[732]"></a>raw_os_pin_read</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, pin.o(i.raw_os_pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = raw_os_pin_read &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_read
</UL>

<P><STRONG><a name="[733]"></a>raw_os_pin_write</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, pin.o(i.raw_os_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = raw_os_pin_write &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_write
</UL>

<P><STRONG><a name="[525]"></a>rb_ring_buff_data_len</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ring_buff.o(i.rb_ring_buff_data_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = rb_ring_buff_data_len &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_ring_buff_state
</UL>
<BR>[Called By]<UL><LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_ring_buff_space_len
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_ring_buff_get
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_serial_isr_txdone
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_tx
</UL>

<P><STRONG><a name="[524]"></a>rb_ring_buff_get</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, ring_buff.o(i.rb_ring_buff_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = rb_ring_buff_get &rArr; rb_ring_buff_data_len &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_ring_buff_data_len
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_serial_isr_txdone
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_tx
</UL>

<P><STRONG><a name="[73c]"></a>rb_ring_buff_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ring_buff.o(i.rb_ring_buff_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = rb_ring_buff_init &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_serial_init
</UL>

<P><STRONG><a name="[523]"></a>rb_ring_buff_put</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, ring_buff.o(i.rb_ring_buff_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = rb_ring_buff_put &rArr; rb_ring_buff_space_len &rArr; rb_ring_buff_data_len &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_ring_buff_space_len
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_serial_isr_txdone
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_tx
</UL>

<P><STRONG><a name="[778]"></a>rb_ring_buff_space_len</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ring_buff.o(i.rb_ring_buff_space_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = rb_ring_buff_space_len &rArr; rb_ring_buff_data_len &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_ring_buff_data_len
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_ring_buff_put
</UL>

<P><STRONG><a name="[5bb]"></a>rbb_blk_alloc</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, ring_blk_buff.o(i.rbb_blk_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = rbb_blk_alloc &rArr; os_spin_unlock_irqrestore &rArr; os_schedule_unlock &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_unlock_irqrestore
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_lock_irqsave
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbb_find_empty_blk_in_set
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_empty
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_add_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_do_output
</UL>

<P><STRONG><a name="[5b4]"></a>rbb_blk_free</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, ring_blk_buff.o(i.rbb_blk_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = rbb_blk_free &rArr; os_spin_unlock_irqrestore &rArr; os_schedule_unlock &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_unlock_irqrestore
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_lock_irqsave
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_async_output_task_entry
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_async_output
</UL>

<P><STRONG><a name="[5b2]"></a>rbb_blk_get</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ring_blk_buff.o(i.rbb_blk_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = rbb_blk_get &rArr; os_spin_unlock_irqrestore &rArr; os_schedule_unlock &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_unlock_irqrestore
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_lock_irqsave
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_async_output_task_entry
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_async_output
</UL>

<P><STRONG><a name="[5bc]"></a>rbb_blk_put</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ring_blk_buff.o(i.rbb_blk_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rbb_blk_put &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_do_output
</UL>

<P><STRONG><a name="[5c7]"></a>rbb_create</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, ring_blk_buff.o(i.rbb_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = rbb_create &rArr; rbb_do_init &rArr; os_spin_lock_init &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_malloc
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbb_do_init
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_init
</UL>

<P><STRONG><a name="[5c8]"></a>rbb_destroy</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ring_blk_buff.o(i.rbb_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = rbb_destroy &rArr; os_free &rArr; os_memheap_free &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_init
</UL>

<P><STRONG><a name="[3b8]"></a>readChar</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mqttpacket.o(i.readChar))
<BR><BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_suback
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_connack
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_ack
</UL>

<P><STRONG><a name="[3ba]"></a>readInt</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, mqttpacket.o(i.readInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = readInt
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMQTTLenString
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_suback
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_ack
</UL>

<P><STRONG><a name="[3bc]"></a>readMQTTLenString</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, mqttpacket.o(i.readMQTTLenString))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = readMQTTLenString &rArr; readInt
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readInt
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
</UL>

<P><STRONG><a name="[77f]"></a>readdir</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, dirent.o(i.readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = readdir &rArr; vfs_readdir &rArr; dp_ref_inc &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_readdir
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_do_auto_complete_path
</UL>

<P><STRONG><a name="[69f]"></a>recv</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, socket.o(i.recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = recv &rArr; mo_recv &rArr; mo_recvfrom &rArr; module_recv_tcp &rArr; mo_netconn_recvfrom &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_get_default
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneos_read
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_read_tcp
</UL>

<P><STRONG><a name="[520]"></a>ring_count</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, soft_dma.o(i.ring_count))
<BR><BR>[Called By]<UL><LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_serial_isr_rxdone
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_rx
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_irq_callback
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_circular_updata_buffer
</UL>

<P><STRONG><a name="[7ab]"></a>rotl</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, hmac_sha1.o(i.rotl))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rotl
</UL>
<BR>[Called By]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1
</UL>

<P><STRONG><a name="[ab]"></a>sai_control</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, sai.o(i.sai_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = sai_control &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sai.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>sai_read</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, sai.o(i.sai_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = sai_read &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sai.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>sai_write</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, sai.o(i.sai_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = sai_write &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sai.o(.constdata)
</UL>
<P><STRONG><a name="[69e]"></a>select</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, socket.o(i.select))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = select &rArr; mo_select &rArr; mo_selscan &rArr; mo_get_socket &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_select
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_write_tcp
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_read_tcp
</UL>

<P><STRONG><a name="[6a1]"></a>send</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, socket.o(i.send))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = send &rArr; mo_send &rArr; mo_sendto &rArr; module_udp_sendto &rArr; mo_netconn_sendto &rArr; get_netconn_ops &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_get_default
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_send
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneos_write
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_write_tcp
</UL>

<P><STRONG><a name="[6c5]"></a>setsockopt</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, socket.o(i.setsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = setsockopt &rArr; mo_setsockopt &rArr; mo_get_socket &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_get_default
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_setsockopt
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneos_write
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneos_read
</UL>

<P><STRONG><a name="[780]"></a>sh_auto_complete</STRONG> (Thumb, 222 bytes, Stack size 56 bytes, shell_process.o(i.sh_auto_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = sh_auto_complete &rArr; sh_auto_complete_path &rArr; sh_do_auto_complete_path &rArr; opendir &rArr; vfs_opendir &rArr; do_opendir &rArr; vfs_mount_point_find_and_ref &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_exec
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_get_cmd_table
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_string_same_part_length
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_auto_complete_path
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_get_prompt
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_handle_tab_key
</UL>

<P><STRONG><a name="[795]"></a>sh_do_exec</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, shell_process.o(i.sh_do_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = sh_do_exec &rArr; sh_do_exec_cmd &rArr; sh_split &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_do_exec_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_exec
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_handle_enter_key
</UL>

<P><STRONG><a name="[799]"></a>sh_do_set_prompt</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, shell_main.o(i.sh_do_set_prompt))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = sh_do_set_prompt &rArr; os_malloc &rArr; os_memheap_alloc &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_malloc
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_set_prompt
</UL>

<P><STRONG><a name="[781]"></a>sh_exec</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, shell_process.o(i.sh_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = sh_exec &rArr; sh_do_exec &rArr; sh_do_exec_cmd &rArr; sh_split &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_malloc
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_do_exec
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_auto_complete
</UL>

<P><STRONG><a name="[184]"></a>sh_fdshow</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, vfs_fd.o(i.sh_fdshow))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = sh_fdshow &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vfs_fd.o(FSymTab)
</UL>
<P><STRONG><a name="[783]"></a>sh_get_cmd_table</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, shell_symbol.o(i.sh_get_cmd_table))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_help
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_get_cmd_func
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_auto_complete
</UL>

<P><STRONG><a name="[785]"></a>sh_get_prompt</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, shell_main.o(i.sh_get_prompt))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = sh_get_prompt &rArr; getcwd &rArr; vfs_getcwd &rArr; working_dir_get &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_auto_complete
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_task_entry
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_print_history
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_handle_enter_key
</UL>

<P><STRONG><a name="[7aa]"></a>sh_init_cmd_table</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, shell_symbol.o(i.sh_init_cmd_table))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_system_init
</UL>

<P><STRONG><a name="[174]"></a>sh_list_device</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, device.o(i.sh_list_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = sh_list_device &rArr; os_device_for_each &rArr; os_sem_wait &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_for_each
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(FSymTab)
</UL>
<P><STRONG><a name="[18b]"></a>sh_memcheck</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, os_memory.o(i.sh_memcheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = sh_memcheck &rArr; os_memory_check &rArr; os_memheap_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memory_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_memory.o(FSymTab)
</UL>
<P><STRONG><a name="[189]"></a>sh_memheap_show</STRONG> (Thumb, 126 bytes, Stack size 56 bytes, os_memory.o(i.sh_memheap_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = sh_memheap_show &rArr; os_spin_unlock &rArr; os_schedule_unlock &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_unlock
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_lock
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memheap_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_memory.o(FSymTab)
</UL>
<P><STRONG><a name="[18a]"></a>sh_memshow</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, os_memory.o(i.sh_memshow))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = sh_memshow &rArr; os_memory_info &rArr; os_memheap_info &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memory_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_memory.o(FSymTab)
</UL>
<P><STRONG><a name="[186]"></a>sh_show_event_info</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, os_event.o(i.sh_show_event_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = sh_show_event_info &rArr; os_event_show &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_unlock
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_lock
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_show
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_event.o(FSymTab)
</UL>
<P><STRONG><a name="[188]"></a>sh_show_mempool_info</STRONG> (Thumb, 480 bytes, Stack size 64 bytes, os_mem_pool.o(i.sh_show_mempool_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = sh_show_mempool_info &rArr; os_spin_unlock &rArr; os_schedule_unlock &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_malloc
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_unlock
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_lock
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_exit_check
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_enter_check
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_show_blocked_task
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_get_blocked_task
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_len
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_mem_pool.o(FSymTab)
</UL>
<P><STRONG><a name="[18d]"></a>sh_show_mutex_info</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, os_mutex.o(i.sh_show_mutex_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = sh_show_mutex_info &rArr; os_mutex_show &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_unlock
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_lock
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_show
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_mutex.o(FSymTab)
</UL>
<P><STRONG><a name="[18e]"></a>sh_show_sem_info</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, os_sem.o(i.sh_show_sem_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = sh_show_sem_info &rArr; os_sem_show &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_unlock
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_lock
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_show
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_sem.o(FSymTab)
</UL>
<P><STRONG><a name="[18f]"></a>sh_show_task_info</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, os_task.o(i.sh_show_task_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = sh_show_task_info &rArr; os_task_show &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_unlock
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_lock
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_show
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_task.o(FSymTab)
</UL>
<P><STRONG><a name="[190]"></a>sh_show_timer_info</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, os_timer.o(i.sh_show_timer_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = sh_show_timer_info &rArr; _k_timer_calc_remain_ticks &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_get
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_exit_check
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_enter_check
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_empty
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_calc_remain_ticks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_timer.o(FSymTab)
</UL>
<P><STRONG><a name="[69d]"></a>socket</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, socket.o(i.socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = socket &rArr; mo_socket &rArr; mo_netconn_destroy &rArr; get_netconn_ops &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_errno
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_get_default
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_network_connect
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_connect_tcp
</UL>

<P><STRONG><a name="[7f1]"></a>soft_dma_deinit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, soft_dma.o(i.soft_dma_deinit))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_uart_deinit
</UL>

<P><STRONG><a name="[7b3]"></a>soft_dma_init</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, soft_dma.o(i.soft_dma_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = soft_dma_init &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_usart_sdma_init
</UL>

<P><STRONG><a name="[7f6]"></a>soft_dma_irq_enable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, soft_dma.o(i.soft_dma_irq_enable))
<BR><BR>[Called By]<UL><LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_usart_sdma_init
</UL>

<P><STRONG><a name="[7b8]"></a>soft_dma_start</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, soft_dma.o(i.soft_dma_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = soft_dma_start &rArr; soft_dma_buffer_init &rArr; soft_dma_normal_buffer_init &rArr; os_dma_malloc_align &rArr; os_aligned_malloc &rArr; os_memheap_aligned_alloc &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_timer_init
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_buffer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_usart_sdma_init
</UL>

<P><STRONG><a name="[7ba]"></a>soft_dma_stop</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, soft_dma.o(i.soft_dma_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = soft_dma_stop &rArr; soft_dma_buffer_deinit &rArr; os_dma_free_align &rArr; os_free &rArr; os_memheap_free &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_timer_deinit
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_buffer_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_usart_sdma_init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_uart_deinit
</UL>

<P><STRONG><a name="[3a2]"></a>soft_dma_timeout_irq</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, soft_dma.o(i.soft_dma_timeout_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = soft_dma_timeout_irq &rArr; soft_dma_irq &rArr; soft_dma_updata_buffer &rArr; soft_dma_normal_updata_buffer &rArr; copy_ring_to_ring &rArr; copy_line_to_ring &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[7bf]"></a>st7789_address_set</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, st7789vw.o(i.st7789_address_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = st7789_address_set &rArr; st7789_write_data &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_write_data
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_frame_flush
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_fill_color
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_display_area
</UL>

<P><STRONG><a name="[7d2]"></a>stm32_flash_erase</STRONG> (Thumb, 424 bytes, Stack size 72 bytes, drv_flash_l4.o(i.stm32_flash_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = stm32_flash_erase &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPage
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBank
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_flash_erase_block
</UL>

<P><STRONG><a name="[7d7]"></a>stm32_flash_read</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, drv_flash_l4.o(i.stm32_flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = stm32_flash_read &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_flash_read_page
</UL>

<P><STRONG><a name="[7d8]"></a>stm32_flash_write</STRONG> (Thumb, 384 bytes, Stack size 88 bytes, drv_flash_l4.o(i.stm32_flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = stm32_flash_write &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_flash_write_page
</UL>

<P><STRONG><a name="[106]"></a>stm32_lptimer_read</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, drv_lptim.o(i.stm32_lptimer_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stm32_lptimer_read
</UL>
<BR>[Calls]<UL><LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_ReadCounter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_lptim.o(.constdata)
</UL>
<P><STRONG><a name="[7e3]"></a>stm32_pwm_register</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, drv_pwm.o(i.stm32_pwm_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = stm32_pwm_register &rArr; os_device_pwm_register &rArr; os_device_register &rArr; os_plug_in &rArr; os_sem_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_mult_shift
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_pwm_register
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_timer_is_32b
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_tim_probe
</UL>

<P><STRONG><a name="[7e4]"></a>stm32_timer_is_32b</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, drv_hwtimer.o(i.stm32_timer_is_32b))
<BR><BR>[Called By]<UL><LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pwm_register
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_tim_probe
</UL>

<P><STRONG><a name="[500]"></a>time</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, time.o(i.time))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = time &rArr; os_device_control &rArr; os_sem_wait &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_open
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_control
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_close
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_find
</UL>
<BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mpu6xxx_polling_get_data
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_fetch_proximity_data
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_fetch_light_data
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_fetch_ir_data
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aht10_temp_fetch_data
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aht10_humi_fetch_data
</UL>

<P><STRONG><a name="[7f5]"></a>uart_calc_byte_timeout_us</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, driver.o(i.uart_calc_byte_timeout_us))
<BR><BR>[Called By]<UL><LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_usart_sdma_init
</UL>

<P><STRONG><a name="[7f7]"></a>usbd_dectect_task_create</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, drv_usbd.o(i.usbd_dectect_task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = usbd_dectect_task_create &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_startup
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_create
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mb_init
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_usbd_probe
</UL>

<P><STRONG><a name="[7f9]"></a>usbd_start</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, drv_usbd.o(i.usbd_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_start &rArr; _Error_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_start_init
</UL>

<P><STRONG><a name="[16b]"></a>usbd_start_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, drv_usbd.o(i.usbd_start_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbd_start_init &rArr; usbd_start &rArr; _Error_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbd.o(.init_call.7.1)
</UL>
<P><STRONG><a name="[787]"></a>vfs_chdir</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, vfs_posix.o(i.vfs_chdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = vfs_chdir &rArr; do_opendir &rArr; vfs_mount_point_find_and_ref &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;working_dir_set
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_ref_inc
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_ref_dec
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_free
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_alloc
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_opendir
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_closedir
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_destroy_absolute_path
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_create_absolute_path
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_cd
</UL>

<P><STRONG><a name="[45e]"></a>vfs_close</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, vfs_posix.o(i.vfs_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = vfs_close &rArr; fd_free &rArr; fd_ref_dec &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_to_fp
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_ref_inc
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_ref_dec
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_free
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_closefile
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_echo
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_copyfile
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cat
</UL>

<P><STRONG><a name="[469]"></a>vfs_closedir</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, vfs_posix.o(i.vfs_closedir))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = vfs_closedir &rArr; dp_free &rArr; dp_ref_dec &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_ref_inc
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_ref_dec
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_free
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_check_valid
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_closedir
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_removedir
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ls
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_copydir
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
</UL>

<P><STRONG><a name="[463]"></a>vfs_create_absolute_path</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, vfs_misc.o(i.vfs_create_absolute_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = vfs_create_absolute_path &rArr; _vfs_conjunction_path &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vfs_normalize_path
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vfs_conjunction_path
</UL>
<BR>[Called By]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_unlink
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_statfs
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_stat
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_rename
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_opendir
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_open
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mkdir
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_chdir
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_removedir
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ls
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_copyfile
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_copydir
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_copy
</UL>

<P><STRONG><a name="[5d4]"></a>vfs_create_rel_mnt_path</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, vfs_misc.o(i.vfs_create_rel_mnt_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = vfs_create_rel_mnt_path &rArr; os_malloc &rArr; os_memheap_alloc &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_malloc
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_get_rel_mnt_path
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_openfile
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_opendir
</UL>

<P><STRONG><a name="[464]"></a>vfs_destroy_absolute_path</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, vfs_misc.o(i.vfs_destroy_absolute_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = vfs_destroy_absolute_path &rArr; os_free &rArr; os_memheap_free &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_unlink
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_statfs
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_stat
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_rename
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_opendir
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_open
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mkdir
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_chdir
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_path_node_destroy
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ls
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_copyfile
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_copydir
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_copy
</UL>

<P><STRONG><a name="[d9]"></a>vfs_fat_closedir</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, vfs_fatfs.o(i.vfs_fat_closedir))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = vfs_fat_closedir &rArr; f_closedir &rArr; unlock_fs &rArr; ff_rel_grant &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v_fat_del_entry
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_result_to_vfs
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vfs_fatfs.o(.constdata)
</UL>
<P><STRONG><a name="[d8]"></a>vfs_fat_opendir</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, vfs_fatfs.o(i.vfs_fat_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = vfs_fat_opendir &rArr; f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; os_device_read_nonblock &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_snprintf
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_malloc
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v_fat_add_entry
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_result_to_vfs
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_get_vol
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vfs_fatfs.o(.constdata)
</UL>
<P><STRONG><a name="[da]"></a>vfs_fat_readdir</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, vfs_fatfs.o(i.vfs_fat_readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = vfs_fat_readdir &rArr; f_readdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; os_device_read_nonblock &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_malloc
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_result_to_vfs
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vfs_fatfs.o(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>vfs_fat_seekdir</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, vfs_fatfs.o(i.vfs_fat_seekdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = vfs_fat_seekdir &rArr; f_seekdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; os_device_read_nonblock &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_result_to_vfs
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vfs_fatfs.o(.constdata)
</UL>
<P><STRONG><a name="[dc]"></a>vfs_fat_telldir</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, vfs_fatfs.o(i.vfs_fat_telldir))
<BR>[Address Reference Count : 1]<UL><LI> vfs_fatfs.o(.constdata)
</UL>
<P><STRONG><a name="[462]"></a>vfs_get_path_lastname</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, vfs_misc.o(i.vfs_get_path_lastname))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vfs_get_path_lastname
</UL>
<BR>[Calls]<UL><LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_move
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_copy
</UL>

<P><STRONG><a name="[5d7]"></a>vfs_get_rel_mnt_path</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, vfs_misc.o(i.vfs_get_rel_mnt_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vfs_get_rel_mnt_path &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_create_rel_mnt_path
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_unlink
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_stat
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_rename
</UL>

<P><STRONG><a name="[633]"></a>vfs_getcwd</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, vfs_posix.o(i.vfs_getcwd))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = vfs_getcwd &rArr; working_dir_get &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;working_dir_get
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_pwd
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_ls
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
</UL>

<P><STRONG><a name="[144]"></a>vfs_init</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, vfs_fs.o(i.vfs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = vfs_init &rArr; working_dir_init &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_init
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;working_dir_init
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_unlock
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_lock
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_table_init
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vfs_fs.o(.init_call.2.1)
</UL>
<P><STRONG><a name="[468]"></a>vfs_mkdir</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, vfs_posix.o(i.vfs_mkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = vfs_mkdir &rArr; do_opendir &rArr; vfs_mount_point_find_and_ref &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_ref_inc
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_ref_dec
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_free
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_alloc
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_opendir
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_closedir
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_destroy_absolute_path
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_create_absolute_path
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_mkdir
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_path_node_create
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_copydir
</UL>

<P><STRONG><a name="[7a7]"></a>vfs_mkfs</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, vfs_fs.o(i.vfs_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = vfs_mkfs &rArr; _vfs_mkfs_dev_ref &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vfs_mkfs_dev_ref
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vfs_mkfs_dev_deref
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vfs_fs_ops_get
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_find
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_mkfs
</UL>

<P><STRONG><a name="[5d0]"></a>vfs_mount_point_deref</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, vfs_fs.o(i.vfs_mount_point_deref))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = vfs_mount_point_deref &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_unlink
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_statfs
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_stat
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_rename
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_openfile
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_opendir
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_closefile
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_closedir
</UL>

<P><STRONG><a name="[5d3]"></a>vfs_mount_point_find_and_ref</STRONG> (Thumb, 340 bytes, Stack size 48 bytes, vfs_fs.o(i.vfs_mount_point_find_and_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = vfs_mount_point_find_and_ref &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_unlink
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_statfs
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_stat
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_rename
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_openfile
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_opendir
</UL>

<P><STRONG><a name="[45c]"></a>vfs_open</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, vfs_posix.o(i.vfs_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = vfs_open &rArr; do_openfile &rArr; vfs_mount_point_find_and_ref &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_to_fp
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_ref_inc
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_ref_dec
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_free
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_alloc
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_openfile
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_destroy_absolute_path
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_create_absolute_path
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_echo
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_copyfile
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cat
</UL>

<P><STRONG><a name="[467]"></a>vfs_opendir</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, vfs_posix.o(i.vfs_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = vfs_opendir &rArr; do_opendir &rArr; vfs_mount_point_find_and_ref &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_ref_inc
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_ref_dec
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_free
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_alloc
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_opendir
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_destroy_absolute_path
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_create_absolute_path
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_removedir
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ls
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_copydir
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
</UL>

<P><STRONG><a name="[45d]"></a>vfs_read</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, vfs_posix.o(i.vfs_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = vfs_read &rArr; fd_to_fp &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_to_fp
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_ref_inc
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_ref_dec
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_readfile
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_copyfile
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cat
</UL>

<P><STRONG><a name="[46a]"></a>vfs_readdir</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, vfs_posix.o(i.vfs_readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = vfs_readdir &rArr; dp_ref_inc &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_ref_inc
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_ref_dec
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_check_valid
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_readdir
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_removedir
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ls
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_copydir
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
</UL>

<P><STRONG><a name="[621]"></a>vfs_register</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, vfs_fs.o(i.vfs_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = vfs_register &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
</UL>

<P><STRONG><a name="[4f9]"></a>vfs_rename</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, vfs_posix.o(i.vfs_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = vfs_rename &rArr; do_rename &rArr; vfs_mount_point_find_and_ref &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_rename
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_destroy_absolute_path
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_create_absolute_path
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_move
</UL>

<P><STRONG><a name="[460]"></a>vfs_stat</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, vfs_posix.o(i.vfs_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = vfs_stat &rArr; do_stat &rArr; vfs_mount_point_find_and_ref &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_stat
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_destroy_absolute_path
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_create_absolute_path
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_removedir
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_remove
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_move
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ls
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_copydir
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_copy
</UL>

<P><STRONG><a name="[472]"></a>vfs_statfs</STRONG> (Thumb, 100 bytes, Stack size 88 bytes, vfs_posix.o(i.vfs_statfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = vfs_statfs &rArr; do_statfs &rArr; vfs_mount_point_find_and_ref &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_statfs
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_stat
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_destroy_absolute_path
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_create_absolute_path
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_df
</UL>

<P><STRONG><a name="[4fa]"></a>vfs_unlink</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, vfs_posix.o(i.vfs_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = vfs_unlink &rArr; do_unlink &rArr; vfs_mount_point_find_and_ref &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_unlink
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_destroy_absolute_path
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_create_absolute_path
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_removedir
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_remove
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_move
</UL>

<P><STRONG><a name="[470]"></a>vfs_write</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, vfs_posix.o(i.vfs_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = vfs_write &rArr; fd_to_fp &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_to_fp
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_ref_inc
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_ref_dec
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writefile
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_echo
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_copyfile
</UL>

<P><STRONG><a name="[3b4]"></a>waitfor</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, mqttclient.o(i.waitfor))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = waitfor &rArr; cycle &rArr; keepalive &rArr; TimerInit &rArr; os_timer_create &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIsExpired
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribeWithResults
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnectWithResults
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
</UL>

<P><STRONG><a name="[807]"></a>working_dir_get</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, vfs_misc.o(i.working_dir_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = working_dir_get &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_getcwd
</UL>

<P><STRONG><a name="[808]"></a>working_dir_init</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, vfs_misc.o(i.working_dir_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = working_dir_init &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_init
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_init
</UL>

<P><STRONG><a name="[800]"></a>working_dir_set</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, vfs_misc.o(i.working_dir_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = working_dir_set &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_chdir
</UL>

<P><STRONG><a name="[3ce]"></a>writeCString</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mqttpacket.o(i.writeCString))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = writeCString &rArr; writeInt
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>

<P><STRONG><a name="[3c9]"></a>writeChar</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mqttpacket.o(i.writeChar))
<BR><BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_zero
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_ack
</UL>

<P><STRONG><a name="[3cb]"></a>writeInt</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mqttpacket.o(i.writeInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = writeInt
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_ack
</UL>

<P><STRONG><a name="[3cf]"></a>writeMQTTString</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, mqttpacket.o(i.writeMQTTString))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = writeMQTTString &rArr; writeCString &rArr; writeInt
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>

<P><STRONG><a name="[36]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[225]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[441]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_upload_data_task_func
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_get_temp
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_read_ambient_light
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aht10_temp_fetch_data
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aht10_humi_fetch_data
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[80c]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[697]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_get_temp
</UL>

<P><STRONG><a name="[80f]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[812]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[816]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[531]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_upload_data_task_func
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_get_temp
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aht10_temp_fetch_data
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aht10_humi_fetch_data
</UL>

<P><STRONG><a name="[814]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[440]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[815]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[6c3]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_upload_data_task_func
</UL>

<P><STRONG><a name="[817]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[530]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_upload_data_task_func
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_get_temp
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aht10_temp_fetch_data
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aht10_humi_fetch_data
</UL>

<P><STRONG><a name="[861]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[544]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_read_ambient_light
</UL>

<P><STRONG><a name="[862]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[863]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[818]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[81b]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[447]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_read_ambient_light
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aht10_temp_fetch_data
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aht10_humi_fetch_data
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
</UL>

<P><STRONG><a name="[819]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[80e]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[811]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[442]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_upload_data_task_func
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[81a]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[536]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_upload_data_task_func
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aht10_temp_fetch_data
</UL>

<P><STRONG><a name="[81c]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[6c4]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_upload_data_task_func
</UL>

<P><STRONG><a name="[81e]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[81f]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[220]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[864]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[865]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[80d]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[1]"></a>__ieee_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, istatus.o(x$fpl$ieeestatus))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[20c]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[210]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[813]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[444]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>

<P><STRONG><a name="[27b]"></a>_scanf_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf1.o(x$fpl$scanf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[271]"></a>_scanf_hex_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _scanf_hex_real &rArr; _scanf_really_hex_real &rArr; __support_ldexp &rArr; __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[270]"></a>_scanf_infnan</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_infnan &rArr; _scanf_really_infnan
</UL>
<BR>[Calls]<UL><LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[820]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[16e]"></a>onenet_upload_cycle_stop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, onenet_process.o(i.onenet_upload_cycle_stop))
<BR>[Address Reference Count : 1]<UL><LI> onenet_process.o(FSymTab)
</UL>
<P><STRONG><a name="[74]"></a>onenet_upload_data_task_func</STRONG> (Thumb, 522 bytes, Stack size 392 bytes, onenet_process.o(i.onenet_upload_data_task_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = onenet_upload_data_task_func &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_destroy
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_send
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_read_nonblock
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_send_ac
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_msleep
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_open_s
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> onenet_process.o(i.onenet_upload_cycle_start)
</UL>
<P><STRONG><a name="[50a]"></a>_os_arch_bus_fault_track</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, arch_exception.o(i._os_arch_bus_fault_track))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _os_arch_bus_fault_track &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_arch_hard_fault_track
</UL>

<P><STRONG><a name="[50b]"></a>_os_arch_hard_fault_track</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, arch_exception.o(i._os_arch_hard_fault_track))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _os_arch_hard_fault_track &rArr; _os_arch_usage_fault_track &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_arch_usage_fault_track
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_arch_mem_manage_fault_track
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_arch_bus_fault_track
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_arch_fault_exception
</UL>

<P><STRONG><a name="[50c]"></a>_os_arch_mem_manage_fault_track</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, arch_exception.o(i._os_arch_mem_manage_fault_track))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _os_arch_mem_manage_fault_track &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_arch_hard_fault_track
</UL>

<P><STRONG><a name="[50d]"></a>_os_arch_usage_fault_track</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, arch_exception.o(i._os_arch_usage_fault_track))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _os_arch_usage_fault_track &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_arch_hard_fault_track
</UL>

<P><STRONG><a name="[97]"></a>_audio_player_control</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, audio_player.o(i._audio_player_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = _audio_player_control &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> audio_player.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>_audio_player_deinit</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, audio_player.o(i._audio_player_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = _audio_player_deinit &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mp_destroy
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_msleep
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> audio_player.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>_audio_player_init</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, audio_player.o(i._audio_player_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = _audio_player_init &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mp_create
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_control
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> audio_player.o(.constdata)
</UL>
<P><STRONG><a name="[96]"></a>_audio_player_write</STRONG> (Thumb, 258 bytes, Stack size 48 bytes, audio_player.o(i._audio_player_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = _audio_player_write &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mp_alloc
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> audio_player.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>_audio_recorder_control</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, audio_recorder.o(i._audio_recorder_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = _audio_recorder_control &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> audio_recorder.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>_audio_recorder_deinit</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, audio_recorder.o(i._audio_recorder_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = _audio_recorder_deinit &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> audio_recorder.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>_audio_recorder_init</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, audio_recorder.o(i._audio_recorder_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = _audio_recorder_init &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_msleep
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> audio_recorder.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>_audio_recorder_read</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, audio_recorder.o(i._audio_recorder_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _audio_recorder_read &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> audio_recorder.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>audio_es8388_data_tx_done</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, es8388.o(i.audio_es8388_data_tx_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = audio_es8388_data_tx_done &rArr; os_device_send_notify &rArr; os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_send_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es8388.o(i.os_hw_audio_player_init)
</UL>
<P><STRONG><a name="[9d]"></a>audio_es8388_player_config</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, es8388.o(i.audio_es8388_player_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = audio_es8388_player_config &rArr; es8388_volume_set &rArr; reg_write &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es8388_volume_set
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_control
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es8388.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>audio_es8388_player_deinit</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, es8388.o(i.audio_es8388_player_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = audio_es8388_player_deinit &rArr; es8388_deinit &rArr; os_device_close &rArr; os_sem_wait &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es8388_deinit
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es8388.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>audio_es8388_player_init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, es8388.o(i.audio_es8388_player_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = audio_es8388_player_init &rArr; es8388_init &rArr; es8388_set_adc_dac_volume &rArr; reg_write &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es8388_init
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_control
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es8388.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>audio_es8388_player_start</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, es8388.o(i.audio_es8388_player_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = audio_es8388_player_start &rArr; es8388_start &rArr; es8388_set_voice_mute &rArr; reg_write &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es8388_start
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_control
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es8388.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>audio_es8388_player_stop</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, es8388.o(i.audio_es8388_player_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = audio_es8388_player_stop &rArr; es8388_stop &rArr; es8388_set_voice_mute &rArr; reg_write &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es8388_stop
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_control
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es8388.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>audio_es8388_recorder_config</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, es8388.o(i.audio_es8388_recorder_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = audio_es8388_recorder_config &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_control
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es8388.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>audio_es8388_recorder_deinit</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, es8388.o(i.audio_es8388_recorder_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = audio_es8388_recorder_deinit &rArr; es8388_deinit &rArr; os_device_close &rArr; os_sem_wait &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es8388_deinit
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es8388.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>audio_es8388_recorder_init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, es8388.o(i.audio_es8388_recorder_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = audio_es8388_recorder_init &rArr; es8388_init &rArr; es8388_set_adc_dac_volume &rArr; reg_write &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es8388_init
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_control
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es8388.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>audio_es8388_recorder_start</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, es8388.o(i.audio_es8388_recorder_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = audio_es8388_recorder_start &rArr; es8388_start &rArr; es8388_set_voice_mute &rArr; reg_write &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es8388_start
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_control
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es8388.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>audio_es8388_recorder_stop</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, es8388.o(i.audio_es8388_recorder_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = audio_es8388_recorder_stop &rArr; es8388_stop &rArr; es8388_set_voice_mute &rArr; reg_write &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es8388_stop
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_control
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es8388.o(.constdata)
</UL>
<P><STRONG><a name="[5e3]"></a>es8388_set_adc_dac_volume</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, es8388_ll.o(i.es8388_set_adc_dac_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = es8388_set_adc_dac_volume &rArr; reg_write &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_write
</UL>
<BR>[Called By]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es8388_init
</UL>

<P><STRONG><a name="[5e5]"></a>reg_read</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, es8388_ll.o(i.reg_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = reg_read &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_i2c_transfer
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es8388_set_voice_mute
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es8388_start
</UL>

<P><STRONG><a name="[5e2]"></a>reg_write</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, es8388_ll.o(i.reg_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = reg_write &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_i2c_transfer
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_msleep
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es8388_set_voice_mute
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es8388_set_adc_dac_volume
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es8388_volume_set
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es8388_stop
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es8388_start
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es8388_init
</UL>

<P><STRONG><a name="[3e5]"></a>MX_CAN1_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, bsp.o(i.MX_CAN1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_CAN1_Init &rArr; HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[3e6]"></a>MX_CRC_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bsp.o(i.MX_CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MX_CRC_Init &rArr; HAL_CRC_Init &rArr; HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[3e7]"></a>MX_DMA_Init</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, bsp.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[3e8]"></a>MX_GPIO_Init</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, bsp.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[3eb]"></a>MX_LPTIM1_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, bsp.o(i.MX_LPTIM1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_LPTIM1_Init &rArr; HAL_LPTIM_Init &rArr; HAL_LPTIM_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_Init
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[3ed]"></a>MX_RNG_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp.o(i.MX_RNG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MX_RNG_Init &rArr; HAL_RNG_Init &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_Init
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[3ee]"></a>MX_RTC_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsp.o(i.MX_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MX_RTC_Init &rArr; HAL_RTC_Init &rArr; RTC_ExitInitMode &rArr; HAL_RTC_WaitForSynchro &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[3ef]"></a>MX_SAI1_Init</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, bsp.o(i.MX_SAI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = MX_SAI1_Init &rArr; HAL_SAI_InitProtocol &rArr; HAL_SAI_Init &rArr; HAL_SAI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_InitProtocol
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[3f0]"></a>MX_SPI1_Init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, bsp.o(i.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[3f1]"></a>MX_SPI2_Init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, bsp.o(i.MX_SPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MX_SPI2_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[3f2]"></a>MX_SPI3_Init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, bsp.o(i.MX_SPI3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MX_SPI3_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[3f3]"></a>MX_TIM15_Init</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, bsp.o(i.MX_TIM15_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_TIM15_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[3f5]"></a>MX_TIM16_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsp.o(i.MX_TIM16_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_TIM16_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[3f6]"></a>MX_TIM17_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsp.o(i.MX_TIM17_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_TIM17_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[3f7]"></a>MX_TIM4_Init</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, bsp.o(i.MX_TIM4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MX_TIM4_Init &rArr; HAL_TIM_PWM_Init &rArr; HAL_TIM_PWM_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[3f8]"></a>MX_UART4_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, bsp.o(i.MX_UART4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_UART4_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[3f9]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, bsp.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[3fa]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, bsp.o(i.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[3fb]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, bsp.o(i.MX_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[3ff]"></a>MX_USB_OTG_FS_PCD_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bsp.o(i.MX_USB_OTG_FS_PCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MX_USB_OTG_FS_PCD_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[77b]"></a>os_list_add_tail</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ring_blk_buff.o(i.os_list_add_tail))
<BR><BR>[Called By]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbb_blk_alloc
</UL>

<P><STRONG><a name="[77a]"></a>os_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ring_blk_buff.o(i.os_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbb_blk_get
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbb_blk_alloc
</UL>

<P><STRONG><a name="[77c]"></a>rbb_do_init</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, ring_blk_buff.o(i.rbb_do_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = rbb_do_init &rArr; os_spin_lock_init &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_lock_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbb_create
</UL>

<P><STRONG><a name="[779]"></a>rbb_find_empty_blk_in_set</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ring_blk_buff.o(i.rbb_find_empty_blk_in_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rbb_find_empty_blk_in_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbb_blk_alloc
</UL>

<P><STRONG><a name="[777]"></a>rb_ring_buff_state</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ring_buff.o(i.rb_ring_buff_state))
<BR><BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_ring_buff_data_len
</UL>

<P><STRONG><a name="[14b]"></a>dlog_console_backend_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, console_backend.o(i.dlog_console_backend_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = dlog_console_backend_init &rArr; dlog_backend_register &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_init
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_backend_register
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console_backend.o(.init_call.3.2)
</UL>
<P><STRONG><a name="[5f]"></a>dlog_console_backend_output</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, console_backend.o(i.dlog_console_backend_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = dlog_console_backend_output &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_console_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console_backend.o(i.dlog_console_backend_init)
</UL>
<P><STRONG><a name="[5b1]"></a>dlog_async_output</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, dlog.o(i.dlog_async_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = dlog_async_output &rArr; rbb_blk_get &rArr; os_spin_unlock_irqrestore &rArr; os_schedule_unlock &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output_to_all_backend
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbb_blk_get
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbb_blk_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_flush
</UL>

<P><STRONG><a name="[60]"></a>dlog_async_output_task_entry</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, dlog.o(i.dlog_async_output_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = dlog_async_output_task_entry &rArr; os_sem_wait &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_wait
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output_to_all_backend
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbb_blk_get
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbb_blk_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dlog.o(i.dlog_init)
</UL>
<P><STRONG><a name="[5ba]"></a>dlog_do_output</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, dlog.o(i.dlog_do_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = dlog_do_output &rArr; rbb_blk_alloc &rArr; os_spin_unlock_irqrestore &rArr; os_schedule_unlock &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_post
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbb_blk_put
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbb_blk_alloc
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_voutput
</UL>

<P><STRONG><a name="[5be]"></a>dlog_formater</STRONG> (Thumb, 506 bytes, Stack size 32 bytes, dlog.o(i.dlog_formater))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = dlog_formater &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_vsnprintf
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_get
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_ultoa
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_strcpy
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_voutput
</UL>

<P><STRONG><a name="[5c2]"></a>dlog_get_log_buf</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, dlog.o(i.dlog_get_log_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dlog_get_log_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_active
</UL>
<BR>[Called By]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_voutput
</UL>

<P><STRONG><a name="[78d]"></a>dlog_global_filter_kw_del</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dlog.o(i.dlog_global_filter_kw_del))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_dlog_gkw_ctrl
</UL>

<P><STRONG><a name="[78c]"></a>dlog_global_filter_kw_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dlog.o(i.dlog_global_filter_kw_get))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_dlog_gkw_ctrl
</UL>

<P><STRONG><a name="[5c3]"></a>dlog_global_filter_kw_set</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, dlog.o(i.dlog_global_filter_kw_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = dlog_global_filter_kw_set &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_dlog_gkw_ctrl
</UL>

<P><STRONG><a name="[791]"></a>dlog_global_filter_tag_del</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dlog.o(i.dlog_global_filter_tag_del))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_dlog_gtag_ctrl
</UL>

<P><STRONG><a name="[790]"></a>dlog_global_filter_tag_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dlog.o(i.dlog_global_filter_tag_get))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_dlog_gtag_ctrl
</UL>

<P><STRONG><a name="[5c4]"></a>dlog_global_filter_tag_set</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, dlog.o(i.dlog_global_filter_tag_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = dlog_global_filter_tag_set &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_dlog_gtag_ctrl
</UL>

<P><STRONG><a name="[5b6]"></a>dlog_lock</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, dlog.o(i.dlog_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = dlog_lock &rArr; os_mutex_lock &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_schedule_locked
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_disabled
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_active
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_lock_irqsave
</UL>
<BR>[Called By]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_voutput
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_flush
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_tag_lvl_filter_set
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_tag_lvl_filter_get
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_tag_lvl_filter_del
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_backend_register
</UL>

<P><STRONG><a name="[5b3]"></a>dlog_output_to_all_backend</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, dlog.o(i.dlog_output_to_all_backend))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dlog_output_to_all_backend &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_active
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_async_output_task_entry
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_async_output
</UL>

<P><STRONG><a name="[5bf]"></a>dlog_strcpy</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, dlog.o(i.dlog_strcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dlog_strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_formater
</UL>

<P><STRONG><a name="[5ca]"></a>dlog_tag_lvl_filter_del</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, dlog.o(i.dlog_tag_lvl_filter_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = dlog_tag_lvl_filter_del &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_del
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_unlock
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_do_dlog_tlvl_ctrl
</UL>

<P><STRONG><a name="[5cc]"></a>dlog_tag_lvl_filter_get</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, dlog.o(i.dlog_tag_lvl_filter_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_unlock
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_voutput
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_do_dlog_tlvl_ctrl
</UL>

<P><STRONG><a name="[5cd]"></a>dlog_tag_lvl_filter_set</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, dlog.o(i.dlog_tag_lvl_filter_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = dlog_tag_lvl_filter_set &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_add_tail
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_unlock
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_malloc
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_do_dlog_tlvl_ctrl
</UL>

<P><STRONG><a name="[5c0]"></a>dlog_ultoa</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, dlog.o(i.dlog_ultoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = dlog_ultoa
</UL>
<BR>[Called By]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_formater
</UL>

<P><STRONG><a name="[5b7]"></a>dlog_unlock</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, dlog.o(i.dlog_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_schedule_locked
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_disabled
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_active
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_unlock_irqrestore
</UL>
<BR>[Called By]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_voutput
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_flush
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_tag_lvl_filter_set
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_tag_lvl_filter_get
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_tag_lvl_filter_del
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_backend_register
</UL>

<P><STRONG><a name="[5b8]"></a>os_list_add_tail</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dlog.o(i.os_list_add_tail))
<BR><BR>[Called By]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_tag_lvl_filter_set
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_backend_register
</UL>

<P><STRONG><a name="[5cb]"></a>os_list_del</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dlog.o(i.os_list_del))
<BR><BR>[Called By]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_tag_lvl_filter_del
</UL>

<P><STRONG><a name="[5c6]"></a>os_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dlog.o(i.os_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_init
</UL>

<P><STRONG><a name="[78b]"></a>sh_dlog_ctrl_info_get</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, dlog.o(i.sh_dlog_ctrl_info_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = sh_dlog_ctrl_info_get &rArr; opt_get &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opt_init
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opt_get
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_dlog_tlvl_ctrl
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_dlog_gtag_ctrl
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_dlog_glvl_ctrl
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_dlog_gkw_ctrl
</UL>

<P><STRONG><a name="[173]"></a>sh_dlog_flush</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dlog.o(i.sh_dlog_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = sh_dlog_flush &rArr; dlog_flush &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_flush
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dlog.o(FSymTab)
</UL>
<P><STRONG><a name="[172]"></a>sh_dlog_gkw_ctrl</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, dlog.o(i.sh_dlog_gkw_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = sh_dlog_gkw_ctrl &rArr; sh_dlog_ctrl_info_get &rArr; opt_get &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_dlog_gkw_ctrl_help
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_dlog_ctrl_info_get
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_global_filter_kw_set
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_global_filter_kw_get
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_global_filter_kw_del
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dlog.o(FSymTab)
</UL>
<P><STRONG><a name="[78e]"></a>sh_dlog_gkw_ctrl_help</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, dlog.o(i.sh_dlog_gkw_ctrl_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = sh_dlog_gkw_ctrl_help &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_dlog_gkw_ctrl
</UL>

<P><STRONG><a name="[16f]"></a>sh_dlog_glvl_ctrl</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, dlog.o(i.sh_dlog_glvl_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = sh_dlog_glvl_ctrl &rArr; sh_dlog_ctrl_info_get &rArr; opt_get &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_global_lvl_set
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_global_lvl_get
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_dlog_glvl_ctrl_help
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_dlog_ctrl_info_get
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dlog.o(FSymTab)
</UL>
<P><STRONG><a name="[78f]"></a>sh_dlog_glvl_ctrl_help</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, dlog.o(i.sh_dlog_glvl_ctrl_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = sh_dlog_glvl_ctrl_help &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_dlog_glvl_ctrl
</UL>

<P><STRONG><a name="[171]"></a>sh_dlog_gtag_ctrl</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, dlog.o(i.sh_dlog_gtag_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = sh_dlog_gtag_ctrl &rArr; sh_dlog_ctrl_info_get &rArr; opt_get &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_dlog_gtag_ctrl_help
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_dlog_ctrl_info_get
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_global_filter_tag_set
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_global_filter_tag_get
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_global_filter_tag_del
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dlog.o(FSymTab)
</UL>
<P><STRONG><a name="[792]"></a>sh_dlog_gtag_ctrl_help</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, dlog.o(i.sh_dlog_gtag_ctrl_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = sh_dlog_gtag_ctrl_help &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_dlog_gtag_ctrl
</UL>

<P><STRONG><a name="[170]"></a>sh_dlog_tlvl_ctrl</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, dlog.o(i.sh_dlog_tlvl_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = sh_dlog_tlvl_ctrl &rArr; sh_do_dlog_tlvl_ctrl &rArr; dlog_tag_lvl_filter_set &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_do_dlog_tlvl_ctrl
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_dlog_tlvl_ctrl_help
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_dlog_ctrl_info_get
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dlog.o(FSymTab)
</UL>
<P><STRONG><a name="[794]"></a>sh_dlog_tlvl_ctrl_help</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, dlog.o(i.sh_dlog_tlvl_ctrl_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = sh_dlog_tlvl_ctrl_help &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_dlog_tlvl_ctrl
</UL>

<P><STRONG><a name="[793]"></a>sh_do_dlog_tlvl_ctrl</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, dlog.o(i.sh_do_dlog_tlvl_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = sh_do_dlog_tlvl_ctrl &rArr; dlog_tag_lvl_filter_set &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_tag_lvl_filter_set
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_tag_lvl_filter_get
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_tag_lvl_filter_del
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_dlog_tlvl_ctrl
</UL>

<P><STRONG><a name="[ae]"></a>blk_dev_control</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, block_device.o(i.blk_dev_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = blk_dev_control &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> block_device.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>blk_dev_read</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, block_device.o(i.blk_dev_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = blk_dev_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> block_device.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>blk_dev_write</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, block_device.o(i.blk_dev_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = blk_dev_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> block_device.o(.constdata)
</UL>
<P><STRONG><a name="[456]"></a>_can_int_rx</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, can.o(i._can_int_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = _can_int_rx &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_empty
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_del
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_add_tail
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_can_read
</UL>

<P><STRONG><a name="[45a]"></a>_can_int_tx</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, can.o(i._can_int_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = _can_int_tx &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_empty
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_del
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_add_tail
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_can_write
</UL>

<P><STRONG><a name="[b3]"></a>os_can_control</STRONG> (Thumb, 414 bytes, Stack size 40 bytes, can.o(i.os_can_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = os_can_control &rArr; os_device_send_notify &rArr; os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_send_notify
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_empty
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_del
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_add_tail
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>os_can_deinit</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, can.o(i.os_can_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = os_can_deinit &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>os_can_init</STRONG> (Thumb, 436 bytes, Stack size 24 bytes, can.o(i.os_can_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = os_can_init &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_init
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_add_tail
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>os_can_read</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, can.o(i.os_can_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = os_can_read &rArr; _can_int_rx &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_rx
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>os_can_write</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, can.o(i.os_can_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = os_can_write &rArr; _can_int_tx &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(.constdata)
</UL>
<P><STRONG><a name="[459]"></a>os_list_add_tail</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, can.o(i.os_list_add_tail))
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_can_isr_txdone
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_can_isr_rxdone
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_can_init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_can_control
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_rx
</UL>

<P><STRONG><a name="[458]"></a>os_list_del</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, can.o(i.os_list_del))
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_can_isr_txdone
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_can_isr_rxdone
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_can_control
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_rx
</UL>

<P><STRONG><a name="[457]"></a>os_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, can.o(i.os_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_can_isr_txdone
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_can_isr_rxdone
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_can_control
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_rx
</UL>

<P><STRONG><a name="[6d0]"></a>os_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, can.o(i.os_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_can_init
</UL>

<P><STRONG><a name="[6d3]"></a>os_clockevent_auto_period</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, clockevent.o(i.os_clockevent_auto_period))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = os_clockevent_auto_period
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_isr
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_calc_param
</UL>

<P><STRONG><a name="[6d1]"></a>os_clockevent_calc_param</STRONG> (Thumb, 540 bytes, Stack size 80 bytes, clockevent.o(i.os_clockevent_calc_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = os_clockevent_calc_param &rArr; period_calc_next_nsec &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clocksource_gettime
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;period_calc_next_nsec
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_auto_period
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_next
</UL>

<P><STRONG><a name="[6d9]"></a>os_clockevent_enqueue</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, clockevent.o(i.os_clockevent_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_clockevent_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_register
</UL>

<P><STRONG><a name="[6d7]"></a>os_clockevent_next</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, clockevent.o(i.os_clockevent_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = os_clockevent_next &rArr; os_clockevent_calc_param &rArr; period_calc_next_nsec &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_calc_param
</UL>
<BR>[Called By]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_start_oneshot
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_isr
</UL>

<P><STRONG><a name="[6db]"></a>os_clockevent_valid</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, clockevent.o(i.os_clockevent_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_clockevent_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_select_best
</UL>

<P><STRONG><a name="[75]"></a>os_clockevent_valid_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, clockevent.o(i.os_clockevent_valid_handler))
<BR>[Address Reference Count : 1]<UL><LI> clockevent.o(i.os_clockevent_valid)
</UL>
<P><STRONG><a name="[6d2]"></a>period_calc_next_nsec</STRONG> (Thumb, 198 bytes, Stack size 72 bytes, clockevent.o(i.period_calc_next_nsec))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = period_calc_next_nsec &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ffs
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_calc_param
</UL>

<P><STRONG><a name="[6df]"></a>__os_clocksource_ndelay</STRONG> (Thumb, 26 bytes, Stack size 20 bytes, clocksource.o(i.__os_clocksource_ndelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __os_clocksource_ndelay
</UL>
<BR>[Called By]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clocksource_ndelay
</UL>

<P><STRONG><a name="[6e1]"></a>os_clocksource_enqueue</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, clocksource.o(i.os_clocksource_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_clocksource_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clocksource_register
</UL>

<P><STRONG><a name="[6dd]"></a>os_clocksource_gettime_cs</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, clocksource.o(i.os_clocksource_gettime_cs))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = os_clocksource_gettime_cs &rArr; os_clocksource_update_cs
</UL>
<BR>[Calls]<UL><LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clocksource_update_cs
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clocksource_gettime
</UL>

<P><STRONG><a name="[6e2]"></a>os_clocksource_select</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, clocksource.o(i.os_clocksource_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = os_clocksource_select &rArr; os_device_open_s &rArr; os_sem_wait &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_open_s
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_close
</UL>
<BR>[Called By]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clocksource_register
</UL>

<P><STRONG><a name="[6de]"></a>os_clocksource_update_cs</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, clocksource.o(i.os_clocksource_update_cs))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = os_clocksource_update_cs
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clocksource_gettime_cs
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clocksource_update
</UL>

<P><STRONG><a name="[6e0]"></a>os_clocksource_valid</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, clocksource.o(i.os_clocksource_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = os_clocksource_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clocksource_register
</UL>

<P><STRONG><a name="[5d]"></a>cortexm_systick_read</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, clocksource_cortexm.o(i.cortexm_systick_read))
<BR>[Address Reference Count : 1]<UL><LI> clocksource_cortexm.o(i.cortexm_systick_clocksource_init)
</UL>
<P><STRONG><a name="[141]"></a>device_core_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, device.o(i.device_core_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = device_core_init &rArr; os_sem_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(.init_call.1.3)
</UL>
<P><STRONG><a name="[76]"></a>device_halt</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, device.o(i.device_halt))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = device_halt &rArr; os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_post
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(i.os_device_register)
</UL>
<P><STRONG><a name="[77]"></a>device_release</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, device.o(i.device_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = device_release &rArr; os_sem_wait &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_wait
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_post
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_deinit
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_notify
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_del
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(i.os_device_register)
</UL>
<P><STRONG><a name="[6ea]"></a>os_list_add</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, device.o(i.os_list_add))
<BR><BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_register
</UL>

<P><STRONG><a name="[59c]"></a>os_list_del</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, device.o(i.os_list_del))
<BR><BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_control
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_close
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_release
</UL>

<P><STRONG><a name="[6e9]"></a>os_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, device.o(i.os_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_register
</UL>

<P><STRONG><a name="[83]"></a>sh_print_device_info</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, device.o(i.sh_print_device_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = sh_print_device_info &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(i.sh_list_device)
</UL>
<P><STRONG><a name="[175]"></a>reboot</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, driver.o(i.reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = reboot &rArr; os_hw_cpu_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_cpu_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(FSymTab)
</UL>
<P><STRONG><a name="[620]"></a>fal_show_part_table</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, fal_part.o(i.fal_show_part_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = fal_show_part_table &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_part_init
</UL>

<P><STRONG><a name="[78]"></a>os_hrtimer_callback</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, hrtimer.o(i.os_hrtimer_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = os_hrtimer_callback &rArr; os_hrtimer_trig_hwtimer &rArr; os_clockevent_start_oneshot &rArr; os_clockevent_next &rArr; os_clockevent_calc_param &rArr; period_calc_next_nsec &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clocksource_gettime
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;period_calc_next_nsec
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_empty
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_del
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hrtimer_trig_hwtimer
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hrtimer_enqueue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hrtimer.o(i.os_hrtimer_init)
</UL>
<P><STRONG><a name="[6f9]"></a>os_hrtimer_enqueue</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, hrtimer.o(i.os_hrtimer_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = os_hrtimer_enqueue &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hrtimer_start
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hrtimer_callback
</UL>

<P><STRONG><a name="[6fb]"></a>os_hrtimer_trig_hwtimer</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, hrtimer.o(i.os_hrtimer_trig_hwtimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = os_hrtimer_trig_hwtimer &rArr; os_clockevent_start_oneshot &rArr; os_clockevent_next &rArr; os_clockevent_calc_param &rArr; period_calc_next_nsec &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clocksource_gettime
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_stop
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_start_oneshot
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_best
</UL>
<BR>[Called By]<UL><LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hrtimer_start
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hrtimer_init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hrtimer_callback
</UL>

<P><STRONG><a name="[6f7]"></a>os_list_del</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hrtimer.o(i.os_list_del))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hrtimer_callback
</UL>

<P><STRONG><a name="[6fa]"></a>os_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hrtimer.o(i.os_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hrtimer_start
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hrtimer_init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hrtimer_callback
</UL>

<P><STRONG><a name="[6f8]"></a>period_calc_next_nsec</STRONG> (Thumb, 198 bytes, Stack size 72 bytes, hrtimer.o(i.period_calc_next_nsec))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = period_calc_next_nsec &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ffs
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hrtimer_callback
</UL>

<P><STRONG><a name="[b7]"></a>i2c_bus_device_control</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, i2c.o(i.i2c_bus_device_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = i2c_bus_device_control &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_i2c_transfer
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>i2c_bus_device_read</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, i2c.o(i.i2c_bus_device_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = i2c_bus_device_read &rArr; os_i2c_master_recv &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_i2c_master_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>i2c_bus_device_write</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, i2c.o(i.i2c_bus_device_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = i2c_bus_device_write &rArr; os_i2c_master_send &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_i2c_master_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>_pin_control</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, pin.o(i._pin_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _pin_control &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(.constdata)
</UL>
<P><STRONG><a name="[b8]"></a>_pin_read</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, pin.o(i._pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = _pin_read &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>_pin_write</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, pin.o(i._pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = _pin_write &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(.constdata)
</UL>
<P><STRONG><a name="[176]"></a>sh_pin_mode</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, pin.o(i.sh_pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = sh_pin_mode &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(FSymTab)
</UL>
<P><STRONG><a name="[178]"></a>sh_pin_read</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, pin.o(i.sh_pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = sh_pin_read &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(FSymTab)
</UL>
<P><STRONG><a name="[177]"></a>sh_pin_write</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, pin.o(i.sh_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = sh_pin_write &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(FSymTab)
</UL>
<P><STRONG><a name="[bc]"></a>_pwm_control</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, pwm.o(i._pwm_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _pwm_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm.o(.constdata)
</UL>
<P><STRONG><a name="[51e]"></a>_serial_poll_tx</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, serial.o(i._serial_poll_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _serial_poll_tx &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_serial_write
</UL>

<P><STRONG><a name="[51f]"></a>_serial_rx</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, serial.o(i._serial_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = _serial_rx &rArr; copy_ring_to_line &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_count
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_ring_to_line
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_serial_read
</UL>

<P><STRONG><a name="[522]"></a>_serial_tx</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, serial.o(i._serial_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = _serial_tx &rArr; os_sem_wait &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_wait
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_ring_buff_put
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_ring_buff_get
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_ring_buff_data_len
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_serial_write
</UL>

<P><STRONG><a name="[c1]"></a>os_serial_control</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, serial.o(i.os_serial_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = os_serial_control &rArr; os_serial_init &rArr; os_sem_wait &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_serial_init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_serial_deinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>os_serial_deinit</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, serial.o(i.os_serial_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = os_serial_deinit &rArr; os_sem_wait &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_wait
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_post
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dma_free_align
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_plug_put
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_serial_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>os_serial_init</STRONG> (Thumb, 436 bytes, Stack size 24 bytes, serial.o(i.os_serial_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = os_serial_init &rArr; os_sem_wait &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_wait
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_post
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_ring_buff_init
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dma_malloc_align
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_plug_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_serial_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>os_serial_read</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, serial.o(i.os_serial_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = os_serial_read &rArr; _serial_rx &rArr; copy_ring_to_line &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>os_serial_write</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, serial.o(i.os_serial_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = os_serial_write &rArr; _serial_tx &rArr; os_sem_wait &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_console_get_device
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_tx
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>serial_halt</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, serial.o(i.serial_halt))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = serial_halt &rArr; os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_post
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.os_hw_serial_register)
</UL>
<P><STRONG><a name="[7b]"></a>serial_release</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, serial.o(i.serial_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = serial_release &rArr; os_sem_deinit &rArr; os_spin_unlock &rArr; os_schedule_unlock &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_deinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.os_hw_serial_register)
</UL>
<P><STRONG><a name="[73e]"></a>os_sfbus_spi_attach</STRONG> (Thumb, 110 bytes, Stack size 80 bytes, sfbus.o(i.os_sfbus_spi_attach))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = os_sfbus_spi_attach &rArr; os_hw_spi_device_attach &rArr; os_spi_bus_attach_device &rArr; os_spidev_device_init &rArr; os_device_register &rArr; os_plug_in &rArr; os_sem_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_register
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_init
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_open_s
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_spi_device_attach
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfbus_attach
</UL>

<P><STRONG><a name="[c2]"></a>sfbus_spi_configure</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sfbus.o(i.sfbus_spi_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = sfbus_spi_configure &rArr; os_spi_configure &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_configure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfbus.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>sfbus_spi_transfer</STRONG> (Thumb, 546 bytes, Stack size 48 bytes, sfbus.o(i.sfbus_spi_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = sfbus_spi_transfer &rArr; os_spi_transfer_message &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_transfer_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfbus.o(.constdata)
</UL>
<P><STRONG><a name="[741]"></a>os_sfdp_append_sflash_info</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, sfdp_basic.o(i.os_sfdp_append_sflash_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = os_sfdp_append_sflash_info &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic_status_busy
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic_read_444
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic_read_222
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic_read_188
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic_read_144
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic_read_122
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic_read_118
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic_read_114
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic_read_112
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic_erase_type
</UL>

<P><STRONG><a name="[74a]"></a>os_sfdp_decode_basic_addr_size</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, sfdp_basic.o(i.os_sfdp_decode_basic_addr_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = os_sfdp_decode_basic_addr_size
</UL>
<BR>[Called By]<UL><LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic
</UL>

<P><STRONG><a name="[749]"></a>os_sfdp_decode_basic_capacity</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sfdp_basic.o(i.os_sfdp_decode_basic_capacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_sfdp_decode_basic_capacity
</UL>
<BR>[Called By]<UL><LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic
</UL>

<P><STRONG><a name="[743]"></a>os_sfdp_decode_basic_enter_4bytes_addressing</STRONG> (Thumb, 72 bytes, Stack size 64 bytes, sfdp_basic.o(i.os_sfdp_decode_basic_enter_4bytes_addressing))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = os_sfdp_decode_basic_enter_4bytes_addressing &rArr; os_sfbus_transfer &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfbus_transfer
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_basic_init
</UL>

<P><STRONG><a name="[745]"></a>os_sfdp_decode_basic_enter_mode_044</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, sfdp_basic.o(i.os_sfdp_decode_basic_enter_mode_044))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = os_sfdp_decode_basic_enter_mode_044
</UL>
<BR>[Called By]<UL><LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_basic_init
</UL>

<P><STRONG><a name="[746]"></a>os_sfdp_decode_basic_enter_mode_444</STRONG> (Thumb, 76 bytes, Stack size 64 bytes, sfdp_basic.o(i.os_sfdp_decode_basic_enter_mode_444))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = os_sfdp_decode_basic_enter_mode_444 &rArr; os_sfbus_transfer &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfbus_transfer
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_basic_init
</UL>

<P><STRONG><a name="[74e]"></a>os_sfdp_decode_basic_erase</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, sfdp_basic.o(i.os_sfdp_decode_basic_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = os_sfdp_decode_basic_erase &rArr; os_sfdp_decode_basic_erase_type &rArr; os_sfdp_append_sflash_info &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic_erase_type
</UL>
<BR>[Called By]<UL><LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic
</UL>

<P><STRONG><a name="[74f]"></a>os_sfdp_decode_basic_erase_type</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, sfdp_basic.o(i.os_sfdp_decode_basic_erase_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = os_sfdp_decode_basic_erase_type &rArr; os_sfdp_append_sflash_info &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_append_sflash_info
</UL>
<BR>[Called By]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic_erase
</UL>

<P><STRONG><a name="[744]"></a>os_sfdp_decode_basic_qer</STRONG> (Thumb, 164 bytes, Stack size 64 bytes, sfdp_basic.o(i.os_sfdp_decode_basic_qer))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = os_sfdp_decode_basic_qer &rArr; os_sfbus_transfer &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfbus_transfer
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_basic_init
</UL>

<P><STRONG><a name="[74c]"></a>os_sfdp_decode_basic_read</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, sfdp_basic.o(i.os_sfdp_decode_basic_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = os_sfdp_decode_basic_read &rArr; os_sfdp_decode_basic_read_444 &rArr; os_sfdp_append_sflash_info &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic_read_444
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic_read_222
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic_read_188
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic_read_144
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic_read_122
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic_read_118
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic_read_114
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic_read_112
</UL>
<BR>[Called By]<UL><LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic
</UL>

<P><STRONG><a name="[753]"></a>os_sfdp_decode_basic_read_112</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, sfdp_basic.o(i.os_sfdp_decode_basic_read_112))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = os_sfdp_decode_basic_read_112 &rArr; os_sfdp_append_sflash_info &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_append_sflash_info
</UL>
<BR>[Called By]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic_read
</UL>

<P><STRONG><a name="[750]"></a>os_sfdp_decode_basic_read_114</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, sfdp_basic.o(i.os_sfdp_decode_basic_read_114))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = os_sfdp_decode_basic_read_114 &rArr; os_sfdp_append_sflash_info &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_append_sflash_info
</UL>
<BR>[Called By]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic_read
</UL>

<P><STRONG><a name="[756]"></a>os_sfdp_decode_basic_read_118</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, sfdp_basic.o(i.os_sfdp_decode_basic_read_118))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = os_sfdp_decode_basic_read_118 &rArr; os_sfdp_append_sflash_info &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_append_sflash_info
</UL>
<BR>[Called By]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic_read
</UL>

<P><STRONG><a name="[752]"></a>os_sfdp_decode_basic_read_122</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, sfdp_basic.o(i.os_sfdp_decode_basic_read_122))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = os_sfdp_decode_basic_read_122 &rArr; os_sfdp_append_sflash_info &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_append_sflash_info
</UL>
<BR>[Called By]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic_read
</UL>

<P><STRONG><a name="[751]"></a>os_sfdp_decode_basic_read_144</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, sfdp_basic.o(i.os_sfdp_decode_basic_read_144))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = os_sfdp_decode_basic_read_144 &rArr; os_sfdp_append_sflash_info &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_append_sflash_info
</UL>
<BR>[Called By]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic_read
</UL>

<P><STRONG><a name="[757]"></a>os_sfdp_decode_basic_read_188</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, sfdp_basic.o(i.os_sfdp_decode_basic_read_188))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = os_sfdp_decode_basic_read_188 &rArr; os_sfdp_append_sflash_info &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_append_sflash_info
</UL>
<BR>[Called By]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic_read
</UL>

<P><STRONG><a name="[755]"></a>os_sfdp_decode_basic_read_222</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, sfdp_basic.o(i.os_sfdp_decode_basic_read_222))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = os_sfdp_decode_basic_read_222 &rArr; os_sfdp_append_sflash_info &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_append_sflash_info
</UL>
<BR>[Called By]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic_read
</UL>

<P><STRONG><a name="[754]"></a>os_sfdp_decode_basic_read_444</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, sfdp_basic.o(i.os_sfdp_decode_basic_read_444))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = os_sfdp_decode_basic_read_444 &rArr; os_sfdp_append_sflash_info &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_append_sflash_info
</UL>
<BR>[Called By]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic_read
</UL>

<P><STRONG><a name="[74b]"></a>os_sfdp_decode_basic_status_busy</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, sfdp_basic.o(i.os_sfdp_decode_basic_status_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = os_sfdp_decode_basic_status_busy &rArr; os_sfdp_append_sflash_info &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_append_sflash_info
</UL>
<BR>[Called By]<UL><LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic
</UL>

<P><STRONG><a name="[74d]"></a>os_sfdp_decode_basic_write</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, sfdp_basic.o(i.os_sfdp_decode_basic_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = os_sfdp_decode_basic_write
</UL>
<BR>[Called By]<UL><LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode_basic
</UL>

<P><STRONG><a name="[766]"></a>os_sflash_bus_support_lines</STRONG> (Thumb, 342 bytes, Stack size 0 bytes, sflash.o(i.os_sflash_bus_support_lines))
<BR><BR>[Called By]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_prepare_cmds
</UL>

<P><STRONG><a name="[767]"></a>os_sflash_cmd_set</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, sflash.o(i.os_sflash_cmd_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = os_sflash_cmd_set
</UL>
<BR>[Called By]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_prepare_cmds
</UL>

<P><STRONG><a name="[75a]"></a>os_sflash_dummy</STRONG> (Thumb, 50 bytes, Stack size 48 bytes, sflash.o(i.os_sflash_dummy))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = os_sflash_dummy &rArr; os_sfbus_transfer &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfbus_transfer
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_init
</UL>

<P><STRONG><a name="[82]"></a>os_sflash_fal_erase_block</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, sflash.o(i.os_sflash_fal_erase_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = os_sflash_fal_erase_block &rArr; os_sflash_erase_block &rArr; os_sflash_wait_busy &rArr; os_sflash_read_status &rArr; os_sfbus_transfer &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_erase_block
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sflash.o(i.sflash_init)
</UL>
<P><STRONG><a name="[80]"></a>os_sflash_fal_read_page</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, sflash.o(i.os_sflash_fal_read_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = os_sflash_fal_read_page &rArr; os_sflash_read_page &rArr; os_sfbus_transfer &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_read_page
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sflash.o(i.sflash_init)
</UL>
<P><STRONG><a name="[81]"></a>os_sflash_fal_write_page</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, sflash.o(i.os_sflash_fal_write_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = os_sflash_fal_write_page &rArr; os_sflash_write_page &rArr; os_sflash_wait_busy &rArr; os_sflash_read_status &rArr; os_sfbus_transfer &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_write_page
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sflash.o(i.sflash_init)
</UL>
<P><STRONG><a name="[763]"></a>os_sflash_find_flash_info_by_id</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, sflash.o(i.os_sflash_find_flash_info_by_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = os_sflash_find_flash_info_by_id
</UL>
<BR>[Called By]<UL><LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_init
</UL>

<P><STRONG><a name="[75f]"></a>os_sflash_find_flash_info_by_sfdp</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, sflash.o(i.os_sflash_find_flash_info_by_sfdp))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = os_sflash_find_flash_info_by_sfdp &rArr; os_sflash_read_sfdp &rArr; os_sfbus_transfer &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfdp_decode
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_read_sfdp
</UL>
<BR>[Called By]<UL><LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_init
</UL>

<P><STRONG><a name="[764]"></a>os_sflash_prepare_cmds</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, sflash.o(i.os_sflash_prepare_cmds))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = os_sflash_prepare_cmds &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_cmd_set
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_bus_support_lines
</UL>
<BR>[Called By]<UL><LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_init
</UL>

<P><STRONG><a name="[762]"></a>os_sflash_read_id</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, sflash.o(i.os_sflash_read_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = os_sflash_read_id &rArr; os_sfbus_transfer &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfbus_transfer
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_init
</UL>

<P><STRONG><a name="[760]"></a>os_sflash_read_sfdp</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, sflash.o(i.os_sflash_read_sfdp))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = os_sflash_read_sfdp &rArr; os_sfbus_transfer &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfbus_transfer
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_find_flash_info_by_sfdp
</UL>

<P><STRONG><a name="[768]"></a>os_sflash_read_status</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, sflash.o(i.os_sflash_read_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = os_sflash_read_status &rArr; os_sfbus_transfer &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfbus_transfer
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_wait_busy
</UL>

<P><STRONG><a name="[765]"></a>os_sflash_unlock_blocks</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, sflash.o(i.os_sflash_unlock_blocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = os_sflash_unlock_blocks &rArr; os_sfbus_transfer &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfbus_transfer
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_init
</UL>

<P><STRONG><a name="[75c]"></a>os_sflash_wait_busy</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, sflash.o(i.os_sflash_wait_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = os_sflash_wait_busy &rArr; os_sflash_read_status &rArr; os_sfbus_transfer &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_read_status
</UL>
<BR>[Called By]<UL><LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_write_page
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_erase_block
</UL>

<P><STRONG><a name="[158]"></a>sflash_init</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, sflash.o(i.sflash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = sflash_init &rArr; os_sflash_init &rArr; os_sfbus_attach &rArr; os_sfbus_spi_attach &rArr; os_hw_spi_device_attach &rArr; os_spi_bus_attach_device &rArr; os_spidev_device_init &rArr; os_device_register &rArr; os_plug_in &rArr; os_sem_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_register
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sflash_init
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sflash.o(.init_call.4.2)
</UL>
<P><STRONG><a name="[7ae]"></a>soft_dma_buffer_deinit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, soft_dma.o(i.soft_dma_buffer_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = soft_dma_buffer_deinit &rArr; os_dma_free_align &rArr; os_free &rArr; os_memheap_free &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dma_free_align
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_stop
</UL>

<P><STRONG><a name="[7af]"></a>soft_dma_buffer_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, soft_dma.o(i.soft_dma_buffer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = soft_dma_buffer_init &rArr; soft_dma_normal_buffer_init &rArr; os_dma_malloc_align &rArr; os_aligned_malloc &rArr; os_memheap_aligned_alloc &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_normal_buffer_init
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_circular_buffer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_start
</UL>

<P><STRONG><a name="[7b0]"></a>soft_dma_circular_buffer_init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, soft_dma.o(i.soft_dma_circular_buffer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = soft_dma_circular_buffer_init &rArr; os_dma_malloc_align &rArr; os_aligned_malloc &rArr; os_memheap_aligned_alloc &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dma_malloc_align
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_buffer_init
</UL>

<P><STRONG><a name="[7b2]"></a>soft_dma_circular_updata_buffer</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, soft_dma.o(i.soft_dma_circular_updata_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = soft_dma_circular_updata_buffer &rArr; copy_ring_to_ring &rArr; copy_line_to_ring &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_count
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_ring_to_ring
</UL>
<BR>[Called By]<UL><LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_updata_buffer
</UL>

<P><STRONG><a name="[7b4]"></a>soft_dma_irq</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, soft_dma.o(i.soft_dma_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = soft_dma_irq &rArr; soft_dma_updata_buffer &rArr; soft_dma_normal_updata_buffer &rArr; copy_ring_to_ring &rArr; copy_line_to_ring &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_updata_buffer
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_irq_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_timeout_irq
</UL>

<P><STRONG><a name="[7b6]"></a>soft_dma_irq_callback</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, soft_dma.o(i.soft_dma_irq_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = soft_dma_irq_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_count
</UL>
<BR>[Called By]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_irq
</UL>

<P><STRONG><a name="[7b1]"></a>soft_dma_normal_buffer_init</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, soft_dma.o(i.soft_dma_normal_buffer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = soft_dma_normal_buffer_init &rArr; os_dma_malloc_align &rArr; os_aligned_malloc &rArr; os_memheap_aligned_alloc &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dma_malloc_align
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_buffer_init
</UL>

<P><STRONG><a name="[7b7]"></a>soft_dma_normal_updata_buffer</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, soft_dma.o(i.soft_dma_normal_updata_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = soft_dma_normal_updata_buffer &rArr; copy_ring_to_ring &rArr; copy_line_to_ring &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_ring_to_ring
</UL>
<BR>[Called By]<UL><LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_updata_buffer
</UL>

<P><STRONG><a name="[7bb]"></a>soft_dma_timer_deinit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, soft_dma.o(i.soft_dma_timer_deinit))
<BR><BR>[Called By]<UL><LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_stop
</UL>

<P><STRONG><a name="[7b9]"></a>soft_dma_timer_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, soft_dma.o(i.soft_dma_timer_init))
<BR><BR>[Called By]<UL><LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_start
</UL>

<P><STRONG><a name="[7b5]"></a>soft_dma_updata_buffer</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, soft_dma.o(i.soft_dma_updata_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = soft_dma_updata_buffer &rArr; soft_dma_normal_updata_buffer &rArr; copy_ring_to_ring &rArr; copy_line_to_ring &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_normal_updata_buffer
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_circular_updata_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_irq
</UL>

<P><STRONG><a name="[404]"></a>SCL_H</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, soft_i2c_bus.o(i.SCL_H))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = SCL_H &rArr; os_pin_write &rArr; raw_os_pin_write &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_write
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_i2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeb
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_waitack
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_ack_or_nack
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_restart
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readb
</UL>

<P><STRONG><a name="[147]"></a>__driver_soft_i2c_bus_driver_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, soft_i2c_bus.o(i.__driver_soft_i2c_bus_driver_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __driver_soft_i2c_bus_driver_init &rArr; driver_match_devices
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_match_devices
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soft_i2c_bus.o(.init_call.3.1)
</UL>
<P><STRONG><a name="[639]"></a>i2c_bit_send_address</STRONG> (Thumb, 304 bytes, Stack size 56 bytes, soft_i2c_bus.o(i.i2c_bit_send_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = i2c_bit_send_address &rArr; i2c_send_address &rArr; i2c_writeb &rArr; i2c_waitack &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeb
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_address
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_restart
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_transfer
</UL>

<P><STRONG><a name="[c4]"></a>i2c_bit_transfer</STRONG> (Thumb, 310 bytes, Stack size 56 bytes, soft_i2c_bus.o(i.i2c_bit_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = i2c_bit_transfer &rArr; i2c_bit_send_address &rArr; i2c_send_address &rArr; i2c_writeb &rArr; i2c_waitack &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_bytes
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_restart
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_recv_bytes
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_send_address
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soft_i2c_bus.o(.constdata)
</UL>
<P><STRONG><a name="[644]"></a>i2c_readb</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, soft_i2c_bus.o(i.i2c_readb))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = i2c_readb &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_write
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_mode
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_read
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_i2c_delay
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
</UL>
<BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_recv_bytes
</UL>

<P><STRONG><a name="[63e]"></a>i2c_recv_bytes</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, soft_i2c_bus.o(i.i2c_recv_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = i2c_recv_bytes &rArr; i2c_readb &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_ack_or_nack
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readb
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_transfer
</UL>

<P><STRONG><a name="[63c]"></a>i2c_restart</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, soft_i2c_bus.o(i.i2c_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = i2c_restart &rArr; SCL_H &rArr; os_pin_write &rArr; raw_os_pin_write &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_write
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_i2c_delay
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_transfer
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_send_address
</UL>

<P><STRONG><a name="[646]"></a>i2c_send_ack_or_nack</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, soft_i2c_bus.o(i.i2c_send_ack_or_nack))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = i2c_send_ack_or_nack &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_write
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_i2c_delay
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
</UL>
<BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_recv_bytes
</UL>

<P><STRONG><a name="[63a]"></a>i2c_send_address</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, soft_i2c_bus.o(i.i2c_send_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = i2c_send_address &rArr; i2c_writeb &rArr; i2c_waitack &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_i2c_delay
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeb
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_send_address
</UL>

<P><STRONG><a name="[63f]"></a>i2c_send_bytes</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, soft_i2c_bus.o(i.i2c_send_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = i2c_send_bytes &rArr; i2c_writeb &rArr; i2c_waitack &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeb
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_transfer
</UL>

<P><STRONG><a name="[63d]"></a>i2c_start</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, soft_i2c_bus.o(i.i2c_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = i2c_start &rArr; SCL_H &rArr; os_pin_write &rArr; raw_os_pin_write &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_write
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_mode
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_i2c_delay
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
</UL>
<BR>[Called By]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_address
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_transfer
</UL>

<P><STRONG><a name="[640]"></a>i2c_stop</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, soft_i2c_bus.o(i.i2c_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = i2c_stop &rArr; SCL_H &rArr; os_pin_write &rArr; raw_os_pin_write &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_write
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_mode
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_i2c_delay
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
</UL>
<BR>[Called By]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_address
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_transfer
</UL>

<P><STRONG><a name="[647]"></a>i2c_waitack</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, soft_i2c_bus.o(i.i2c_waitack))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = i2c_waitack &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_write
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_mode
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_read
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_i2c_delay
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
</UL>
<BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeb
</UL>

<P><STRONG><a name="[63b]"></a>i2c_writeb</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, soft_i2c_bus.o(i.i2c_writeb))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = i2c_writeb &rArr; i2c_waitack &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_write
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_i2c_delay
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_waitack
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
</UL>
<BR>[Called By]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_bytes
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_address
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_send_address
</UL>

<P><STRONG><a name="[1f2]"></a>soft_i2c_bus_probe</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, soft_i2c_bus.o(i.soft_i2c_bus_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = soft_i2c_bus_probe &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_i2c_bus_device_register
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_i2c_bus_unlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soft_i2c_bus.o(driver_table)
</UL>
<P><STRONG><a name="[7bc]"></a>soft_i2c_bus_unlock</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, soft_i2c_bus.o(i.soft_i2c_bus_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = soft_i2c_bus_unlock &rArr; os_pin_write &rArr; raw_os_pin_write &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_write
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_mode
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_read
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_i2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_i2c_bus_probe
</UL>

<P><STRONG><a name="[406]"></a>soft_i2c_delay</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, soft_i2c_bus.o(i.soft_i2c_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = soft_i2c_delay &rArr; os_clocksource_ndelay &rArr; __os_clocksource_ndelay
</UL>
<BR>[Calls]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clocksource_ndelay
</UL>
<BR>[Called By]<UL><LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_i2c_bus_unlock
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeb
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_waitack
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_address
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_ack_or_nack
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_restart
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readb
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
</UL>

<P><STRONG><a name="[c7]"></a>_spi_bus_device_control</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, spi_dev.o(i._spi_bus_device_control))
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>_spi_bus_device_read</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, spi_dev.o(i._spi_bus_device_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = _spi_bus_device_read &rArr; os_spi_transfer &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>_spi_bus_device_write</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, spi_dev.o(i._spi_bus_device_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = _spi_bus_device_write &rArr; os_spi_transfer &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>_spidev_device_control</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, spi_dev.o(i._spidev_device_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = _spidev_device_control &rArr; os_spi_transfer &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>_spidev_device_read</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, spi_dev.o(i._spidev_device_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = _spidev_device_read &rArr; os_spi_transfer &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>_spidev_device_write</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, spi_dev.o(i._spidev_device_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = _spidev_device_write &rArr; os_spi_transfer &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(.constdata)
</UL>
<P><STRONG><a name="[3e2]"></a>MSD_take_owner</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, spi_msd.o(i.MSD_take_owner))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = MSD_take_owner &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msd_sdhc_blk_write_block
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msd_sdhc_blk_read_block
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msd_blk_write_block
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msd_blk_read_block
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msd_blk_init
</UL>

<P><STRONG><a name="[512]"></a>_read_block</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, spi_msd.o(i._read_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _read_block &rArr; _wait_token &rArr; os_tick_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wait_token
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msd_sdhc_blk_read_block
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msd_blk_read_block
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msd_blk_init
</UL>

<P><STRONG><a name="[51a]"></a>_send_cmd</STRONG> (Thumb, 444 bytes, Stack size 80 bytes, spi_msd.o(i._send_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _send_cmd &rArr; _wait_ready &rArr; os_tick_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_get
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_from_ms
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_timeout
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc7
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wait_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msd_sdhc_blk_write_block
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msd_sdhc_blk_read_block
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msd_blk_write_block
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msd_blk_read_block
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msd_blk_init
</UL>

<P><STRONG><a name="[51c]"></a>_wait_ready</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, spi_msd.o(i._wait_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _wait_ready &rArr; os_tick_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_get
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_from_ms
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msd_sdhc_blk_write_block
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msd_blk_write_block
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_block
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_cmd
</UL>

<P><STRONG><a name="[513]"></a>_wait_token</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, spi_msd.o(i._wait_token))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _wait_token &rArr; os_tick_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_get
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_from_ms
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_block
</UL>

<P><STRONG><a name="[52c]"></a>_write_block</STRONG> (Thumb, 182 bytes, Stack size 64 bytes, spi_msd.o(i._write_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = _write_block &rArr; _wait_ready &rArr; os_tick_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wait_ready
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msd_sdhc_blk_write_block
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msd_blk_write_block
</UL>

<P><STRONG><a name="[51b]"></a>crc7</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, spi_msd.o(i.crc7))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = crc7
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_cmd
</UL>

<P><STRONG><a name="[6a2]"></a>msd_blk_init</STRONG> (Thumb, 2780 bytes, Stack size 176 bytes, spi_msd.o(i.msd_blk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = msd_blk_init &rArr; os_spi_configure &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_get
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_configure
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_from_ms
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_timeout
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_cmd
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_block
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_take_owner
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_take
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_release
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msd_init
</UL>

<P><STRONG><a name="[cb]"></a>msd_blk_read_block</STRONG> (Thumb, 266 bytes, Stack size 56 bytes, spi_msd.o(i.msd_blk_read_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = msd_blk_read_block &rArr; MSD_take_owner &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_cmd
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_block
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_take_owner
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_take
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_msd.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>msd_blk_write_block</STRONG> (Thumb, 380 bytes, Stack size 88 bytes, spi_msd.o(i.msd_blk_write_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = msd_blk_write_block &rArr; MSD_take_owner &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_block
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wait_ready
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_cmd
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_take_owner
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_take
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_release
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_msd.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>msd_sdhc_blk_read_block</STRONG> (Thumb, 238 bytes, Stack size 56 bytes, spi_msd.o(i.msd_sdhc_blk_read_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = msd_sdhc_blk_read_block &rArr; MSD_take_owner &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_cmd
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_block
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_take_owner
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_take
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_msd.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>msd_sdhc_blk_write_block</STRONG> (Thumb, 360 bytes, Stack size 88 bytes, spi_msd.o(i.msd_sdhc_blk_write_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = msd_sdhc_blk_write_block &rArr; MSD_take_owner &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_block
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wait_ready
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_cmd
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_take_owner
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_take
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_release
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_msd.o(.constdata)
</UL>
<P><STRONG><a name="[51d]"></a>os_tick_timeout</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, spi_msd.o(i.os_tick_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = os_tick_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msd_blk_init
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wait_token
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wait_ready
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_cmd
</UL>

<P><STRONG><a name="[155]"></a>os_hw_spi_tfcard</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, spi_tfcard.o(i.os_hw_spi_tfcard))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = os_hw_spi_tfcard &rArr; msd_init &rArr; msd_blk_init &rArr; os_spi_configure &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_spi_device_attach
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msd_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_tfcard.o(.init_call.4.1)
</UL>
<P><STRONG><a name="[5e]"></a>cotex_m_irq_hook</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, vector_table.o(i.cotex_m_irq_hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cotex_m_irq_hook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_table.o(i.cotex_m_set_vector)
</UL>
<P><STRONG><a name="[13f]"></a>cotex_m_set_vector</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, vector_table.o(i.cotex_m_set_vector))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cotex_m_vector_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_table.o(.init_call.1.1)
</UL>
<P><STRONG><a name="[2f]"></a>cotex_m_vector_entry</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, vector_table.o(i.cotex_m_vector_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cotex_m_vector_entry
</UL>
<BR>[Calls]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_num
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cotex_m_set_vector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_table.o(vtor_table)
</UL>
<P><STRONG><a name="[d1]"></a>os_watchdog_control</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, watchdog.o(i.os_watchdog_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = os_watchdog_control &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> watchdog.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>os_watchdog_deinit</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, watchdog.o(i.os_watchdog_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = os_watchdog_deinit &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> watchdog.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>os_watchdog_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, watchdog.o(i.os_watchdog_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = os_watchdog_init &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> watchdog.o(.constdata)
</UL>
<P><STRONG><a name="[57f]"></a>check_fs</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = check_fs &rArr; move_window &rArr; disk_read &rArr; os_device_read_nonblock &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[595]"></a>chk_chr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[602]"></a>clmt_clust</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, ff.o(i.clmt_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = clmt_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[5a5]"></a>clust2sect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[587]"></a>cmp_lfn</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, ff.o(i.cmp_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = cmp_lfn &rArr; ff_wtoupper
</UL>
<BR>[Calls]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[590]"></a>create_chain</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; os_device_read_nonblock &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[593]"></a>create_name</STRONG> (Thumb, 534 bytes, Stack size 56 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = create_name &rArr; ff_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[59e]"></a>dir_alloc</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ff.o(i.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; os_device_read_nonblock &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[5a1]"></a>dir_find</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; os_device_read_nonblock &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[5a0]"></a>dir_next</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; os_device_read_nonblock &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[5a6]"></a>dir_read</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, ff.o(i.dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; os_device_read_nonblock &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[5a8]"></a>dir_register</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; os_device_read_nonblock &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_lfn
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[5ac]"></a>dir_remove</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ff.o(i.dir_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = dir_remove &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; os_device_read_nonblock &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</UL>

<P><STRONG><a name="[59f]"></a>dir_sdi</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; disk_read &rArr; os_device_read_nonblock &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[600]"></a>find_volume</STRONG> (Thumb, 836 bytes, Stack size 88 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = find_volume &rArr; disk_ioctl &rArr; os_device_control &rArr; os_sem_wait &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[605]"></a>follow_path</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; os_device_read_nonblock &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[5aa]"></a>gen_numname</STRONG> (Thumb, 176 bytes, Stack size 64 bytes, ff.o(i.gen_numname))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = gen_numname &rArr; mem_cpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[591]"></a>get_fat</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = get_fat &rArr; move_window &rArr; disk_read &rArr; os_device_read_nonblock &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[618]"></a>get_fileinfo</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, ff.o(i.get_fileinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_fileinfo &rArr; ff_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[60d]"></a>get_ldnumber</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[614]"></a>ld_clust</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ff.o(i.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ld_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[582]"></a>ld_dword</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.ld_dword))
<BR><BR>[Called By]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[581]"></a>ld_word</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.ld_word))
<BR><BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[62b]"></a>lock_fs</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ff.o(i.lock_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lock_fs &rArr; ff_req_grant &rArr; os_mutex_lock &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
</UL>
<BR>[Called By]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[5a3]"></a>mem_cmp</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, ff.o(i.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[5a9]"></a>mem_cpy</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, ff.o(i.mem_cpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[596]"></a>mem_set</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ff.o(i.mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[580]"></a>move_window</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = move_window &rArr; disk_read &rArr; os_device_read_nonblock &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[5a7]"></a>pick_lfn</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, ff.o(i.pick_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pick_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[592]"></a>put_fat</STRONG> (Thumb, 400 bytes, Stack size 40 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = put_fat &rArr; move_window &rArr; disk_read &rArr; os_device_read_nonblock &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[5ab]"></a>put_lfn</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, ff.o(i.put_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = put_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[60a]"></a>remove_chain</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; os_device_read_nonblock &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[608]"></a>st_clust</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ff.o(i.st_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[607]"></a>st_dword</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.st_dword))
<BR><BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>

<P><STRONG><a name="[60f]"></a>st_word</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.st_word))
<BR><BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_lfn
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>

<P><STRONG><a name="[5a2]"></a>sum_sfn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ff.o(i.sum_sfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sum_sfn
</UL>
<BR>[Called By]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[609]"></a>sync_fs</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = sync_fs &rArr; disk_ioctl &rArr; os_device_control &rArr; os_sem_wait &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[5a4]"></a>sync_window</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sync_window &rArr; disk_write &rArr; os_device_write_nonblock &rArr;  os_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[5fd]"></a>unlock_fs</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ff.o(i.unlock_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = unlock_fs &rArr; ff_rel_grant &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
</UL>
<BR>[Called By]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[5fc]"></a>validate</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = validate &rArr; lock_fs &rArr; ff_req_grant &rArr; os_mutex_lock &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[45b]"></a>_cat</STRONG> (Thumb, 98 bytes, Stack size 104 bytes, fs_cmd.o(i._cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = _cat &rArr; vfs_open &rArr; do_openfile &rArr; vfs_mount_point_find_and_ref &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_read
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_open
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_close
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_cat
</UL>

<P><STRONG><a name="[45f]"></a>_copy</STRONG> (Thumb, 324 bytes, Stack size 176 bytes, fs_cmd.o(i._copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = _copy &rArr; _copydir &rArr; _copyfile &rArr; vfs_open &rArr; do_openfile &rArr; vfs_mount_point_find_and_ref &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_stat
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_get_path_lastname
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_destroy_absolute_path
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_create_absolute_path
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_copyfile
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_copydir
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_cp
</UL>

<P><STRONG><a name="[465]"></a>_copydir</STRONG> (Thumb, 344 bytes, Stack size 120 bytes, fs_cmd.o(i._copydir))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = _copydir &rArr; _copyfile &rArr; vfs_open &rArr; do_openfile &rArr; vfs_mount_point_find_and_ref &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_stat
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_readdir
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_opendir
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mkdir
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_destroy_absolute_path
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_create_absolute_path
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_closedir
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_init
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_path_node_push
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_path_node_pop
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_path_node_destroy
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_path_node_create
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_copyfile
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_copy
</UL>

<P><STRONG><a name="[461]"></a>_copyfile</STRONG> (Thumb, 310 bytes, Stack size 48 bytes, fs_cmd.o(i._copyfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = _copyfile &rArr; vfs_open &rArr; do_openfile &rArr; vfs_mount_point_find_and_ref &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_malloc
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_write
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_read
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_open
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_destroy_absolute_path
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_create_absolute_path
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_close
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_copydir
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_copy
</UL>

<P><STRONG><a name="[471]"></a>_df</STRONG> (Thumb, 204 bytes, Stack size 72 bytes, fs_cmd.o(i._df))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = _df &rArr; vfs_statfs &rArr; do_statfs &rArr; vfs_mount_point_find_and_ref &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_statfs
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_df
</UL>

<P><STRONG><a name="[474]"></a>_echo</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, fs_cmd.o(i._echo))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = _echo &rArr; vfs_open &rArr; do_openfile &rArr; vfs_mount_point_find_and_ref &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_write
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_open
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_close
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_echo
</UL>

<P><STRONG><a name="[4f6]"></a>_ls</STRONG> (Thumb, 150 bytes, Stack size 88 bytes, fs_cmd.o(i._ls))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = _ls &rArr; vfs_opendir &rArr; do_opendir &rArr; vfs_mount_point_find_and_ref &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_stat
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_readdir
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_opendir
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_destroy_absolute_path
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_create_absolute_path
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_closedir
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_ls
</UL>

<P><STRONG><a name="[4f7]"></a>_move</STRONG> (Thumb, 316 bytes, Stack size 176 bytes, fs_cmd.o(i._move))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = _move &rArr; vfs_rename &rArr; do_rename &rArr; vfs_mount_point_find_and_ref &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_snprintf
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_malloc
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_unlink
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_stat
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_rename
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_get_path_lastname
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_mv
</UL>

<P><STRONG><a name="[46b]"></a>_path_node_create</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, fs_cmd.o(i._path_node_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = _path_node_create &rArr; vfs_mkdir &rArr; do_opendir &rArr; vfs_mount_point_find_and_ref &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_malloc
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mkdir
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_copydir
</UL>

<P><STRONG><a name="[46d]"></a>_path_node_destroy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fs_cmd.o(i._path_node_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = _path_node_destroy &rArr; vfs_destroy_absolute_path &rArr; os_free &rArr; os_memheap_free &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_destroy_absolute_path
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_copydir
</UL>

<P><STRONG><a name="[46e]"></a>_path_node_pop</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, fs_cmd.o(i._path_node_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _path_node_pop
</UL>
<BR>[Calls]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_tail
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_copydir
</UL>

<P><STRONG><a name="[46c]"></a>_path_node_push</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, fs_cmd.o(i._path_node_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _path_node_push
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_add_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_copydir
</UL>

<P><STRONG><a name="[514]"></a>_remove</STRONG> (Thumb, 84 bytes, Stack size 80 bytes, fs_cmd.o(i._remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = _remove &rArr; _removedir &rArr; vfs_opendir &rArr; do_opendir &rArr; vfs_mount_point_find_and_ref &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_unlink
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_stat
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_removedir
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_rm
</UL>

<P><STRONG><a name="[515]"></a>_removedir</STRONG> (Thumb, 408 bytes, Stack size 120 bytes, fs_cmd.o(i._removedir))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = _removedir &rArr; vfs_opendir &rArr; do_opendir &rArr; vfs_mount_point_find_and_ref &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_unlink
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_stat
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_readdir
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_opendir
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_create_absolute_path
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_closedir
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_init
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rm_node_push
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rm_node_pop
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rm_node_destroy
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rm_node_create
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_remove
</UL>

<P><STRONG><a name="[516]"></a>_rm_node_create</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fs_cmd.o(i._rm_node_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = _rm_node_create &rArr; os_malloc &rArr; os_memheap_alloc &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_malloc
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_removedir
</UL>

<P><STRONG><a name="[519]"></a>_rm_node_destroy</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fs_cmd.o(i._rm_node_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = _rm_node_destroy &rArr; os_free &rArr; os_memheap_free &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_removedir
</UL>

<P><STRONG><a name="[518]"></a>_rm_node_pop</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, fs_cmd.o(i._rm_node_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _rm_node_pop
</UL>
<BR>[Calls]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_tail
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_init
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_removedir
</UL>

<P><STRONG><a name="[517]"></a>_rm_node_push</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, fs_cmd.o(i._rm_node_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _rm_node_push
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_add_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_removedir
</UL>

<P><STRONG><a name="[510]"></a>os_list_add_tail</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fs_cmd.o(i.os_list_add_tail))
<BR><BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rm_node_push
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_path_node_push
</UL>

<P><STRONG><a name="[50e]"></a>os_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fs_cmd.o(i.os_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rm_node_pop
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_path_node_pop
</UL>

<P><STRONG><a name="[466]"></a>os_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_cmd.o(i.os_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rm_node_pop
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rm_node_create
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_removedir
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_copydir
</UL>

<P><STRONG><a name="[50f]"></a>os_list_tail</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fs_cmd.o(i.os_list_tail))
<BR><BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rm_node_pop
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_path_node_pop
</UL>

<P><STRONG><a name="[179]"></a>sh_cat</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, fs_cmd.o(i.sh_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = sh_cat &rArr; _cat &rArr; vfs_open &rArr; do_openfile &rArr; vfs_mount_point_find_and_ref &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[17c]"></a>sh_cd</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, fs_cmd.o(i.sh_cd))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = sh_cd &rArr; vfs_chdir &rArr; do_opendir &rArr; vfs_mount_point_find_and_ref &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_chdir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[180]"></a>sh_cp</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fs_cmd.o(i.sh_cp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = sh_cp &rArr; _copy &rArr; _copydir &rArr; _copyfile &rArr; vfs_open &rArr; do_openfile &rArr; vfs_mount_point_find_and_ref &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_copy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[182]"></a>sh_df</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fs_cmd.o(i.sh_df))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = sh_df &rArr; _df &rArr; vfs_statfs &rArr; do_statfs &rArr; vfs_mount_point_find_and_ref &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_df
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[17a]"></a>sh_echo</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, fs_cmd.o(i.sh_echo))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = sh_echo &rArr; _echo &rArr; vfs_open &rArr; do_openfile &rArr; vfs_mount_point_find_and_ref &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_echo
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[17b]"></a>sh_ls</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, fs_cmd.o(i.sh_ls))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = sh_ls &rArr; _ls &rArr; vfs_opendir &rArr; do_opendir &rArr; vfs_mount_point_find_and_ref &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_malloc
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_getcwd
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ls
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[17e]"></a>sh_mkdir</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fs_cmd.o(i.sh_mkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = sh_mkdir &rArr; vfs_mkdir &rArr; do_opendir &rArr; vfs_mount_point_find_and_ref &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mkdir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[183]"></a>sh_mkfs</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, fs_cmd.o(i.sh_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = sh_mkfs &rArr; vfs_mkfs &rArr; _vfs_mkfs_dev_ref &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mkfs
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[181]"></a>sh_mv</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fs_cmd.o(i.sh_mv))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = sh_mv &rArr; _move &rArr; vfs_rename &rArr; do_rename &rArr; vfs_mount_point_find_and_ref &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_move
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[17d]"></a>sh_pwd</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, fs_cmd.o(i.sh_pwd))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = sh_pwd &rArr; vfs_getcwd &rArr; working_dir_get &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_malloc
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_getcwd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[17f]"></a>sh_rm</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, fs_cmd.o(i.sh_rm))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = sh_rm &rArr; _remove &rArr; _removedir &rArr; vfs_opendir &rArr; do_opendir &rArr; vfs_mount_point_find_and_ref &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_remove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[802]"></a>fat_result_to_vfs</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, vfs_fatfs.o(i.fat_result_to_vfs))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_seekdir
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_readdir
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_opendir
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_closedir
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_write
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_unmount
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_unlink
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_sync
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_statfs
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_stat
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_rename
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_read
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_open
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_mount
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_mkfs
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_lseek
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_close
</UL>

<P><STRONG><a name="[62d]"></a>get_disk</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, vfs_fatfs.o(i.get_disk))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_disk
</UL>
<BR>[Calls]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_get_devid
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_unmount
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_mount
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_mkfs
</UL>

<P><STRONG><a name="[7fb]"></a>v_fat_add_entry</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, vfs_fatfs.o(i.v_fat_add_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = v_fat_add_entry &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_malloc
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_opendir
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_open
</UL>

<P><STRONG><a name="[7fc]"></a>v_fat_deinit</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, vfs_fatfs.o(i.v_fat_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = v_fat_deinit &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_deinit
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_unmount
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_mount
</UL>

<P><STRONG><a name="[7fd]"></a>v_fat_del_entry</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, vfs_fatfs.o(i.v_fat_del_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = v_fat_del_entry &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_closedir
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_close
</UL>

<P><STRONG><a name="[7fe]"></a>v_fat_find_entry</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, vfs_fatfs.o(i.v_fat_find_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = v_fat_find_entry &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_unlink
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_rename
</UL>

<P><STRONG><a name="[7ff]"></a>v_fat_init</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, vfs_fatfs.o(i.v_fat_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = v_fat_init &rArr; os_mutex_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_snprintf
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_init
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_mount
</UL>

<P><STRONG><a name="[d3]"></a>vfs_fat_close</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, vfs_fatfs.o(i.vfs_fat_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = vfs_fat_close &rArr; f_close &rArr; f_sync &rArr; sync_fs &rArr; disk_ioctl &rArr; os_device_control &rArr; os_sem_wait &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v_fat_del_entry
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_result_to_vfs
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vfs_fatfs.o(.constdata)
</UL>
<P><STRONG><a name="[d6]"></a>vfs_fat_lseek</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, vfs_fatfs.o(i.vfs_fat_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = vfs_fat_lseek &rArr; f_lseek &rArr; unlock_fs &rArr; ff_rel_grant &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_result_to_vfs
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vfs_fatfs.o(.constdata)
</UL>
<P><STRONG><a name="[e0]"></a>vfs_fat_mkfs</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, vfs_fatfs.o(i.vfs_fat_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = vfs_fat_mkfs &rArr; f_mkfs &rArr; disk_ioctl &rArr; os_device_control &rArr; os_sem_wait &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_open
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_close
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_malloc
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_disk
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_result_to_vfs
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_set_devid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vfs_fatfs.o(.constdata)
</UL>
<P><STRONG><a name="[e2]"></a>vfs_fat_mount</STRONG> (Thumb, 294 bytes, Stack size 56 bytes, vfs_fatfs.o(i.vfs_fat_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = vfs_fat_mount &rArr; v_fat_deinit &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_open
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_control
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_snprintf
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_malloc
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v_fat_init
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v_fat_deinit
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_disk
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_result_to_vfs
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_set_devid
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vfs_fatfs.o(.constdata)
</UL>
<P><STRONG><a name="[d2]"></a>vfs_fat_open</STRONG> (Thumb, 318 bytes, Stack size 48 bytes, vfs_fatfs.o(i.vfs_fat_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = vfs_fat_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; os_device_read_nonblock &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_snprintf
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_malloc
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v_fat_add_entry
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_result_to_vfs
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_get_vol
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vfs_fatfs.o(.constdata)
</UL>
<P><STRONG><a name="[d4]"></a>vfs_fat_read</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, vfs_fatfs.o(i.vfs_fat_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = vfs_fat_read &rArr; f_read &rArr; unlock_fs &rArr; ff_rel_grant &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_result_to_vfs
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vfs_fatfs.o(.constdata)
</UL>
<P><STRONG><a name="[dd]"></a>vfs_fat_rename</STRONG> (Thumb, 314 bytes, Stack size 56 bytes, vfs_fatfs.o(i.vfs_fat_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = vfs_fat_rename &rArr; vfs_fat_rename_check &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; os_device_read_nonblock &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_snprintf
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_malloc
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_rename_check
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v_fat_find_entry
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_result_to_vfs
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_get_vol
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vfs_fatfs.o(.constdata)
</UL>
<P><STRONG><a name="[805]"></a>vfs_fat_rename_check</STRONG> (Thumb, 626 bytes, Stack size 64 bytes, vfs_fatfs.o(i.vfs_fat_rename_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = vfs_fat_rename_check &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; os_device_read_nonblock &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_malloc
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fat_rename
</UL>

<P><STRONG><a name="[df]"></a>vfs_fat_stat</STRONG> (Thumb, 344 bytes, Stack size 112 bytes, vfs_fatfs.o(i.vfs_fat_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = vfs_fat_stat &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; os_device_read_nonblock &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_snprintf
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_malloc
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_result_to_vfs
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_get_vol
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vfs_fatfs.o(.constdata)
</UL>
<P><STRONG><a name="[e1]"></a>vfs_fat_statfs</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, vfs_fatfs.o(i.vfs_fat_statfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = vfs_fat_statfs &rArr; f_getfree &rArr; find_volume &rArr; disk_ioctl &rArr; os_device_control &rArr; os_sem_wait &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_snprintf
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_result_to_vfs
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vfs_fatfs.o(.constdata)
</UL>
<P><STRONG><a name="[d7]"></a>vfs_fat_sync</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, vfs_fatfs.o(i.vfs_fat_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = vfs_fat_sync &rArr; f_sync &rArr; sync_fs &rArr; disk_ioctl &rArr; os_device_control &rArr; os_sem_wait &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_result_to_vfs
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vfs_fatfs.o(.constdata)
</UL>
<P><STRONG><a name="[de]"></a>vfs_fat_unlink</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, vfs_fatfs.o(i.vfs_fat_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = vfs_fat_unlink &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; os_device_read_nonblock &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_snprintf
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_malloc
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v_fat_find_entry
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_result_to_vfs
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_get_vol
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vfs_fatfs.o(.constdata)
</UL>
<P><STRONG><a name="[e3]"></a>vfs_fat_unmount</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, vfs_fatfs.o(i.vfs_fat_unmount))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = vfs_fat_unmount &rArr; v_fat_deinit &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v_fat_deinit
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_disk
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_result_to_vfs
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_set_devid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vfs_fatfs.o(.constdata)
</UL>
<P><STRONG><a name="[d5]"></a>vfs_fat_write</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, vfs_fatfs.o(i.vfs_fat_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = vfs_fat_write &rArr; f_write &rArr; unlock_fs &rArr; ff_rel_grant &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_result_to_vfs
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vfs_fatfs.o(.constdata)
</UL>
<P><STRONG><a name="[528]"></a>_vfs_fs_ops_get</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, vfs_fs.o(i._vfs_fs_ops_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = _vfs_fs_ops_get &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mkfs
</UL>

<P><STRONG><a name="[529]"></a>_vfs_mkfs_dev_deref</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, vfs_fs.o(i._vfs_mkfs_dev_deref))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = _vfs_mkfs_dev_deref &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mkfs
</UL>

<P><STRONG><a name="[52a]"></a>_vfs_mkfs_dev_ref</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, vfs_fs.o(i._vfs_mkfs_dev_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = _vfs_mkfs_dev_ref &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mkfs
</UL>

<P><STRONG><a name="[527]"></a>_vfs_conjunction_path</STRONG> (Thumb, 332 bytes, Stack size 48 bytes, vfs_misc.o(i._vfs_conjunction_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = _vfs_conjunction_path &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_snprintf
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_malloc
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_create_absolute_path
</UL>

<P><STRONG><a name="[801]"></a>_vfs_normalize_path</STRONG> (Thumb, 216 bytes, Stack size 20 bytes, vfs_misc.o(i._vfs_normalize_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _vfs_normalize_path
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_create_absolute_path
</UL>

<P><STRONG><a name="[e4]"></a>os_graphic_control</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, graphic.o(i.os_graphic_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = os_graphic_control &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_graphic_frame_set
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_graphic_frame_next
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_graphic_frame_fill
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> graphic.o(.constdata)
</UL>
<P><STRONG><a name="[6f5]"></a>os_graphic_frame_fill</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, graphic.o(i.os_graphic_frame_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = os_graphic_frame_fill
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_graphic_control
</UL>

<P><STRONG><a name="[6f3]"></a>os_graphic_frame_next</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, graphic.o(i.os_graphic_frame_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_graphic_frame_next
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_graphic_control
</UL>

<P><STRONG><a name="[6f4]"></a>os_graphic_frame_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, graphic.o(i.os_graphic_frame_set))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_graphic_control
</UL>

<P><STRONG><a name="[156]"></a>os_hw_lcd_init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, st7789vw.o(i.os_hw_lcd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = os_hw_lcd_init &rArr; st7789_init &rArr; st7789_fill_color &rArr; st7789_address_set &rArr; st7789_write_data &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_init
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_graphic_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7789vw.o(.init_call.4.1)
</UL>
<P><STRONG><a name="[76c]"></a>os_spi_send</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, st7789vw.o(i.os_spi_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = os_spi_send &rArr; os_spi_transfer &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_write_half_word
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_write_data
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_write_cmd
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_frame_flush
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_fill_color
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_display_area
</UL>

<P><STRONG><a name="[e7]"></a>st7789_display_area</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, st7789vw.o(i.st7789_display_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = st7789_display_area &rArr; st7789_fill_color &rArr; st7789_address_set &rArr; st7789_write_data &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_write
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_address_set
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_fill_color
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7789vw.o(.constdata)
</UL>
<P><STRONG><a name="[e5]"></a>st7789_display_on</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, st7789vw.o(i.st7789_display_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = st7789_display_on &rArr; st7789_switch_on &rArr; os_pin_write &rArr; raw_os_pin_write &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_switch_on
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_switch_off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7789vw.o(.constdata)
</UL>
<P><STRONG><a name="[7c2]"></a>st7789_fill_color</STRONG> (Thumb, 212 bytes, Stack size 64 bytes, st7789vw.o(i.st7789_fill_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = st7789_fill_color &rArr; st7789_address_set &rArr; st7789_write_data &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_write
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_address_set
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_write_half_word
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_send
</UL>
<BR>[Called By]<UL><LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_display_area
</UL>

<P><STRONG><a name="[e6]"></a>st7789_frame_flush</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, st7789vw.o(i.st7789_frame_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = st7789_frame_flush &rArr; st7789_address_set &rArr; st7789_write_data &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_write
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_address_set
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7789vw.o(.constdata)
</UL>
<P><STRONG><a name="[7c6]"></a>st7789_gpio_init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, st7789vw.o(i.st7789_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = st7789_gpio_init &rArr; os_task_msleep &rArr; os_task_tsleep &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_write
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_mode
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_msleep
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_switch_off
</UL>
<BR>[Called By]<UL><LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_init
</UL>

<P><STRONG><a name="[7c7]"></a>st7789_hw_config</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, st7789vw.o(i.st7789_hw_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = st7789_hw_config &rArr; os_spi_configure &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_find
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_configure
</UL>
<BR>[Called By]<UL><LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_init
</UL>

<P><STRONG><a name="[709]"></a>st7789_init</STRONG> (Thumb, 412 bytes, Stack size 8 bytes, st7789vw.o(i.st7789_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = st7789_init &rArr; st7789_fill_color &rArr; st7789_address_set &rArr; st7789_write_data &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_msleep
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_spi_device_attach
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_write_data
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_write_cmd
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_switch_on
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_hw_config
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_gpio_init
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_fill_color
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_lcd_init
</UL>

<P><STRONG><a name="[7c4]"></a>st7789_switch_off</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, st7789vw.o(i.st7789_switch_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = st7789_switch_off &rArr; os_pin_write &rArr; raw_os_pin_write &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_gpio_init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_display_on
</UL>

<P><STRONG><a name="[7c3]"></a>st7789_switch_on</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, st7789vw.o(i.st7789_switch_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = st7789_switch_on &rArr; os_pin_write &rArr; raw_os_pin_write &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_display_on
</UL>

<P><STRONG><a name="[7c0]"></a>st7789_write_cmd</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, st7789vw.o(i.st7789_write_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = st7789_write_cmd &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_write
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_send
</UL>
<BR>[Called By]<UL><LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_address_set
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_init
</UL>

<P><STRONG><a name="[7c1]"></a>st7789_write_data</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, st7789vw.o(i.st7789_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = st7789_write_data &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_write
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_send
</UL>
<BR>[Called By]<UL><LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_address_set
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_init
</UL>

<P><STRONG><a name="[7c5]"></a>st7789_write_half_word</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, st7789vw.o(i.st7789_write_half_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = st7789_write_half_word &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_write
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_send
</UL>
<BR>[Called By]<UL><LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_fill_color
</UL>

<P><STRONG><a name="[150]"></a>__driver_stm32_can_driver_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_can.o(i.__driver_stm32_can_driver_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __driver_stm32_can_driver_init &rArr; driver_match_devices
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_match_devices
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_can.o(.init_call.3.3)
</UL>
<P><STRONG><a name="[292]"></a>find_stm32_can</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, drv_can.o(i.find_stm32_can))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox2CompleteCallback
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox2AbortCallback
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox1CompleteCallback
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox1AbortCallback
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox0CompleteCallback
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox0AbortCallback
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo1MsgPendingCallback
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ErrorCallback
</UL>

<P><STRONG><a name="[7ca]"></a>stm32_can_bs1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drv_can.o(i.stm32_can_bs1))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_can_config
</UL>

<P><STRONG><a name="[7cb]"></a>stm32_can_bs2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drv_can.o(i.stm32_can_bs2))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_can_config
</UL>

<P><STRONG><a name="[7c8]"></a>stm32_can_calc_baud</STRONG> (Thumb, 338 bytes, Stack size 72 bytes, drv_can.o(i.stm32_can_calc_baud))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = stm32_can_calc_baud &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_can_config
</UL>

<P><STRONG><a name="[e8]"></a>stm32_can_config</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, drv_can.o(i.stm32_can_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = stm32_can_config &rArr; stm32_can_calc_baud &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Start
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ConfigFilter
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_can_sjw
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_can_calc_baud
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_can_bs2
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_can_bs1
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_can_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_can.o(.constdata)
</UL>
<P><STRONG><a name="[e9]"></a>stm32_can_control</STRONG> (Thumb, 500 bytes, Stack size 32 bytes, drv_can.o(i.stm32_can_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = stm32_can_control &rArr; stm32_can_config &rArr; stm32_can_calc_baud &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ConfigFilter
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_can_config
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_can.o(.constdata)
</UL>
<P><STRONG><a name="[1f3]"></a>stm32_can_probe</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, drv_can.o(i.stm32_can_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = stm32_can_probe &rArr; os_hw_can_register &rArr; os_device_register &rArr; os_plug_in &rArr; os_sem_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_can_register
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_can.o(driver_table)
</UL>
<P><STRONG><a name="[ee]"></a>stm32_can_recv_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_can.o(i.stm32_can_recv_state))
<BR>[Address Reference Count : 1]<UL><LI> drv_can.o(.constdata)
</UL>
<P><STRONG><a name="[2a5]"></a>stm32_can_recvmsg</STRONG> (Thumb, 192 bytes, Stack size 56 bytes, drv_can.o(i.stm32_can_recvmsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = stm32_can_recvmsg &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_GetRxMessage
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo1MsgPendingCallback
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
</UL>

<P><STRONG><a name="[7c9]"></a>stm32_can_sjw</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drv_can.o(i.stm32_can_sjw))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_can_config
</UL>

<P><STRONG><a name="[ec]"></a>stm32_can_start_recv</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, drv_can.o(i.stm32_can_start_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = stm32_can_start_recv &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_can.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>stm32_can_start_send</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, drv_can.o(i.stm32_can_start_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = stm32_can_start_send &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_AddTxMessage
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_can.o(.constdata)
</UL>
<P><STRONG><a name="[ed]"></a>stm32_can_stop_recv</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, drv_can.o(i.stm32_can_stop_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = stm32_can_stop_recv &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_can.o(.constdata)
</UL>
<P><STRONG><a name="[eb]"></a>stm32_can_stop_send</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, drv_can.o(i.stm32_can_stop_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = stm32_can_stop_send &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_can.o(.constdata)
</UL>
<P><STRONG><a name="[145]"></a>board_post_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, drv_common.o(i.board_post_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = board_post_init &rArr; os_hw_pin_init &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_mult_shift
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_pin_init
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cortexm_systick_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_common.o(.init_call.2.3)
</UL>
<P><STRONG><a name="[140]"></a>os_hw_board_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, drv_common.o(i.os_hw_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = os_hw_board_init &rArr; os_sys_heap_add &rArr; os_memheap_add &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_enable
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dma_mem_init
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_heap_init
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_heap_add
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SuspendTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_common.o(.init_call.1.2)
</UL>
<P><STRONG><a name="[159]"></a>__driver_stm32_crc_driver_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_crypto_crc.o(i.__driver_stm32_crc_driver_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __driver_stm32_crc_driver_init &rArr; driver_match_devices
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_match_devices
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_crypto_crc.o(.init_call.4.2)
</UL>
<P><STRONG><a name="[ef]"></a>stm32_crc_config</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, drv_crypto_crc.o(i.stm32_crc_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = stm32_crc_config &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_crypto_crc.o(.constdata)
</UL>
<P><STRONG><a name="[f3]"></a>stm32_crc_crypto_clone</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, drv_crypto_crc.o(i.stm32_crc_crypto_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stm32_crc_crypto_clone
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_crypto_crc.o(.constdata)
</UL>
<P><STRONG><a name="[f1]"></a>stm32_crc_crypto_create</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, drv_crypto_crc.o(i.stm32_crc_crypto_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = stm32_crc_crypto_create &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_crypto_crc.o(.constdata)
</UL>
<P><STRONG><a name="[f2]"></a>stm32_crc_crypto_destroy</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_crypto_crc.o(i.stm32_crc_crypto_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stm32_crc_crypto_destroy &rArr; HAL_CRC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_crypto_crc.o(.constdata)
</UL>
<P><STRONG><a name="[f4]"></a>stm32_crc_crypto_reset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drv_crypto_crc.o(i.stm32_crc_crypto_reset))
<BR>[Address Reference Count : 1]<UL><LI> drv_crypto_crc.o(.constdata)
</UL>
<P><STRONG><a name="[1f4]"></a>stm32_crc_probe</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, drv_crypto_crc.o(i.stm32_crc_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = stm32_crc_probe &rArr; os_hwcrypto_crc_register &rArr; os_hwcrypto_register &rArr; os_device_register &rArr; os_plug_in &rArr; os_sem_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_init
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hwcrypto_crc_register
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetUIDw1
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetUIDw0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_crypto_crc.o(driver_table)
</UL>
<P><STRONG><a name="[f0]"></a>stm32_crc_update</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, drv_crypto_crc.o(i.stm32_crc_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = stm32_crc_update &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_GetState
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Accumulate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_crypto_crc.o(.constdata)
</UL>
<P><STRONG><a name="[15a]"></a>__driver_stm32_rng_driver_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_crypto_rng.o(i.__driver_stm32_rng_driver_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __driver_stm32_rng_driver_init &rArr; driver_match_devices
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_match_devices
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_crypto_rng.o(.init_call.4.2)
</UL>
<P><STRONG><a name="[f8]"></a>stm32_rng_crypto_clone</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, drv_crypto_rng.o(i.stm32_rng_crypto_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stm32_rng_crypto_clone
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_crypto_rng.o(.constdata)
</UL>
<P><STRONG><a name="[f6]"></a>stm32_rng_crypto_create</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, drv_crypto_rng.o(i.stm32_rng_crypto_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = stm32_rng_crypto_create &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_Init
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_crypto_rng.o(.constdata)
</UL>
<P><STRONG><a name="[f7]"></a>stm32_rng_crypto_destroy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_crypto_rng.o(i.stm32_rng_crypto_destroy))
<BR>[Address Reference Count : 1]<UL><LI> drv_crypto_rng.o(.constdata)
</UL>
<P><STRONG><a name="[f9]"></a>stm32_rng_crypto_reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_crypto_rng.o(i.stm32_rng_crypto_reset))
<BR>[Address Reference Count : 1]<UL><LI> drv_crypto_rng.o(.constdata)
</UL>
<P><STRONG><a name="[1f5]"></a>stm32_rng_probe</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, drv_crypto_rng.o(i.stm32_rng_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = stm32_rng_probe &rArr; os_hwcrypto_rng_register &rArr; os_hwcrypto_register &rArr; os_device_register &rArr; os_plug_in &rArr; os_sem_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_init
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hwcrypto_rng_register
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetUIDw1
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetUIDw0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_crypto_rng.o(driver_table)
</UL>
<P><STRONG><a name="[f5]"></a>stm32_rng_rand</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, drv_crypto_rng.o(i.stm32_rng_rand))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = stm32_rng_rand &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_GenerateRandomNumber
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_crypto_rng.o(.constdata)
</UL>
<P><STRONG><a name="[7d5]"></a>GetBank</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, drv_flash_l4.o(i.GetBank))
<BR><BR>[Called By]<UL><LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_flash_erase
</UL>

<P><STRONG><a name="[7d4]"></a>GetPage</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drv_flash_l4.o(i.GetPage))
<BR><BR>[Called By]<UL><LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_flash_erase
</UL>

<P><STRONG><a name="[157]"></a>__driver_stm32_flash_driver_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_flash_l4.o(i.__driver_stm32_flash_driver_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __driver_stm32_flash_driver_init &rArr; driver_match_devices
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_match_devices
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_flash_l4.o(.init_call.4.1)
</UL>
<P><STRONG><a name="[88]"></a>stm32_flash_erase_block</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, drv_flash_l4.o(i.stm32_flash_erase_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = stm32_flash_erase_block &rArr; stm32_flash_erase &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_flash_erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_flash_l4.o(i.stm32_flash_probe)
</UL>
<P><STRONG><a name="[1f6]"></a>stm32_flash_probe</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, drv_flash_l4.o(i.stm32_flash_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = stm32_flash_probe &rArr; os_calloc &rArr; os_memheap_alloc &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_register
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_flash_l4.o(driver_table)
</UL>
<P><STRONG><a name="[86]"></a>stm32_flash_read_page</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, drv_flash_l4.o(i.stm32_flash_read_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = stm32_flash_read_page &rArr; stm32_flash_read &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_flash_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_flash_l4.o(i.stm32_flash_probe)
</UL>
<P><STRONG><a name="[87]"></a>stm32_flash_write_page</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, drv_flash_l4.o(i.stm32_flash_write_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = stm32_flash_write_page &rArr; stm32_flash_write &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_flash_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_flash_l4.o(i.stm32_flash_probe)
</UL>
<P><STRONG><a name="[2bb]"></a>bit2bitno</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, drv_gpio.o(i.bit2bitno))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[7df]"></a>get_pin_index</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, drv_gpio.o(i.get_pin_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_pin_index
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_write
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_read
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_mode
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_irq_enable
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_dettach_irq
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_attach_irq
</UL>

<P><STRONG><a name="[2bc]"></a>pin_irq_hdr</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, drv_gpio.o(i.pin_irq_hdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pin_irq_hdr
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[fd]"></a>stm32_pin_attach_irq</STRONG> (Thumb, 380 bytes, Stack size 64 bytes, drv_gpio.o(i.stm32_pin_attach_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = stm32_pin_attach_irq &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXTI_ClearPending
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin_index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[fe]"></a>stm32_pin_dettach_irq</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, drv_gpio.o(i.stm32_pin_dettach_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = stm32_pin_dettach_irq &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin_index
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[ff]"></a>stm32_pin_irq_enable</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, drv_gpio.o(i.stm32_pin_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = stm32_pin_irq_enable &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin_index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[fa]"></a>stm32_pin_mode</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, drv_gpio.o(i.stm32_pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = stm32_pin_mode &rArr; stm32_pin_dettach_irq &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_dettach_irq
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin_index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[fc]"></a>stm32_pin_read</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, drv_gpio.o(i.stm32_pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = stm32_pin_read &rArr; get_pin_index
</UL>
<BR>[Calls]<UL><LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin_index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[fb]"></a>stm32_pin_write</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, drv_gpio.o(i.stm32_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = stm32_pin_write &rArr; get_pin_index
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin_index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[14d]"></a>__driver_stm32_tim_driver_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_hwtimer.o(i.__driver_stm32_tim_driver_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __driver_stm32_tim_driver_init &rArr; driver_match_devices
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_match_devices
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_hwtimer.o(.init_call.3.2)
</UL>
<P><STRONG><a name="[1f7]"></a>stm32_tim_probe</STRONG> (Thumb, 360 bytes, Stack size 24 bytes, drv_hwtimer.o(i.stm32_tim_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = stm32_tim_probe &rArr; os_clocksource_register &rArr; os_device_register &rArr; os_plug_in &rArr; os_sem_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clocksource_register
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clocksource_best
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_register
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pwm_register
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_timer_is_32b
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_timer_mode_judge
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_timer_get_freq
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_hwtimer.o(driver_table)
</UL>
<P><STRONG><a name="[7eb]"></a>stm32_timer_get_freq</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, drv_hwtimer.o(i.stm32_timer_get_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = stm32_timer_get_freq &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_timer_line
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_tim_probe
</UL>

<P><STRONG><a name="[7ee]"></a>stm32_timer_line</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, drv_hwtimer.o(i.stm32_timer_line))
<BR><BR>[Called By]<UL><LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_timer_get_freq
</UL>

<P><STRONG><a name="[7ec]"></a>stm32_timer_mode_judge</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, drv_hwtimer.o(i.stm32_timer_mode_judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stm32_timer_mode_judge
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_tim_probe
</UL>

<P><STRONG><a name="[89]"></a>stm32_timer_read</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drv_hwtimer.o(i.stm32_timer_read))
<BR>[Address Reference Count : 2]<UL><LI> drv_hwtimer.o(.constdata)
<LI> drv_hwtimer.o(i.stm32_tim_probe)
</UL>
<P><STRONG><a name="[100]"></a>stm32_timer_start</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, drv_hwtimer.o(i.stm32_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = stm32_timer_start &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_hwtimer.o(.constdata)
</UL>
<P><STRONG><a name="[101]"></a>stm32_timer_stop</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, drv_hwtimer.o(i.stm32_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = stm32_timer_stop &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop_IT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_hwtimer.o(.constdata)
</UL>
<P><STRONG><a name="[151]"></a>__driver_stm32_iwdt_driver_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_iwdg.o(i.__driver_stm32_iwdt_driver_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __driver_stm32_iwdt_driver_init &rArr; driver_match_devices
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_match_devices
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_iwdg.o(.init_call.3.3)
</UL>
<P><STRONG><a name="[7d9]"></a>stm32_iwdg_refresh</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, drv_iwdg.o(i.stm32_iwdg_refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = stm32_iwdg_refresh &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_iwdt_control
</UL>

<P><STRONG><a name="[7db]"></a>stm32_iwdg_start</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_iwdg.o(i.stm32_iwdg_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = stm32_iwdg_start &rArr; MX_IWDG_Init &rArr; HAL_IWDG_Init &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG2_Init
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_iwdt_control
</UL>

<P><STRONG><a name="[103]"></a>stm32_iwdt_control</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, drv_iwdg.o(i.stm32_iwdt_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = stm32_iwdt_control &rArr; stm32_iwdg_refresh &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_iwdg_start
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_iwdg_refresh
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_iwdg.o(.constdata)
</UL>
<P><STRONG><a name="[102]"></a>stm32_iwdt_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_iwdg.o(i.stm32_iwdt_init))
<BR>[Address Reference Count : 1]<UL><LI> drv_iwdg.o(.constdata)
</UL>
<P><STRONG><a name="[1f8]"></a>stm32_iwdt_probe</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, drv_iwdg.o(i.stm32_iwdt_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = stm32_iwdt_probe &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_watchdog_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_iwdg.o(driver_table)
</UL>
<P><STRONG><a name="[148]"></a>__driver_stm32_lptim_driver_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_lptim.o(i.__driver_stm32_lptim_driver_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __driver_stm32_lptim_driver_init &rArr; driver_match_devices
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_match_devices
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_lptim.o(.init_call.3.1)
</UL>
<P><STRONG><a name="[2c5]"></a>lptim_callback</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, drv_lptim.o(i.lptim_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = lptim_callback &rArr; os_clockevent_isr &rArr; os_clockevent_next &rArr; os_clockevent_calc_param &rArr; period_calc_next_nsec &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_CompareMatchCallback
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_AutoReloadMatchCallback
</UL>

<P><STRONG><a name="[1f9]"></a>stm32_lptim_probe</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, drv_lptim.o(i.stm32_lptim_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = stm32_lptim_probe &rArr; os_clockevent_register &rArr; os_device_register &rArr; os_plug_in &rArr; os_sem_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clockevent_register
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_lptim.o(driver_table)
</UL>
<P><STRONG><a name="[104]"></a>stm32_lptimer_start</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, drv_lptim.o(i.stm32_lptimer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = stm32_lptimer_start &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_TimeOut_Start_IT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_lptim.o(.constdata)
</UL>
<P><STRONG><a name="[105]"></a>stm32_lptimer_stop</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, drv_lptim.o(i.stm32_lptimer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = stm32_lptimer_stop &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_Counter_Stop_IT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_lptim.o(.constdata)
</UL>
<P><STRONG><a name="[7e2]"></a>get_pwm_channel</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, drv_pwm.o(i.get_pwm_channel))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pwm_set_pulse
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pwm_enabled
</UL>

<P><STRONG><a name="[107]"></a>stm32_pwm_enabled</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, drv_pwm.o(i.stm32_pwm_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = stm32_pwm_enabled &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pwm_channel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pwm.o(.constdata)
</UL>
<P><STRONG><a name="[108]"></a>stm32_pwm_set_period</STRONG> (Thumb, 248 bytes, Stack size 64 bytes, drv_pwm.o(i.stm32_pwm_set_period))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = stm32_pwm_set_period &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pwm.o(.constdata)
</UL>
<P><STRONG><a name="[109]"></a>stm32_pwm_set_pulse</STRONG> (Thumb, 316 bytes, Stack size 56 bytes, drv_pwm.o(i.stm32_pwm_set_pulse))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = stm32_pwm_set_pulse &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_GenerateEvent
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pwm_channel
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pwm.o(.constdata)
</UL>
<P><STRONG><a name="[152]"></a>__driver_stm32_qspi_driver_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_qspi.o(i.__driver_stm32_qspi_driver_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __driver_stm32_qspi_driver_init &rArr; driver_match_devices
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_match_devices
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_qspi.o(.init_call.3.3)
</UL>
<P><STRONG><a name="[1fa]"></a>stm32_qspi_bus_probe</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, drv_qspi.o(i.stm32_qspi_bus_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = stm32_qspi_bus_probe &rArr; os_sfbus_xspi_register &rArr; os_device_register &rArr; os_plug_in &rArr; os_sem_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sfbus_xspi_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_qspi.o(driver_table)
</UL>
<P><STRONG><a name="[10a]"></a>stm32_qspi_configure</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, drv_qspi.o(i.stm32_qspi_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = stm32_qspi_configure &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_qspi.o(.constdata)
</UL>
<P><STRONG><a name="[10b]"></a>stm32_qspi_transfer</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, drv_qspi.o(i.stm32_qspi_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = stm32_qspi_transfer &rArr; stm32_qspi_xfer_command &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_qspi_xfer_command
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_qspi.o(.constdata)
</UL>
<P><STRONG><a name="[7e7]"></a>stm32_qspi_xfer_command</STRONG> (Thumb, 346 bytes, Stack size 72 bytes, drv_qspi.o(i.stm32_qspi_xfer_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = stm32_qspi_xfer_command &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_qspi_transfer
</UL>

<P><STRONG><a name="[153]"></a>__driver_stm32_rtc_driver_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_rtc.o(i.__driver_stm32_rtc_driver_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __driver_stm32_rtc_driver_init &rArr; driver_match_devices
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_match_devices
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_rtc.o(.init_call.3.3)
</UL>
<P><STRONG><a name="[10c]"></a>os_rtc_control</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, drv_rtc.o(i.os_rtc_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = os_rtc_control &rArr; stm32_rtc_get_timestamp &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_rtc_set_time_stamp
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_rtc_set_alarm_stamp
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_rtc_get_timestamp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_rtc.o(.constdata)
</UL>
<P><STRONG><a name="[734]"></a>stm32_rtc_get_timestamp</STRONG> (Thumb, 108 bytes, Stack size 88 bytes, drv_rtc.o(i.stm32_rtc_get_timestamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = stm32_rtc_get_timestamp &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rtc_control
</UL>

<P><STRONG><a name="[7e8]"></a>stm32_rtc_init</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, drv_rtc.o(i.stm32_rtc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = stm32_rtc_init &rArr; stm32_rtc_set_time_stamp &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPRead
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_rtc_set_time_stamp
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_rtc_probe
</UL>

<P><STRONG><a name="[1fb]"></a>stm32_rtc_probe</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, drv_rtc.o(i.stm32_rtc_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = stm32_rtc_probe &rArr; stm32_rtc_init &rArr; stm32_rtc_set_time_stamp &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_register
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_rtc_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_rtc.o(driver_table)
</UL>
<P><STRONG><a name="[736]"></a>stm32_rtc_set_alarm_stamp</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, drv_rtc.o(i.stm32_rtc_set_alarm_stamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = stm32_rtc_set_alarm_stamp &rArr; RTC_Set_AlarmA &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_AlarmA
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rtc_control
</UL>

<P><STRONG><a name="[735]"></a>stm32_rtc_set_time_stamp</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, drv_rtc.o(i.stm32_rtc_set_time_stamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = stm32_rtc_set_time_stamp &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPWrite
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_rtc_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rtc_control
</UL>

<P><STRONG><a name="[358]"></a>HAL_SAI_RxCallback</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, drv_sai.o(i.HAL_SAI_RxCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = HAL_SAI_RxCallback &rArr; os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_post
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_RxHalfCpltCallback
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_RxCpltCallback
</UL>

<P><STRONG><a name="[154]"></a>__driver_stm32_sai_driver_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_sai.o(i.__driver_stm32_sai_driver_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __driver_stm32_sai_driver_init &rArr; driver_match_devices
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_match_devices
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sai.o(.init_call.3.3)
</UL>
<P><STRONG><a name="[10e]"></a>stm32_sai_dma_receive</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, drv_sai.o(i.stm32_sai_dma_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = stm32_sai_dma_receive &rArr; os_sem_wait &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_wait
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sai.o(.constdata)
</UL>
<P><STRONG><a name="[110]"></a>stm32_sai_dma_rx_enable</STRONG> (Thumb, 384 bytes, Stack size 40 bytes, drv_sai.o(i.stm32_sai_dma_rx_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = stm32_sai_dma_rx_enable &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_init
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_deinit
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_find
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Transmit
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Receive_DMA
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_DMAStop
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sai.o(.constdata)
</UL>
<P><STRONG><a name="[10d]"></a>stm32_sai_dma_transmit</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, drv_sai.o(i.stm32_sai_dma_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = stm32_sai_dma_transmit &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_wait
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Transmit_DMA
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sai.o(.constdata)
</UL>
<P><STRONG><a name="[10f]"></a>stm32_sai_dma_tx_enable</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, drv_sai.o(i.stm32_sai_dma_tx_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = stm32_sai_dma_tx_enable &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_init
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_deinit
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_DMAStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sai.o(.constdata)
</UL>
<P><STRONG><a name="[1fc]"></a>stm32_sai_probe</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, drv_sai.o(i.stm32_sai_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = stm32_sai_probe &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sai_register
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sai.o(driver_table)
</UL>
<P><STRONG><a name="[112]"></a>stm32_sai_set_channel</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, drv_sai.o(i.stm32_sai_set_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = stm32_sai_set_channel &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sai.o(.constdata)
</UL>
<P><STRONG><a name="[111]"></a>stm32_sai_set_frq</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, drv_sai.o(i.stm32_sai_set_frq))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = stm32_sai_set_frq &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sai.o(.constdata)
</UL>
<P><STRONG><a name="[14e]"></a>__driver_stm32_spi_driver_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_spi.o(i.__driver_stm32_spi_driver_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __driver_stm32_spi_driver_init &rArr; driver_match_devices
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_match_devices
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spi.o(.init_call.3.2)
</UL>
<P><STRONG><a name="[113]"></a>spi_configure</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, drv_spi.o(i.spi_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = spi_configure &rArr; stm32_spi_init &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spi.o(.constdata)
</UL>
<P><STRONG><a name="[114]"></a>spixfer</STRONG> (Thumb, 536 bytes, Stack size 72 bytes, drv_spi.o(i.spixfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = spixfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_write
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit_DMA
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_DMA
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_DMA
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_GetState
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spi.o(.constdata)
</UL>
<P><STRONG><a name="[7bd]"></a>stm32_spi_init</STRONG> (Thumb, 422 bytes, Stack size 48 bytes, drv_spi.o(i.stm32_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = stm32_spi_init &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_configure
</UL>

<P><STRONG><a name="[1fd]"></a>stm32_spi_probe</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, drv_spi.o(i.stm32_spi_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = stm32_spi_probe &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_bus_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spi.o(driver_table)
</UL>
<P><STRONG><a name="[149]"></a>__driver_stm32_usart_driver_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_usart.o(i.__driver_stm32_usart_driver_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __driver_stm32_usart_driver_init &rArr; driver_match_devices
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_match_devices
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(.init_call.3.1)
</UL>
<P><STRONG><a name="[142]"></a>__driver_stm32_usart_early_driver_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_usart.o(i.__driver_stm32_usart_early_driver_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __driver_stm32_usart_early_driver_init &rArr; driver_match_devices
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_match_devices
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(.init_call.1.3)
</UL>
<P><STRONG><a name="[8f]"></a>stm32_sdma_dma_get_index</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_usart.o(i.stm32_sdma_dma_get_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stm32_sdma_dma_get_index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(i.stm32_usart_sdma_init)
</UL>
<P><STRONG><a name="[90]"></a>stm32_sdma_dma_start</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, drv_usart.o(i.stm32_sdma_dma_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = stm32_sdma_dma_start &rArr; HAL_UART_Receive_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(i.stm32_usart_sdma_init)
</UL>
<P><STRONG><a name="[91]"></a>stm32_sdma_dma_stop</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, drv_usart.o(i.stm32_sdma_dma_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = stm32_sdma_dma_stop &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(i.stm32_usart_sdma_init)
</UL>
<P><STRONG><a name="[8c]"></a>stm32_sdma_int_get_index</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, drv_usart.o(i.stm32_sdma_int_get_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stm32_sdma_int_get_index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(i.stm32_usart_sdma_init)
</UL>
<P><STRONG><a name="[8d]"></a>stm32_sdma_int_start</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, drv_usart.o(i.stm32_sdma_int_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = stm32_sdma_int_start &rArr; HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(i.stm32_usart_sdma_init)
</UL>
<P><STRONG><a name="[8e]"></a>stm32_sdma_int_stop</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, drv_usart.o(i.stm32_sdma_int_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = stm32_sdma_int_stop &rArr; HAL_UART_AbortReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(i.stm32_usart_sdma_init)
</UL>
<P><STRONG><a name="[116]"></a>stm32_uart_deinit</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, drv_usart.o(i.stm32_uart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = stm32_uart_deinit &rArr; os_plug_put &rArr; os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_plug_put
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_stop
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_deinit
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmit
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>stm32_uart_halt</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, drv_usart.o(i.stm32_uart_halt))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = stm32_uart_halt &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(i.stm32_usart_probe)
</UL>
<P><STRONG><a name="[115]"></a>stm32_uart_init</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, drv_usart.o(i.stm32_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = stm32_uart_init &rArr; stm32_usart_sdma_init &rArr; soft_dma_start &rArr; soft_dma_buffer_init &rArr; soft_dma_normal_buffer_init &rArr; os_dma_malloc_align &rArr; os_aligned_malloc &rArr; os_memheap_aligned_alloc &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_plug_get
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_usart_sdma_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(.constdata)
</UL>
<P><STRONG><a name="[118]"></a>stm32_uart_poll_send</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, drv_usart.o(i.stm32_uart_poll_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = stm32_uart_poll_send &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>stm32_uart_release</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, drv_usart.o(i.stm32_uart_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = stm32_uart_release &rArr; os_free &rArr; os_memheap_free &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(i.stm32_usart_probe)
</UL>
<P><STRONG><a name="[117]"></a>stm32_uart_start_send</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, drv_usart.o(i.stm32_uart_start_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = stm32_uart_start_send &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_IT
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(.constdata)
</UL>
<P><STRONG><a name="[1ff]"></a>stm32_usart_early_probe</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, drv_usart.o(i.stm32_usart_early_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stm32_usart_early_probe
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(driver_table)
</UL>
<P><STRONG><a name="[7f4]"></a>stm32_usart_parse_configs_from_stm32cube</STRONG> (Thumb, 212 bytes, Stack size 0 bytes, drv_usart.o(i.stm32_usart_parse_configs_from_stm32cube))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_usart_probe
</UL>

<P><STRONG><a name="[1fe]"></a>stm32_usart_probe</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, drv_usart.o(i.stm32_usart_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = stm32_usart_probe &rArr; os_hw_serial_register &rArr; os_device_register &rArr; os_plug_in &rArr; os_sem_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_plug_in
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_serial_register
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_usart_parse_configs_from_stm32cube
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(driver_table)
</UL>
<P><STRONG><a name="[92]"></a>stm32_usart_sdma_callback</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, drv_usart.o(i.stm32_usart_sdma_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = stm32_usart_sdma_callback &rArr; os_hw_serial_isr_rxdone &rArr; os_device_recv_notify &rArr; os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_serial_isr_rxdone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(i.stm32_usart_sdma_init)
</UL>
<P><STRONG><a name="[7f2]"></a>stm32_usart_sdma_init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, drv_usart.o(i.stm32_usart_sdma_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = stm32_usart_sdma_init &rArr; soft_dma_start &rArr; soft_dma_buffer_init &rArr; soft_dma_normal_buffer_init &rArr; os_dma_malloc_align &rArr; os_aligned_malloc &rArr; os_memheap_aligned_alloc &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_calc_byte_timeout_us
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_stop
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_start
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_irq_enable
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_dma_init
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_uart_init
</UL>

<P><STRONG><a name="[15e]"></a>__driver_stm32_usbd_driver_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_usbd.o(i.__driver_stm32_usbd_driver_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __driver_stm32_usbd_driver_init &rArr; driver_match_devices
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_match_devices
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbd.o(.init_call.4.3)
</UL>
<P><STRONG><a name="[200]"></a>stm32_usbd_probe</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, drv_usbd.o(i.stm32_usbd_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = stm32_usbd_probe &rArr; usbd_dectect_task_create &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dectect_task_create
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbd.o(driver_table)
</UL>
<P><STRONG><a name="[93]"></a>usbd_hotplug_detect</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, drv_usbd.o(i.usbd_hotplug_detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = usbd_hotplug_detect &rArr; os_mb_recv &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mb_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbd.o(i.usbd_dectect_task_create)
</UL>
<P><STRONG><a name="[2d4]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[2d5]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[2aa]"></a>CRC_Handle_16</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32l4xx_hal_crc.o(i.CRC_Handle_16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRC_Handle_16
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Accumulate
</UL>

<P><STRONG><a name="[2a9]"></a>CRC_Handle_8</STRONG> (Thumb, 146 bytes, Stack size 20 bytes, stm32l4xx_hal_crc.o(i.CRC_Handle_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CRC_Handle_8
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Accumulate
</UL>

<P><STRONG><a name="[2b1]"></a>DMA_SetConfig</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, stm32l4xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[2b8]"></a>FLASH_Program_DoubleWord</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32l4xx_hal_flash.o(i.FLASH_Program_DoubleWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Program_DoubleWord
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[2b9]"></a>FLASH_Program_Fast</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, stm32l4xx_hal_flash.o(i.FLASH_Program_Fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_Program_Fast
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[2b4]"></a>FLASH_MassErase</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32l4xx_hal_flash_ex.o(i.FLASH_MassErase))
<BR><BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[2d3]"></a>LPTIM_WaitForFlag</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, stm32l4xx_hal_lptim.o(i.LPTIM_WaitForFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LPTIM_WaitForFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_TimeOut_Start_IT
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_Disable
</UL>

<P><STRONG><a name="[2f8]"></a>PCD_EP_OutSetupPacket_int</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, stm32l4xx_hal_pcd.o(i.PCD_EP_OutSetupPacket_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = PCD_EP_OutSetupPacket_int &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[2f7]"></a>PCD_EP_OutXfrComplete_int</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, stm32l4xx_hal_pcd.o(i.PCD_EP_OutXfrComplete_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PCD_EP_OutXfrComplete_int &rArr; HAL_PCD_DataOutStageCallback &rArr; USBD_LL_DataOutStage &rArr; USBD_CtlContinueRx
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[2fb]"></a>PCD_WriteEmptyTxFifo</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, stm32l4xx_hal_pcd.o(i.PCD_WriteEmptyTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PCD_WriteEmptyTxFifo &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[329]"></a>QSPI_Config</STRONG> (Thumb, 488 bytes, Stack size 8 bytes, stm32l4xx_hal_qspi.o(i.QSPI_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QSPI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
</UL>

<P><STRONG><a name="[327]"></a>QSPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, stm32l4xx_hal_qspi.o(i.QSPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Abort
</UL>

<P><STRONG><a name="[339]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc.o(i.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_GetVoltageRange
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[330]"></a>RCCEx_GetSAIxPeriphCLKFreq</STRONG> (Thumb, 348 bytes, Stack size 20 bytes, stm32l4xx_hal_rcc_ex.o(i.RCCEx_GetSAIxPeriphCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCCEx_GetSAIxPeriphCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[335]"></a>RCCEx_PLLSAI1_Config</STRONG> (Thumb, 378 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc_ex.o(i.RCCEx_PLLSAI1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RCCEx_PLLSAI1_Config &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[336]"></a>RCCEx_PLLSAI2_Config</STRONG> (Thumb, 342 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc_ex.o(i.RCCEx_PLLSAI2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RCCEx_PLLSAI2_Config &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[3c]"></a>SAI_DMAError</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32l4xx_hal_sai.o(i.SAI_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SAI_DMAError &rArr; SAI_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Disable
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_ErrorCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32l4xx_hal_sai.o(i.HAL_SAI_Receive_DMA)
<LI> stm32l4xx_hal_sai.o(i.HAL_SAI_Transmit_DMA)
</UL>
<P><STRONG><a name="[3b]"></a>SAI_DMARxCplt</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32l4xx_hal_sai.o(i.SAI_DMARxCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = SAI_DMARxCplt &rArr; HAL_SAI_RxCpltCallback &rArr; HAL_SAI_RxCallback &rArr; os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_RxCpltCallback
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_InterruptFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_sai.o(i.HAL_SAI_Receive_DMA)
</UL>
<P><STRONG><a name="[3a]"></a>SAI_DMARxHalfCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32l4xx_hal_sai.o(i.SAI_DMARxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = SAI_DMARxHalfCplt &rArr; HAL_SAI_RxHalfCpltCallback &rArr; HAL_SAI_RxCallback &rArr; os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_RxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_sai.o(i.HAL_SAI_Receive_DMA)
</UL>
<P><STRONG><a name="[3e]"></a>SAI_DMATxCplt</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32l4xx_hal_sai.o(i.SAI_DMATxCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = SAI_DMATxCplt &rArr; HAL_SAI_TxCpltCallback &rArr; os_hw_sai_isr &rArr; os_device_send_notify &rArr; os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_TxCpltCallback
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_InterruptFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_sai.o(i.HAL_SAI_Transmit_DMA)
</UL>
<P><STRONG><a name="[3d]"></a>SAI_DMATxHalfCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32l4xx_hal_sai.o(i.SAI_DMATxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = SAI_DMATxHalfCplt &rArr; HAL_SAI_TxHalfCpltCallback &rArr; os_hw_sai_isr &rArr; os_device_send_notify &rArr; os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_sai.o(i.HAL_SAI_Transmit_DMA)
</UL>
<P><STRONG><a name="[34e]"></a>SAI_Disable</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32l4xx_hal_sai.o(i.SAI_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SAI_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Transmit
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_DMAStop
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_DMAError
</UL>

<P><STRONG><a name="[35d]"></a>SAI_FillFifo</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, stm32l4xx_hal_sai.o(i.SAI_FillFifo))
<BR><BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Transmit
</UL>

<P><STRONG><a name="[352]"></a>SAI_InitI2S</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, stm32l4xx_hal_sai.o(i.SAI_InitI2S))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SAI_InitI2S
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_InitProtocol
</UL>

<P><STRONG><a name="[353]"></a>SAI_InitPCM</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32l4xx_hal_sai.o(i.SAI_InitPCM))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SAI_InitPCM
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_InitProtocol
</UL>

<P><STRONG><a name="[357]"></a>SAI_InterruptFlag</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32l4xx_hal_sai.o(i.SAI_InterruptFlag))
<BR><BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Transmit_DMA
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Receive_DMA
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_DMATxCplt
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_DMARxCplt
</UL>

<P><STRONG><a name="[41]"></a>SPI_DMAError</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32l4xx_hal_spi.o(i.SPI_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Address Reference Count : 3]<UL><LI> stm32l4xx_hal_spi.o(i.HAL_SPI_Receive_DMA)
<LI> stm32l4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
<LI> stm32l4xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
</UL>
<P><STRONG><a name="[3f]"></a>SPI_DMAHalfReceiveCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32l4xx_hal_spi.o(i.SPI_DMAHalfReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_DMAHalfReceiveCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32l4xx_hal_spi.o(i.HAL_SPI_Receive_DMA)
<LI> stm32l4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
</UL>
<P><STRONG><a name="[44]"></a>SPI_DMAHalfTransmitCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32l4xx_hal_spi.o(i.SPI_DMAHalfTransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_DMAHalfTransmitCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
</UL>
<P><STRONG><a name="[42]"></a>SPI_DMAHalfTransmitReceiveCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32l4xx_hal_spi.o(i.SPI_DMAHalfTransmitReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_DMAHalfTransmitReceiveCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
</UL>
<P><STRONG><a name="[40]"></a>SPI_DMAReceiveCplt</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32l4xx_hal_spi.o(i.SPI_DMAReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SPI_DMAReceiveCplt &rArr; SPI_EndRxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxCpltCallback
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32l4xx_hal_spi.o(i.HAL_SPI_Receive_DMA)
<LI> stm32l4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
</UL>
<P><STRONG><a name="[45]"></a>SPI_DMATransmitCplt</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, stm32l4xx_hal_spi.o(i.SPI_DMATransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SPI_DMATransmitCplt &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxCpltCallback
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
</UL>
<P><STRONG><a name="[43]"></a>SPI_DMATransmitReceiveCplt</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32l4xx_hal_spi.o(i.SPI_DMATransmitReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SPI_DMATransmitReceiveCplt &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxCpltCallback
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
</UL>
<P><STRONG><a name="[366]"></a>SPI_EndRxTransaction</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, stm32l4xx_hal_spi.o(i.SPI_EndRxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_EndRxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAReceiveCplt
</UL>

<P><STRONG><a name="[36a]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32l4xx_hal_spi.o(i.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitReceiveCplt
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
</UL>

<P><STRONG><a name="[40f]"></a>SPI_WaitFifoStateUntilTimeout</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, stm32l4xx_hal_spi.o(i.SPI_WaitFifoStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_WaitFifoStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
</UL>

<P><STRONG><a name="[40e]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, stm32l4xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
</UL>

<P><STRONG><a name="[372]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[37f]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 146 bytes, Stack size 12 bytes, stm32l4xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[381]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 154 bytes, Stack size 12 bytes, stm32l4xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[382]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, stm32l4xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[383]"></a>TIM_OC5_SetConfig</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, stm32l4xx_hal_tim.o(i.TIM_OC5_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC5_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[384]"></a>TIM_OC6_SetConfig</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, stm32l4xx_hal_tim.o(i.TIM_OC6_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC6_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[371]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, stm32l4xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[373]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32l4xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[46]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stm32l4xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = UART_DMAAbortOnError &rArr; HAL_UART_ErrorCallback &rArr; stm32_sdma_dma_start &rArr; HAL_UART_Receive_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[49]"></a>UART_DMAError</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.UART_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = UART_DMAError &rArr; HAL_UART_ErrorCallback &rArr; stm32_sdma_dma_start &rArr; HAL_UART_Receive_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
<LI> stm32l4xx_hal_uart.o(i.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[52]"></a>UART_DMAReceiveCplt</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32l4xx_hal_uart.o(i.UART_DMAReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = UART_DMAReceiveCplt &rArr; HAL_UART_RxCpltCallback &rArr; soft_dma_timeout_irq &rArr; soft_dma_irq &rArr; soft_dma_updata_buffer &rArr; soft_dma_normal_updata_buffer &rArr; copy_ring_to_ring &rArr; copy_line_to_ring &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[53]"></a>UART_DMARxHalfCplt</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32l4xx_hal_uart.o(i.UART_DMARxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = UART_DMARxHalfCplt &rArr; HAL_UART_RxHalfCpltCallback &rArr; HAL_UART_RxCpltCallback &rArr; soft_dma_timeout_irq &rArr; soft_dma_irq &rArr; soft_dma_updata_buffer &rArr; soft_dma_normal_updata_buffer &rArr; copy_ring_to_ring &rArr; copy_line_to_ring &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[47]"></a>UART_DMATransmitCplt</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32l4xx_hal_uart.o(i.UART_DMATransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = UART_DMATransmitCplt &rArr; HAL_UART_TxCpltCallback &rArr; os_hw_serial_isr_txdone &rArr; os_device_send_notify &rArr; os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[48]"></a>UART_DMATxHalfCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32l4xx_hal_uart.o(i.UART_DMATxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMATxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[392]"></a>UART_EndRxTransfer</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[396]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback &rArr; os_hw_serial_isr_txdone &rArr; os_device_send_notify &rArr; os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[41f]"></a>UART_EndTxTransfer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_EndTxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[54]"></a>UART_RxISR_16BIT</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.UART_RxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = UART_RxISR_16BIT &rArr; HAL_UART_RxCpltCallback &rArr; soft_dma_timeout_irq &rArr; soft_dma_irq &rArr; soft_dma_updata_buffer &rArr; soft_dma_normal_updata_buffer &rArr; copy_ring_to_ring &rArr; copy_line_to_ring &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[55]"></a>UART_RxISR_8BIT</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, stm32l4xx_hal_uart.o(i.UART_RxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = UART_RxISR_8BIT &rArr; HAL_UART_RxCpltCallback &rArr; soft_dma_timeout_irq &rArr; soft_dma_irq &rArr; soft_dma_updata_buffer &rArr; soft_dma_normal_updata_buffer &rArr; copy_ring_to_ring &rArr; copy_line_to_ring &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[4a]"></a>UART_TxISR_16BIT</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_TxISR_16BIT))
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_IT)
</UL>
<P><STRONG><a name="[4b]"></a>UART_TxISR_8BIT</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_TxISR_8BIT))
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_IT)
</UL>
<P><STRONG><a name="[43a]"></a>USB_CoreReset</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32l4xx_ll_usb.o(i.USB_CoreReset))
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
</UL>

<P><STRONG><a name="[11a]"></a>_infrared_deinit</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, infrared.o(i._infrared_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _infrared_deinit &rArr; infrared_send_deinit &rArr; os_pin_mode &rArr; raw_os_pin_mode &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_send_deinit
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_recv_deinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> infrared.o(.constdata)
</UL>
<P><STRONG><a name="[119]"></a>_infrared_init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, infrared.o(i._infrared_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = _infrared_init &rArr; infrared_recv_init &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_send_init
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_recv_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> infrared.o(.constdata)
</UL>
<P><STRONG><a name="[11b]"></a>_infrared_read</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, infrared.o(i._infrared_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = _infrared_read &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> infrared.o(.constdata)
</UL>
<P><STRONG><a name="[11c]"></a>_infrared_write</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, infrared.o(i._infrared_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = _infrared_write &rArr; infrared_send &rArr; irk_on_us &rArr; os_pin_write &rArr; raw_os_pin_write &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> infrared.o(.constdata)
</UL>
<P><STRONG><a name="[476]"></a>infrared_recv_deinit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, infrared.o(i.infrared_recv_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = infrared_recv_deinit &rArr; os_pin_mode &rArr; raw_os_pin_mode &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_mode
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_irq_enable
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_detach_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_infrared_deinit
</UL>

<P><STRONG><a name="[478]"></a>infrared_recv_init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, infrared.o(i.infrared_recv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = infrared_recv_init &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_mode
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_irq_enable
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_attach_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_infrared_init
</UL>

<P><STRONG><a name="[64b]"></a>infrared_rx_addr</STRONG> (Thumb, 172 bytes, Stack size 56 bytes, infrared.o(i.infrared_rx_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = infrared_rx_addr &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_rx_pin_callback
</UL>

<P><STRONG><a name="[64c]"></a>infrared_rx_data</STRONG> (Thumb, 214 bytes, Stack size 56 bytes, infrared.o(i.infrared_rx_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = infrared_rx_data &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_rx_data_enqueue
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_rx_pin_callback
</UL>

<P><STRONG><a name="[64d]"></a>infrared_rx_data_enqueue</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, infrared.o(i.infrared_rx_data_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = infrared_rx_data_enqueue &rArr; os_device_recv_notify &rArr; os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_recv_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_rx_repeat0
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_rx_data
</UL>

<P><STRONG><a name="[64f]"></a>infrared_rx_idle</STRONG> (Thumb, 156 bytes, Stack size 56 bytes, infrared.o(i.infrared_rx_idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = infrared_rx_idle &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_rx_repeat1
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_rx_pin_callback
</UL>

<P><STRONG><a name="[61]"></a>infrared_rx_pin_callback</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, infrared.o(i.infrared_rx_pin_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = infrared_rx_pin_callback &rArr; infrared_rx_repeat1 &rArr; infrared_rx_idle &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clocksource_gettime
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_read
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_rx_sync
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_rx_repeat1
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_rx_repeat0
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_rx_idle
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_rx_data
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_rx_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> infrared.o(i.infrared_recv_init)
</UL>
<P><STRONG><a name="[652]"></a>infrared_rx_repeat0</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, infrared.o(i.infrared_rx_repeat0))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = infrared_rx_repeat0 &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_rx_data_enqueue
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_rx_pin_callback
</UL>

<P><STRONG><a name="[653]"></a>infrared_rx_repeat1</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, infrared.o(i.infrared_rx_repeat1))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = infrared_rx_repeat1 &rArr; infrared_rx_idle &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_rx_idle
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_rx_pin_callback
</UL>

<P><STRONG><a name="[651]"></a>infrared_rx_sync</STRONG> (Thumb, 116 bytes, Stack size 56 bytes, infrared.o(i.infrared_rx_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = infrared_rx_sync &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_rx_pin_callback
</UL>

<P><STRONG><a name="[62]"></a>infrared_rx_timer_callback</STRONG> (Thumb, 182 bytes, Stack size 64 bytes, infrared.o(i.infrared_rx_timer_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = infrared_rx_timer_callback &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clocksource_gettime
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> infrared.o(i.infrared_timer_init)
</UL>
<P><STRONG><a name="[475]"></a>infrared_send_deinit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, infrared.o(i.infrared_send_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = infrared_send_deinit &rArr; os_pin_mode &rArr; raw_os_pin_mode &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_infrared_deinit
</UL>

<P><STRONG><a name="[477]"></a>infrared_send_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, infrared.o(i.infrared_send_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = infrared_send_init &rArr; os_pin_mode &rArr; raw_os_pin_mode &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_infrared_init
</UL>

<P><STRONG><a name="[658]"></a>infrared_timer_init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, infrared.o(i.infrared_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = infrared_timer_init &rArr; os_timer_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_infrared_init
</UL>

<P><STRONG><a name="[65a]"></a>infrared_udelay</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, infrared.o(i.infrared_udelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = infrared_udelay &rArr; os_clocksource_ndelay &rArr; __os_clocksource_ndelay
</UL>
<BR>[Calls]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clocksource_ndelay
</UL>
<BR>[Called By]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irk_on_us
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irk_off_us
</UL>

<P><STRONG><a name="[655]"></a>irk_off_us</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, infrared.o(i.irk_off_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = irk_off_us &rArr; infrared_udelay &rArr; os_clocksource_ndelay &rArr; __os_clocksource_ndelay
</UL>
<BR>[Calls]<UL><LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_send_ac
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_send
</UL>

<P><STRONG><a name="[654]"></a>irk_on_us</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, infrared.o(i.irk_on_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = irk_on_us &rArr; os_pin_write &rArr; raw_os_pin_write &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_write
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clocksource_gettime
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_send_ac
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_send
</UL>

<P><STRONG><a name="[185]"></a>list_infrared</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, infrared.o(i.list_infrared))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = list_infrared &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> infrared.o(FSymTab)
</UL>
<P><STRONG><a name="[15f]"></a>os_hw_infrared_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, infrared.o(i.os_hw_infrared_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = os_hw_infrared_init &rArr; infrared_timer_init &rArr; os_timer_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_timer_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> infrared.o(.init_call.4.3)
</UL>
<P><STRONG><a name="[165]"></a>remote_control_atk_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, remote_control_atk.o(i.remote_control_atk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = remote_control_atk_init &rArr; os_infrared_register_device &rArr; os_device_register &rArr; os_plug_in &rArr; os_sem_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_infrared_register_device
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> remote_control_atk.o(.init_call.43)
</UL>
<P><STRONG><a name="[65e]"></a>os_list_add_tail</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_block.o(i.os_list_add_tail))
<BR><BR>[Called By]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_blockq_insert
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_block_task
</UL>

<P><STRONG><a name="[667]"></a>os_list_add_tail</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_clock.o(i.os_list_add_tail))
<BR><BR>[Called By]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tickq_put
</UL>

<P><STRONG><a name="[668]"></a>os_list_del</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_clock.o(i.os_list_del))
<BR><BR>[Called By]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_increase
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tickq_remove
</UL>

<P><STRONG><a name="[48e]"></a>_k_event_flag_check</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, os_event.o(i._k_event_flag_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _k_event_flag_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_send
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_recv
</UL>

<P><STRONG><a name="[48f]"></a>_k_event_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, os_event.o(i._k_event_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _k_event_init &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_init
</UL>

<P><STRONG><a name="[6ef]"></a>os_list_add_tail</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_event.o(i.os_list_add_tail))
<BR><BR>[Called By]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_init
</UL>

<P><STRONG><a name="[6ee]"></a>os_list_del</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_event.o(i.os_list_del))
<BR><BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_deinit
</UL>

<P><STRONG><a name="[6a]"></a>_k_idle_task_entry</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_idle.o(i._k_idle_task_entry))
<BR>[Address Reference Count : 1]<UL><LI> os_idle.o(i.k_idle_task_init)
</UL>
<P><STRONG><a name="[6f2]"></a>os_get_klog_tag_lvl</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, os_kernel_log.o(i.os_get_klog_tag_lvl))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_print
</UL>

<P><STRONG><a name="[4a7]"></a>_k_mb_init</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, os_mb.o(i._k_mb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = _k_mb_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_init
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_print
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mb_init
</UL>

<P><STRONG><a name="[71e]"></a>_k_mb_modify_read_index</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_mb.o(i._k_mb_modify_read_index))
<BR><BR>[Called By]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mb_recv
</UL>

<P><STRONG><a name="[720]"></a>_k_mb_modify_write_index</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_mb.o(i._k_mb_modify_write_index))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mb_send
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mb_recv
</UL>

<P><STRONG><a name="[71b]"></a>os_list_add_tail</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_mb.o(i.os_list_add_tail))
<BR><BR>[Called By]<UL><LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mb_init
</UL>

<P><STRONG><a name="[71c]"></a>os_list_del</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_mb.o(i.os_list_del))
<BR><BR>[Called By]<UL><LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mb_init
</UL>

<P><STRONG><a name="[71f]"></a>os_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, os_mb.o(i.os_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mb_send
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mb_recv
</UL>

<P><STRONG><a name="[4a8]"></a>os_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_mb.o(i.os_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mb_init
</UL>

<P><STRONG><a name="[722]"></a>os_list_len</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_mb.o(i.os_list_len))
<BR><BR>[Called By]<UL><LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mb_show
</UL>

<P><STRONG><a name="[187]"></a>sh_show_mb_info</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, os_mb.o(i.sh_show_mb_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = sh_show_mb_info &rArr; os_mb_show &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_unlock
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_lock
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mb_show
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_mb.o(FSymTab)
</UL>
<P><STRONG><a name="[47a]"></a>_k_alloc_chunk</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, os_mem_firstfit.o(i._k_alloc_chunk))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = _k_alloc_chunk &rArr; _k_free_list_remove_bidx &rArr; _k_set_prev_free_chunk &rArr; _k_chunk_set &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_next_free_chunk
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_free_list_remove_bidx
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_ctz32
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunk_size
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_bucket_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_alloc
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_aligned_alloc
</UL>

<P><STRONG><a name="[483]"></a>_k_big_heap</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, os_mem_firstfit.o(i._k_big_heap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _k_big_heap
</UL>
<BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_big_heap_chunks
</UL>
<BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_solo_free_header
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_set_chunk_used
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunk_set
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunk_mem
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunk_header_bytes
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunk_field
</UL>

<P><STRONG><a name="[484]"></a>_k_big_heap_chunks</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, os_mem_firstfit.o(i._k_big_heap_chunks))
<BR><BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_heap_footer_bytes
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_big_heap
</UL>

<P><STRONG><a name="[47b]"></a>_k_bucket_idx</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, os_mem_firstfit.o(i._k_bucket_idx))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _k_bucket_idx &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_min_chunk_size
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_free_list_remove
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_free_list_add
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_check
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_alloc_chunk
</UL>

<P><STRONG><a name="[486]"></a>_k_bytes_to_chunksz</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, os_mem_firstfit.o(i._k_bytes_to_chunksz))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _k_bytes_to_chunksz &rArr; _k_chunk_header_bytes &rArr; _k_big_heap
</UL>
<BR>[Calls]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunksz
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunk_header_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_min_chunk_size
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_realloc
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_alloc
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_aligned_alloc
</UL>

<P><STRONG><a name="[489]"></a>_k_chunk_field</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, os_mem_firstfit.o(i._k_chunk_field))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _k_chunk_field &rArr; _k_big_heap
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_big_heap
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_prev_free_chunk
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_next_free_chunk
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_left_chunk
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunk_used
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunk_size
</UL>

<P><STRONG><a name="[487]"></a>_k_chunk_header_bytes</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_mem_firstfit.o(i._k_chunk_header_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _k_chunk_header_bytes &rArr; _k_big_heap
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_big_heap
</UL>
<BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mem_to_chunkid
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_check
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunksz_to_bytes
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunk_mem
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_bytes_to_chunksz
</UL>

<P><STRONG><a name="[48a]"></a>_k_chunk_mem</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, os_mem_firstfit.o(i._k_chunk_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _k_chunk_mem &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunk_header_bytes
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_big_heap
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_realloc
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_check
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_alloc
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_aligned_alloc
</UL>

<P><STRONG><a name="[48b]"></a>_k_chunk_set</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, os_mem_firstfit.o(i._k_chunk_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = _k_chunk_set &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_big_heap
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_set_prev_free_chunk
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_set_next_free_chunk
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_set_left_chunk_size
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_set_chunk_size
</UL>

<P><STRONG><a name="[47c]"></a>_k_chunk_size</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, os_mem_firstfit.o(i._k_chunk_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _k_chunk_size &rArr; _k_chunk_field &rArr; _k_big_heap
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunk_field
</UL>
<BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_split_chunks
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_solo_free_header
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_right_chunk
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_merge_chunks
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_free_list_remove
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_free_list_add
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_realloc
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_ptr_to_size
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_free
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_check
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_alloc
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_aligned_alloc
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_alloc_chunk
</UL>

<P><STRONG><a name="[48c]"></a>_k_chunk_used</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, os_mem_firstfit.o(i._k_chunk_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _k_chunk_used &rArr; _k_chunk_field &rArr; _k_big_heap
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunk_field
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_free_list_remove_bidx
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_free_chunk
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_realloc
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_free
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_check
</UL>

<P><STRONG><a name="[488]"></a>_k_chunksz</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_mem_firstfit.o(i._k_chunksz))
<BR><BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_init
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_bytes_to_chunksz
</UL>

<P><STRONG><a name="[48d]"></a>_k_chunksz_to_bytes</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, os_mem_firstfit.o(i._k_chunksz_to_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _k_chunksz_to_bytes &rArr; _k_chunk_header_bytes &rArr; _k_big_heap
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunk_header_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_realloc
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_ptr_to_size
</UL>

<P><STRONG><a name="[47f]"></a>_k_ctz32</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, os_mem_firstfit.o(i._k_ctz32))
<BR><BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_alloc_chunk
</UL>

<P><STRONG><a name="[64]"></a>_k_firstfit_mem_aligned_alloc</STRONG> (Thumb, 326 bytes, Stack size 48 bytes, os_mem_firstfit.o(i._k_firstfit_mem_aligned_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = _k_firstfit_mem_aligned_alloc &rArr; _k_firstfit_mem_alloc &rArr; _k_alloc_chunk &rArr; _k_free_list_remove_bidx &rArr; _k_set_prev_free_chunk &rArr; _k_chunk_set &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_wait
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_post
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_split_chunks
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_set_chunk_used
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mem_to_chunkid
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_free_list_add
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_alloc
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunk_size
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunk_mem
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_bytes_to_chunksz
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_alloc_chunk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_mem_firstfit.o(i.k_firstfit_mem_init)
</UL>
<P><STRONG><a name="[63]"></a>_k_firstfit_mem_alloc</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, os_mem_firstfit.o(i._k_firstfit_mem_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = _k_firstfit_mem_alloc &rArr; _k_alloc_chunk &rArr; _k_free_list_remove_bidx &rArr; _k_set_prev_free_chunk &rArr; _k_chunk_set &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_wait
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_post
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_split_chunks
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_set_chunk_used
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_free_list_add
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunk_size
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunk_mem
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_bytes_to_chunksz
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_alloc_chunk
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_realloc
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_aligned_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_mem_firstfit.o(i.k_firstfit_mem_init)
</UL>
<P><STRONG><a name="[69]"></a>_k_firstfit_mem_check</STRONG> (Thumb, 420 bytes, Stack size 80 bytes, os_mem_firstfit.o(i._k_firstfit_mem_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = _k_firstfit_mem_check &rArr; os_sem_wait &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_wait
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_post
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_right_chunk
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_next_free_chunk
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_left_chunk
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunk_used
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunk_size
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunk_mem
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunk_header_bytes
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_bucket_idx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_mem_firstfit.o(i.k_firstfit_mem_init)
</UL>
<P><STRONG><a name="[68]"></a>_k_firstfit_mem_deinit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, os_mem_firstfit.o(i._k_firstfit_mem_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _k_firstfit_mem_deinit &rArr; os_sem_deinit &rArr; os_spin_unlock &rArr; os_schedule_unlock &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_deinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_mem_firstfit.o(i.k_firstfit_mem_init)
</UL>
<P><STRONG><a name="[65]"></a>_k_firstfit_mem_free</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, os_mem_firstfit.o(i._k_firstfit_mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = _k_firstfit_mem_free &rArr; _k_free_chunk &rArr; _k_free_list_remove &rArr; _k_free_list_remove_bidx &rArr; _k_set_prev_free_chunk &rArr; _k_chunk_set &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_wait
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_post
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_set_chunk_used
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_right_chunk
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mem_to_chunkid
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_left_chunk
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_free_chunk
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunk_used
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunk_size
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_realloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_mem_firstfit.o(i.k_firstfit_mem_init)
</UL>
<P><STRONG><a name="[499]"></a>_k_firstfit_mem_init</STRONG> (Thumb, 418 bytes, Stack size 56 bytes, os_mem_firstfit.o(i._k_firstfit_mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = _k_firstfit_mem_init &rArr; os_sem_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_init
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_set_left_chunk_size
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_set_chunk_used
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_set_chunk_size
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_min_chunk_size
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_heap_footer_bytes
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_free_list_add
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunksz
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_bucket_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_firstfit_mem_init
</UL>

<P><STRONG><a name="[67]"></a>_k_firstfit_mem_ptr_to_size</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, os_mem_firstfit.o(i._k_firstfit_mem_ptr_to_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _k_firstfit_mem_ptr_to_size &rArr; _k_chunk_size &rArr; _k_chunk_field &rArr; _k_big_heap
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mem_to_chunkid
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunksz_to_bytes
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunk_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_mem_firstfit.o(i.k_firstfit_mem_init)
</UL>
<P><STRONG><a name="[66]"></a>_k_firstfit_mem_realloc</STRONG> (Thumb, 568 bytes, Stack size 56 bytes, os_mem_firstfit.o(i._k_firstfit_mem_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = _k_firstfit_mem_realloc &rArr; _k_firstfit_mem_alloc &rArr; _k_alloc_chunk &rArr; _k_free_list_remove_bidx &rArr; _k_set_prev_free_chunk &rArr; _k_chunk_set &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_wait
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_post
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_split_chunks
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_set_left_chunk_size
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_set_chunk_used
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_set_chunk_size
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_right_chunk
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mem_to_chunkid
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_left_chunk
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_free_list_remove
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_free_list_add
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_free_chunk
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_free
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_alloc
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunksz_to_bytes
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunk_used
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunk_size
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunk_mem
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_bytes_to_chunksz
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_mem_firstfit.o(i.k_firstfit_mem_init)
</UL>
<P><STRONG><a name="[498]"></a>_k_free_chunk</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, os_mem_firstfit.o(i._k_free_chunk))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = _k_free_chunk &rArr; _k_free_list_remove &rArr; _k_free_list_remove_bidx &rArr; _k_set_prev_free_chunk &rArr; _k_chunk_set &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_right_chunk
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_merge_chunks
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_left_chunk
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_free_list_remove
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_free_list_add
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunk_used
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_realloc
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_free
</UL>

<P><STRONG><a name="[493]"></a>_k_free_list_add</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, os_mem_firstfit.o(i._k_free_list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = _k_free_list_add &rArr; _k_free_list_add_bidx &rArr; _k_set_prev_free_chunk &rArr; _k_chunk_set &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_solo_free_header
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_free_list_add_bidx
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunk_size
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_bucket_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_free_chunk
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_realloc
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_alloc
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_aligned_alloc
</UL>

<P><STRONG><a name="[4a1]"></a>_k_free_list_add_bidx</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, os_mem_firstfit.o(i._k_free_list_add_bidx))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = _k_free_list_add_bidx &rArr; _k_set_prev_free_chunk &rArr; _k_chunk_set &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_set_prev_free_chunk
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_set_next_free_chunk
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_prev_free_chunk
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_free_list_add
</UL>

<P><STRONG><a name="[49e]"></a>_k_free_list_remove</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, os_mem_firstfit.o(i._k_free_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = _k_free_list_remove &rArr; _k_free_list_remove_bidx &rArr; _k_set_prev_free_chunk &rArr; _k_chunk_set &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_solo_free_header
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_free_list_remove_bidx
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunk_size
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_bucket_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_free_chunk
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_realloc
</UL>

<P><STRONG><a name="[47d]"></a>_k_free_list_remove_bidx</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, os_mem_firstfit.o(i._k_free_list_remove_bidx))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = _k_free_list_remove_bidx &rArr; _k_set_prev_free_chunk &rArr; _k_chunk_set &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_set_prev_free_chunk
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_set_next_free_chunk
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_prev_free_chunk
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_next_free_chunk
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunk_used
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_free_list_remove
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_alloc_chunk
</UL>

<P><STRONG><a name="[49b]"></a>_k_heap_footer_bytes</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, os_mem_firstfit.o(i._k_heap_footer_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _k_heap_footer_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_big_heap_chunks
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_init
</UL>

<P><STRONG><a name="[496]"></a>_k_left_chunk</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, os_mem_firstfit.o(i._k_left_chunk))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _k_left_chunk &rArr; _k_chunk_field &rArr; _k_big_heap
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunk_field
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_free_chunk
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_realloc
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_free
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_check
</UL>

<P><STRONG><a name="[491]"></a>_k_mem_to_chunkid</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, os_mem_firstfit.o(i._k_mem_to_chunkid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _k_mem_to_chunkid &rArr; _k_chunk_header_bytes &rArr; _k_big_heap
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunk_header_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_realloc
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_ptr_to_size
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_free
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_aligned_alloc
</UL>

<P><STRONG><a name="[49f]"></a>_k_merge_chunks</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, os_mem_firstfit.o(i._k_merge_chunks))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = _k_merge_chunks &rArr; _k_set_left_chunk_size &rArr; _k_chunk_set &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_set_left_chunk_size
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_set_chunk_size
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_right_chunk
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunk_size
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_free_chunk
</UL>

<P><STRONG><a name="[485]"></a>_k_min_chunk_size</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, os_mem_firstfit.o(i._k_min_chunk_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _k_min_chunk_size &rArr; _k_bytes_to_chunksz &rArr; _k_chunk_header_bytes &rArr; _k_big_heap
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_bytes_to_chunksz
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_init
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_bucket_idx
</UL>

<P><STRONG><a name="[47e]"></a>_k_next_free_chunk</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, os_mem_firstfit.o(i._k_next_free_chunk))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _k_next_free_chunk &rArr; _k_chunk_field &rArr; _k_big_heap
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunk_field
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_free_list_remove_bidx
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_check
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_alloc_chunk
</UL>

<P><STRONG><a name="[4a4]"></a>_k_prev_free_chunk</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, os_mem_firstfit.o(i._k_prev_free_chunk))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _k_prev_free_chunk &rArr; _k_chunk_field &rArr; _k_big_heap
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunk_field
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_free_list_remove_bidx
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_free_list_add_bidx
</UL>

<P><STRONG><a name="[495]"></a>_k_right_chunk</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, os_mem_firstfit.o(i._k_right_chunk))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _k_right_chunk &rArr; _k_chunk_size &rArr; _k_chunk_field &rArr; _k_big_heap
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunk_size
</UL>
<BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_split_chunks
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_merge_chunks
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_free_chunk
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_realloc
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_free
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_check
</UL>

<P><STRONG><a name="[49c]"></a>_k_set_chunk_size</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, os_mem_firstfit.o(i._k_set_chunk_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = _k_set_chunk_size &rArr; _k_chunk_set &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunk_set
</UL>
<BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_split_chunks
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_merge_chunks
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_realloc
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_init
</UL>

<P><STRONG><a name="[494]"></a>_k_set_chunk_used</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, os_mem_firstfit.o(i._k_set_chunk_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _k_set_chunk_used &rArr; _k_big_heap
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_big_heap
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_realloc
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_free
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_alloc
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_aligned_alloc
</UL>

<P><STRONG><a name="[49d]"></a>_k_set_left_chunk_size</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, os_mem_firstfit.o(i._k_set_left_chunk_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = _k_set_left_chunk_size &rArr; _k_chunk_set &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunk_set
</UL>
<BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_split_chunks
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_merge_chunks
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_realloc
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_init
</UL>

<P><STRONG><a name="[4a3]"></a>_k_set_next_free_chunk</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, os_mem_firstfit.o(i._k_set_next_free_chunk))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = _k_set_next_free_chunk &rArr; _k_chunk_set &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunk_set
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_free_list_remove_bidx
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_free_list_add_bidx
</UL>

<P><STRONG><a name="[4a2]"></a>_k_set_prev_free_chunk</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, os_mem_firstfit.o(i._k_set_prev_free_chunk))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = _k_set_prev_free_chunk &rArr; _k_chunk_set &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunk_set
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_free_list_remove_bidx
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_free_list_add_bidx
</UL>

<P><STRONG><a name="[4a0]"></a>_k_solo_free_header</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, os_mem_firstfit.o(i._k_solo_free_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _k_solo_free_header &rArr; _k_chunk_size &rArr; _k_chunk_field &rArr; _k_big_heap
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunk_size
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_big_heap
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_free_list_remove
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_free_list_add
</UL>

<P><STRONG><a name="[492]"></a>_k_split_chunks</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, os_mem_firstfit.o(i._k_split_chunks))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = _k_split_chunks &rArr; _k_set_left_chunk_size &rArr; _k_chunk_set &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_set_left_chunk_size
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_set_chunk_size
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_right_chunk
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_chunk_size
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_realloc
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_alloc
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_firstfit_mem_aligned_alloc
</UL>

<P><STRONG><a name="[4aa]"></a>_k_mp_add_resourcelist</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, os_mem_pool.o(i._k_mp_add_resourcelist))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = _k_mp_add_resourcelist &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_unlock
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_lock
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_print
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_add_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mp_create
</UL>

<P><STRONG><a name="[4ae]"></a>_k_mp_init</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, os_mem_pool.o(i._k_mp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _k_mp_init &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mp_init_free_list
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mp_create
</UL>

<P><STRONG><a name="[4af]"></a>_k_mp_init_free_list</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, os_mem_pool.o(i._k_mp_init_free_list))
<BR><BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mp_init
</UL>

<P><STRONG><a name="[4ad]"></a>os_list_add_tail</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_mem_pool.o(i.os_list_add_tail))
<BR><BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mp_add_resourcelist
</UL>

<P><STRONG><a name="[729]"></a>os_list_del</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_mem_pool.o(i.os_list_del))
<BR><BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mp_destroy
</UL>

<P><STRONG><a name="[7a8]"></a>os_list_len</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_mem_pool.o(i.os_list_len))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_mempool_info
</UL>

<P><STRONG><a name="[4b0]"></a>_k_mq_get_msg_from_queue</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, os_mq.o(i._k_mq_get_msg_from_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _k_mq_get_msg_from_queue &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_recv
</UL>

<P><STRONG><a name="[4b1]"></a>_k_mq_init</STRONG> (Thumb, 242 bytes, Stack size 64 bytes, os_mq.o(i._k_mq_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = _k_mq_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_print
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_init
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_init
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_create
</UL>

<P><STRONG><a name="[4bd]"></a>_k_mq_put_msg_to_queue</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_mq.o(i._k_mq_put_msg_to_queue))
<BR><BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mq_send
</UL>

<P><STRONG><a name="[72c]"></a>_k_mq_release_free_msg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_mq.o(i._k_mq_release_free_msg))
<BR><BR>[Called By]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_recv
</UL>

<P><STRONG><a name="[4b3]"></a>_k_mq_send</STRONG> (Thumb, 794 bytes, Stack size 56 bytes, os_mq.o(i._k_mq_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = _k_mq_send &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_switch
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_schedule_locked
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_disabled
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_is_irq_active
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_exit_check
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_enter_check
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_unblock_task
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_block_task
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_empty
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mq_put_msg_to_queue
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_send
</UL>

<P><STRONG><a name="[72a]"></a>os_list_add_tail</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_mq.o(i.os_list_add_tail))
<BR><BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_init
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_create
</UL>

<P><STRONG><a name="[72b]"></a>os_list_del</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_mq.o(i.os_list_del))
<BR><BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_init
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_destroy
</UL>

<P><STRONG><a name="[4bb]"></a>os_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, os_mq.o(i.os_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_recv
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mq_send
</UL>

<P><STRONG><a name="[4b2]"></a>os_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_mq.o(i.os_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mq_init
</UL>

<P><STRONG><a name="[72e]"></a>os_list_len</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_mq.o(i.os_list_len))
<BR><BR>[Called By]<UL><LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_show
</UL>

<P><STRONG><a name="[18c]"></a>sh_show_mq_info</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, os_mq.o(i.sh_show_mq_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = sh_show_mq_info &rArr; os_mq_show &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_unlock
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_lock
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_show
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_mq.o(FSymTab)
</UL>
<P><STRONG><a name="[4be]"></a>_k_mutex_deinit</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, os_mutex.o(i._k_mutex_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = _k_mutex_deinit &rArr; os_spin_unlock &rArr; os_schedule_unlock &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_switch
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_unlock
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_lock
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_exit_check
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_enter_check
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_readyq_remove
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_readyq_put
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_cancle_all_blocked_task
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_deinit
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_destroy
</UL>

<P><STRONG><a name="[4c3]"></a>_k_mutex_init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, os_mutex.o(i._k_mutex_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _k_mutex_init &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_init
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_create
</UL>

<P><STRONG><a name="[4c4]"></a>_k_mutex_restore_priority</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, os_mutex.o(i._k_mutex_restore_priority))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _k_mutex_restore_priority &rArr; _k_mutex_set_owner_priority &rArr; k_readyq_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_empty
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mutex_set_owner_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_recursive_unlock
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_recursive_lock
</UL>

<P><STRONG><a name="[4c6]"></a>_k_mutex_set_owner_priority</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, os_mutex.o(i._k_mutex_set_owner_priority))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _k_mutex_set_owner_priority &rArr; k_readyq_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_readyq_remove
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_readyq_put
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_recursive_lock
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mutex_restore_priority
</UL>

<P><STRONG><a name="[72f]"></a>os_list_add_tail</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_mutex.o(i.os_list_add_tail))
<BR><BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_init
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_create
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_recursive_unlock
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_recursive_lock
</UL>

<P><STRONG><a name="[4c1]"></a>os_list_del</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_mutex.o(i.os_list_del))
<BR><BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_recursive_unlock
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mutex_deinit
</UL>

<P><STRONG><a name="[4c5]"></a>os_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, os_mutex.o(i.os_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_recursive_unlock
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_mutex_restore_priority
</UL>

<P><STRONG><a name="[664]"></a>_k_readq_bmap_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, os_sched.o(i._k_readq_bmap_init))
<BR><BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_sched_init
</UL>

<P><STRONG><a name="[663]"></a>os_list_add_tail</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_sched.o(i.os_list_add_tail))
<BR><BR>[Called By]<UL><LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_readyq_move_tail
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_readyq_put
</UL>

<P><STRONG><a name="[4c9]"></a>_k_sem_init</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, os_sem.o(i._k_sem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _k_sem_init &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_init
</UL>

<P><STRONG><a name="[739]"></a>os_list_add_tail</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_sem.o(i.os_list_add_tail))
<BR><BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_init
</UL>

<P><STRONG><a name="[738]"></a>os_list_del</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_sem.o(i.os_list_del))
<BR><BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_deinit
</UL>

<P><STRONG><a name="[73a]"></a>os_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, os_sem.o(i.os_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_post
</UL>

<P><STRONG><a name="[480]"></a>_k_application_init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, os_startup.o(i._k_application_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = _k_application_init &rArr; os_task_create &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_startup
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_create
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_startup
</UL>

<P><STRONG><a name="[4ca]"></a>_k_core_auto_init</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, os_startup.o(i._k_core_auto_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _k_core_auto_init
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_startup
</UL>

<P><STRONG><a name="[56]"></a>_k_main_task_entry</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, os_startup.o(i._k_main_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = _k_main_task_entry &rArr; $Super$$main &rArr; onenet_upload_cycle_start &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_other_auto_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_startup.o(i._k_application_init)
</UL>
<P><STRONG><a name="[4a5]"></a>_k_other_auto_init</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, os_startup.o(i._k_other_auto_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _k_other_auto_init
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_main_task_entry
</UL>

<P><STRONG><a name="[28b]"></a>_k_startup</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, os_startup.o(i._k_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = _k_startup &rArr; k_idle_task_init &rArr; os_task_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_idle_task_init
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_print
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tickq_init
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_start
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_sched_init
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_timer_module_init
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_recycle_task_init
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_core_auto_init
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_application_init
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13e]"></a>os_core_init_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_startup.o(i.os_core_init_start))
<BR>[Address Reference Count : 1]<UL><LI> os_startup.o(.init_call.1.)
</UL>
<P><STRONG><a name="[16c]"></a>os_init_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_startup.o(i.os_init_end))
<BR>[Address Reference Count : 1]<UL><LI> os_startup.o(.init_call.7.end)
</UL>
<P><STRONG><a name="[143]"></a>os_postcore_init_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_startup.o(i.os_postcore_init_start))
<BR>[Address Reference Count : 1]<UL><LI> os_startup.o(.init_call.1.end)
</UL>
<P><STRONG><a name="[6b]"></a>_k_recycle_task_entry</STRONG> (Thumb, 300 bytes, Stack size 16 bytes, os_task.o(i._k_recycle_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = _k_recycle_task_entry &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_switch
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_print
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_exit_check
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_enter_check
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_readyq_remove
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_empty
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_del
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_task.o(i.k_recycle_task_init)
</UL>
<P><STRONG><a name="[4d1]"></a>_k_task_deinit</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, os_task.o(i._k_task_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _k_task_deinit &rArr; k_readyq_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tickq_remove
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_readyq_remove
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_destroy
</UL>

<P><STRONG><a name="[57]"></a>_k_task_exit</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, os_task.o(i._k_task_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = _k_task_exit &rArr; os_spin_unlock &rArr; os_schedule_unlock &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_switch
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_unlock
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_lock
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_exit_check
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_enter_check
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_readyq_remove
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_del
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_add_tail
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_wakeup_recycle_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_task.o(i._k_task_init)
</UL>
<P><STRONG><a name="[4d5]"></a>_k_task_init</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, os_task.o(i._k_task_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _k_task_init &rArr; os_hw_stack_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_stack_init
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_init
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_create
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_init
</UL>

<P><STRONG><a name="[4d8]"></a>_k_task_stack_check</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, os_task.o(i._k_task_stack_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = _k_task_stack_check &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_stack_is_overflow
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_print
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_name
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_switch_notify
</UL>

<P><STRONG><a name="[4d4]"></a>_k_wakeup_recycle_task</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, os_task.o(i._k_wakeup_recycle_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _k_wakeup_recycle_task &rArr; k_readyq_put
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_readyq_put
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_destroy
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_task_exit
</UL>

<P><STRONG><a name="[4d3]"></a>os_list_add_tail</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_task.o(i.os_list_add_tail))
<BR><BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_destroy
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_create
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_task_exit
</UL>

<P><STRONG><a name="[4c8]"></a>os_list_del</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_task.o(i.os_list_del))
<BR><BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_destroy
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_task_exit
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_task_deinit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_recycle_task_entry
</UL>

<P><STRONG><a name="[4c7]"></a>os_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, os_task.o(i.os_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_destroy
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_recycle_task_entry
</UL>

<P><STRONG><a name="[4d7]"></a>os_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_task.o(i.os_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_task_init
</UL>

<P><STRONG><a name="[4db]"></a>_k_timer_activate</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, os_timer.o(i._k_timer_activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = _k_timer_activate &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_empty
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_set_handle_flag_index
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_get_active_list
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_add_to_sort_list
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_task_entry
</UL>

<P><STRONG><a name="[4e4]"></a>_k_timer_active_bit_clear</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, os_timer.o(i._k_timer_active_bit_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _k_timer_active_bit_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_deactivate
</UL>

<P><STRONG><a name="[4e0]"></a>_k_timer_add_to_list</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_timer.o(i._k_timer_add_to_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _k_timer_add_to_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_add_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_init
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_create
</UL>

<P><STRONG><a name="[4de]"></a>_k_timer_add_to_sort_list</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, os_timer.o(i._k_timer_add_to_sort_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _k_timer_add_to_sort_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_add_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_task_entry
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_activate
</UL>

<P><STRONG><a name="[4e2]"></a>_k_timer_calc_remain_ticks</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, os_timer.o(i._k_timer_calc_remain_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = _k_timer_calc_remain_ticks &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_get_active_list
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_timer_info
</UL>

<P><STRONG><a name="[4e3]"></a>_k_timer_deactivate</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, os_timer.o(i._k_timer_deactivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _k_timer_deactivate &rArr; _k_timer_del_from_sort_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_empty
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_del_from_sort_list
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_active_bit_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_task_entry
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_remove
</UL>

<P><STRONG><a name="[4e5]"></a>_k_timer_del_from_sort_list</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, os_timer.o(i._k_timer_del_from_sort_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _k_timer_del_from_sort_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_task_entry
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_deactivate
</UL>

<P><STRONG><a name="[4e7]"></a>_k_timer_do_init</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, os_timer.o(i._k_timer_do_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _k_timer_do_init &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_init
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_init
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_create
</UL>

<P><STRONG><a name="[4dd]"></a>_k_timer_get_active_list</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_timer.o(i._k_timer_get_active_list))
<BR><BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_calc_remain_ticks
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_activate
</UL>

<P><STRONG><a name="[4e9]"></a>_k_timer_remove</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, os_timer.o(i._k_timer_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _k_timer_remove &rArr; _k_timer_deactivate &rArr; _k_timer_del_from_sort_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_del
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_deactivate
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_destroy
</UL>

<P><STRONG><a name="[4df]"></a>_k_timer_set_handle_flag_index</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, os_timer.o(i._k_timer_set_handle_flag_index))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_task_entry
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_activate
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_timer_module_init
</UL>

<P><STRONG><a name="[4ea]"></a>_k_timer_set_head</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, os_timer.o(i._k_timer_set_head))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_task_entry
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_timer_module_init
</UL>

<P><STRONG><a name="[6c]"></a>_k_timer_task_entry</STRONG> (Thumb, 582 bytes, Stack size 48 bytes, os_timer.o(i._k_timer_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = _k_timer_task_entry &rArr; _k_timer_activate &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_switch
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ffs
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_unlock
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_exit_check
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_kernel_enter_check
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_readyq_remove
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_init
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_first
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_empty
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_del
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_add
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_set_head
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_set_handle_flag_index
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_del_from_sort_list
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_deactivate
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_add_to_sort_list
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_activate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_timer.o(i.k_timer_module_init)
</UL>
<P><STRONG><a name="[4ec]"></a>os_list_add</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_timer.o(i.os_list_add))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_task_entry
</UL>

<P><STRONG><a name="[4e1]"></a>os_list_add_tail</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_timer.o(i.os_list_add_tail))
<BR><BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_add_to_sort_list
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_add_to_list
</UL>

<P><STRONG><a name="[4e6]"></a>os_list_del</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_timer.o(i.os_list_del))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_task_entry
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_remove
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_del_from_sort_list
</UL>

<P><STRONG><a name="[4dc]"></a>os_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, os_timer.o(i.os_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_timer_need_handle
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_show_timer_info
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_task_entry
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_deactivate
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_activate
</UL>

<P><STRONG><a name="[4ed]"></a>os_list_first</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, os_timer.o(i.os_list_first))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_task_entry
</UL>

<P><STRONG><a name="[4e8]"></a>os_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_timer.o(i.os_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_task_entry
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_timer_do_init
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_timer_module_init
</UL>

<P><STRONG><a name="[5b0]"></a>divide</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, os_util.o(i.divide))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>

<P><STRONG><a name="[776]"></a>print_number</STRONG> (Thumb, 462 bytes, Stack size 104 bytes, os_util.o(i.print_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide
</UL>
<BR>[Called By]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_vsnprintf
</UL>

<P><STRONG><a name="[775]"></a>skip_atoi</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, os_util.o(i.skip_atoi))
<BR><BR>[Called By]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_vsnprintf
</UL>

<P><STRONG><a name="[191]"></a>sh_query_oneos_version</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, os_version.o(i.sh_query_oneos_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = sh_query_oneos_version &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_version.o(FSymTab)
</UL>
<P><STRONG><a name="[14a]"></a>_k_work_sys_workqueue_init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, os_workqueue.o(i._k_work_sys_workqueue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = _k_work_sys_workqueue_init &rArr; os_workqueue_init &rArr; _k_workqueue_init &rArr; os_task_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_workqueue_init
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_print
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_workqueue.o(.init_call.3.1)
</UL>
<P><STRONG><a name="[4ef]"></a>_k_workqueue_init</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, os_workqueue.o(i._k_workqueue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = _k_workqueue_init &rArr; os_task_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_init
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_startup
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_lock_init
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_init
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_workqueue_init
</UL>

<P><STRONG><a name="[58]"></a>_k_workqueue_task_entry</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, os_workqueue.o(i._k_workqueue_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = _k_workqueue_task_entry &rArr; os_sem_wait &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_wait
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_unlock_irqrestore
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spin_lock_irqsave
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_del
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_workqueue.o(i._k_workqueue_init)
</UL>
<P><STRONG><a name="[4f4]"></a>os_list_del</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_workqueue.o(i.os_list_del))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_workqueue_task_entry
</UL>

<P><STRONG><a name="[4f0]"></a>os_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_workqueue.o(i.os_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_workqueue_init
</UL>

<P><STRONG><a name="[550]"></a>at_parser_device_open</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, at_parser.o(i.at_parser_device_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = at_parser_device_open &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_open
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_control
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_init
</UL>

<P><STRONG><a name="[557]"></a>at_parser_get_urc</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, at_parser.o(i.at_parser_get_urc))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = at_parser_get_urc &rArr; os_schedule_unlock &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_schedule_unlock
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_schedule_lock
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_task
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_readline
</UL>

<P><STRONG><a name="[558]"></a>at_parser_getchar</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, at_parser.o(i.at_parser_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = at_parser_getchar &rArr; os_event_recv &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_read_nonblock
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_recv
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_readline
</UL>

<P><STRONG><a name="[55f]"></a>at_parser_list_add</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, at_parser.o(i.at_parser_list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = at_parser_list_add &rArr; os_schedule_unlock &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_schedule_unlock
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_schedule_lock
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_slist_add_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_init
</UL>

<P><STRONG><a name="[54b]"></a>at_parser_list_del</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, at_parser.o(i.at_parser_list_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = at_parser_list_del &rArr; os_schedule_unlock &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_schedule_unlock
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_schedule_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_deinit
</UL>

<P><STRONG><a name="[561]"></a>at_parser_readline</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, at_parser.o(i.at_parser_readline))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = at_parser_readline &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_getchar
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_get_urc
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_task
</UL>

<P><STRONG><a name="[563]"></a>at_parser_resp_handle</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, at_parser.o(i.at_parser_resp_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = at_parser_resp_handle &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_post
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_task
</UL>

<P><STRONG><a name="[11d]"></a>at_parser_rx_indicate</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, at_parser.o(i.at_parser_rx_indicate))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = at_parser_rx_indicate &rArr; os_event_send &rArr; _k_event_flag_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_parser.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>at_parser_task</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, at_parser.o(i.at_parser_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = at_parser_task &rArr; at_parser_readline &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_resp_handle
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_readline
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_get_urc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_parser.o(i.at_parser_init)
</UL>
<P><STRONG><a name="[56c]"></a>at_parser_vasprintf</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, at_parser.o(i.at_parser_vasprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = at_parser_vasprintf &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_write_block
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_vasprintfln
</UL>

<P><STRONG><a name="[554]"></a>at_parser_vasprintfln</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, at_parser.o(i.at_parser_vasprintfln))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = at_parser_vasprintfln &rArr; at_parser_vasprintf &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_write_block
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_vasprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_cmd_valist
</UL>

<P><STRONG><a name="[560]"></a>os_slist_add_tail</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, at_parser.o(i.os_slist_add_tail))
<BR><BR>[Called By]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_set_urc_table
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_list_add
</UL>

<P><STRONG><a name="[56a]"></a>os_slist_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at_parser.o(i.os_slist_init))
<BR><BR>[Called By]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_set_urc_table
</UL>

<P><STRONG><a name="[44b]"></a>_atoi</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, at_printf.o(i._atoi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _atoi
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
</UL>

<P><STRONG><a name="[44c]"></a>_is_digit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at_printf.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atoi
</UL>

<P><STRONG><a name="[506]"></a>_ntoa_format</STRONG> (Thumb, 282 bytes, Stack size 72 bytes, at_printf.o(i._ntoa_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _ntoa_format &rArr; _out_rev
</UL>
<BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_out_rev
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_long_long
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_long
</UL>

<P><STRONG><a name="[508]"></a>_ntoa_long</STRONG> (Thumb, 124 bytes, Stack size 112 bytes, at_printf.o(i._ntoa_long))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _ntoa_long &rArr; _ntoa_format &rArr; _out_rev
</UL>
<BR>[Calls]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_format
</UL>
<BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
</UL>

<P><STRONG><a name="[509]"></a>_ntoa_long_long</STRONG> (Thumb, 184 bytes, Stack size 112 bytes, at_printf.o(i._ntoa_long_long))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _ntoa_long_long &rArr; _ntoa_format &rArr; _out_rev
</UL>
<BR>[Calls]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_format
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
</UL>

<P><STRONG><a name="[5c]"></a>_out_buffer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, at_printf.o(i._out_buffer))
<BR>[Address Reference Count : 2]<UL><LI> at_printf.o(i.at_snprintf)
<LI> at_printf.o(i.at_vsnprintf)
</UL>
<P><STRONG><a name="[59]"></a>_out_null</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at_printf.o(i._out_null))
<BR>[Address Reference Count : 1]<UL><LI> at_printf.o(i._vsnprintf)
</UL>
<P><STRONG><a name="[507]"></a>_out_rev</STRONG> (Thumb, 116 bytes, Stack size 56 bytes, at_printf.o(i._out_rev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _out_rev
</UL>
<BR>[Called By]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_format
</UL>

<P><STRONG><a name="[52b]"></a>_vsnprintf</STRONG> (Thumb, 1498 bytes, Stack size 96 bytes, at_printf.o(i._vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = _vsnprintf &rArr; _ntoa_long_long &rArr; _ntoa_format &rArr; _out_rev
</UL>
<BR>[Calls]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_long_long
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_long
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_vsnprintf
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_snprintf
</UL>

<P><STRONG><a name="[5e6]"></a>esp8266_at_init</STRONG> (Thumb, 106 bytes, Stack size 120 bytes, esp8266.o(i.esp8266_at_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = esp8266_at_init &rArr; at_parser_connect &rArr; at_parser_send &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_from_ms
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_set_urc_table
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_cmd
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_connect
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_esp8266_create
</UL>

<P><STRONG><a name="[17]"></a>urc_busy_p_func</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, esp8266.o(i.urc_busy_p_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = urc_busy_p_func &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>urc_busy_s_func</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, esp8266.o(i.urc_busy_s_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = urc_busy_s_func &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>urc_ready_func</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, esp8266.o(i.urc_ready_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = urc_ready_func &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.data)
</UL>
<P><STRONG><a name="[5ec]"></a>esp8266_get_netconn_by_id</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, esp8266_netconn.o(i.esp8266_get_netconn_by_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = esp8266_get_netconn_by_id &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_recv_func
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_close_func
</UL>

<P><STRONG><a name="[5ed]"></a>esp8266_lock</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, esp8266_netconn.o(i.esp8266_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = esp8266_lock &rArr; os_mutex_recursive_lock &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_recursive_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_destroy
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_create
</UL>

<P><STRONG><a name="[5ee]"></a>esp8266_netconn_alloc</STRONG> (Thumb, 200 bytes, Stack size 88 bytes, esp8266_netconn.o(i.esp8266_netconn_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = esp8266_netconn_alloc &rArr; at_parser_exec_cmd &rArr; at_parser_exec_cmd_valist &rArr; at_parser_vasprintfln &rArr; at_parser_vasprintf &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_line_by_kw
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_exec_cmd
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_create
</UL>

<P><STRONG><a name="[5f0]"></a>esp8266_unlock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, esp8266_netconn.o(i.esp8266_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = esp8266_unlock &rArr; os_mutex_recursive_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_recursive_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_destroy
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_netconn_create
</UL>

<P><STRONG><a name="[1c]"></a>urc_close_func</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, esp8266_netconn.o(i.urc_close_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = urc_close_func &rArr; esp8266_get_netconn_by_id &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_pasv_close_notice
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_netconn_by_id
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266_netconn.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>urc_recv_func</STRONG> (Thumb, 482 bytes, Stack size 192 bytes, esp8266_netconn.o(i.urc_recv_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = urc_recv_func &rArr; urc_recv_read_param &rArr; at_parser_recv &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4addr_aton
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_wifi_netconn_data_recv_notice
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_recv_read_param
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_get_netconn_by_id
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_recv
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266_netconn.o(.data)
</UL>
<P><STRONG><a name="[7f8]"></a>urc_recv_read_param</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, esp8266_netconn.o(i.urc_recv_read_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = urc_recv_read_param &rArr; at_parser_recv &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_recv_func
</UL>

<P><STRONG><a name="[1a]"></a>urc_send_bfsz_func</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, esp8266_netconn.o(i.urc_send_bfsz_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = urc_send_bfsz_func &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266_netconn.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>urc_send_func</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, esp8266_netconn.o(i.urc_send_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = urc_send_func &rArr; os_event_send &rArr; _k_event_flag_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_send
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266_netconn.o(.data)
</UL>
<P><STRONG><a name="[5f7]"></a>hex_to_uint</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, esp8266_wifi.o(i.hex_to_uint))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_get_sta_mac
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_wifi_get_ap_mac
</UL>

<P><STRONG><a name="[1d]"></a>urc_connect_func</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, esp8266_wifi.o(i.urc_connect_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = urc_connect_func &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266_wifi.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>urc_dist_sta_ip_func</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, esp8266_wifi.o(i.urc_dist_sta_ip_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = urc_dist_sta_ip_func &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266_wifi.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>urc_ip_func</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, esp8266_wifi.o(i.urc_ip_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = urc_ip_func &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266_wifi.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>urc_ipv6_func</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, esp8266_wifi.o(i.urc_ipv6_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = urc_ipv6_func &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266_wifi.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>urc_sta_connected_func</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, esp8266_wifi.o(i.urc_sta_connected_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = urc_sta_connected_func &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266_wifi.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>urc_sta_disconnected_func</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, esp8266_wifi.o(i.urc_sta_disconnected_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = urc_sta_disconnected_func &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266_wifi.o(.data)
</UL>
<P><STRONG><a name="[62f]"></a>get_general_ops</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, mo_general.o(i.get_general_ops))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = get_general_ops &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_get_firmware_version
</UL>

<P><STRONG><a name="[630]"></a>get_netconn_ops</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, mo_netconn.o(i.get_netconn_ops))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = get_netconn_ops &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_sendto
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_send
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_gethostbyname
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_destroy
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_create
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_connect
</UL>

<P><STRONG><a name="[67c]"></a>mo_object_init_with_mcu</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, mo_object.o(i.mo_object_init_with_mcu))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = mo_object_init_with_mcu &rArr; at_parser_init &rArr; at_parser_device_open &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_startup
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_init
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_object_get_by_device
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_object_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_object_init
</UL>

<P><STRONG><a name="[67e]"></a>mo_object_list_add</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, mo_object.o(i.mo_object_list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = mo_object_list_add &rArr; os_schedule_unlock &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_schedule_unlock
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_schedule_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_object_init_with_mcu
</UL>

<P><STRONG><a name="[679]"></a>mo_object_list_del</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, mo_object.o(i.mo_object_list_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = mo_object_list_del &rArr; os_schedule_unlock &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_schedule_unlock
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_schedule_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_object_deinit
</UL>

<P><STRONG><a name="[538]"></a>alloc_socket</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, mo_socket.o(i.alloc_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = alloc_socket &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_schedule_unlock
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_schedule_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_socket
</UL>

<P><STRONG><a name="[66d]"></a>mo_do_sem_init</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, mo_socket.o(i.mo_do_sem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = mo_do_sem_init &rArr; os_sem_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_init
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_select
</UL>

<P><STRONG><a name="[5a]"></a>mo_event_callback</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, mo_socket.o(i.mo_event_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = mo_event_callback &rArr; mo_get_socket &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_post
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_schedule_unlock
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_schedule_lock
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_get_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mo_socket.o(i.alloc_socket)
</UL>
<P><STRONG><a name="[66a]"></a>mo_get_socket</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, mo_socket.o(i.mo_get_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = mo_get_socket &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_setsockopt
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_sendto
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_recvfrom
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_connect
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_closesocket
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_selscan
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_event_callback
</UL>

<P><STRONG><a name="[684]"></a>mo_selscan</STRONG> (Thumb, 362 bytes, Stack size 88 bytes, mo_socket.o(i.mo_selscan))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = mo_selscan &rArr; mo_get_socket &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_schedule_unlock
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_schedule_lock
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_select
</UL>

<P><STRONG><a name="[685]"></a>mo_tryget_socket</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, mo_socket.o(i.mo_tryget_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = mo_tryget_socket &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_select
</UL>

<P><STRONG><a name="[681]"></a>module_recv_tcp</STRONG> (Thumb, 340 bytes, Stack size 88 bytes, mo_socket.o(i.module_recv_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = module_recv_tcp &rArr; mo_netconn_recvfrom &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_schedule_unlock
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_schedule_lock
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_from_ms
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_recvfrom
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_recvfrom
</UL>

<P><STRONG><a name="[682]"></a>module_recvfrom_udp</STRONG> (Thumb, 242 bytes, Stack size 72 bytes, mo_socket.o(i.module_recvfrom_udp))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = module_recvfrom_udp &rArr; mo_netconn_recvfrom &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_errno
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_from_ms
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_recvfrom
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_recvfrom
</UL>

<P><STRONG><a name="[688]"></a>module_tcp_send</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, mo_socket.o(i.module_tcp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = module_tcp_send &rArr; mo_netconn_send &rArr; get_netconn_ops &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_send
</UL>
<BR>[Called By]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_sendto
</UL>

<P><STRONG><a name="[689]"></a>module_udp_sendto</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, mo_socket.o(i.module_udp_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = module_udp_sendto &rArr; mo_netconn_sendto &rArr; get_netconn_ops &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_sendto
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_send
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_netconn_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_sendto
</UL>

<P><STRONG><a name="[631]"></a>get_wifi_ops</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, mo_wifi.o(i.get_wifi_ops))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = get_wifi_ops &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mo_wifi_connect_ap
</UL>

<P><STRONG><a name="[690]"></a>mpu6xxx_get_accel_raw</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, mpu6xxx.o(i.mpu6xxx_get_accel_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = mpu6xxx_get_accel_raw &rArr; mpu6xxx_read_regs &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_read_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_get_accel
</UL>

<P><STRONG><a name="[692]"></a>mpu6xxx_get_gyro_raw</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, mpu6xxx.o(i.mpu6xxx_get_gyro_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = mpu6xxx_get_gyro_raw &rArr; mpu6xxx_read_regs &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_read_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_get_gyro
</UL>

<P><STRONG><a name="[693]"></a>mpu6xxx_get_param</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, mpu6xxx.o(i.mpu6xxx_get_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = mpu6xxx_get_param &rArr; mpu6xxx_read_bits &rArr; mpu6xxx_read_regs &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_read_regs
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_read_bits
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_read_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_init
</UL>

<P><STRONG><a name="[696]"></a>mpu6xxx_get_temp_raw</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, mpu6xxx.o(i.mpu6xxx_get_temp_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = mpu6xxx_get_temp_raw &rArr; mpu6xxx_read_regs &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_read_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_get_temp
</UL>

<P><STRONG><a name="[695]"></a>mpu6xxx_read_bit</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, mpu6xxx.o(i.mpu6xxx_read_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = mpu6xxx_read_bit &rArr; mpu6xxx_read_regs &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_read_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_get_param
</UL>

<P><STRONG><a name="[694]"></a>mpu6xxx_read_bits</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, mpu6xxx.o(i.mpu6xxx_read_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = mpu6xxx_read_bits &rArr; mpu6xxx_read_regs &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_read_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_get_param
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_set_param
</UL>

<P><STRONG><a name="[691]"></a>mpu6xxx_read_regs</STRONG> (Thumb, 114 bytes, Stack size 72 bytes, mpu6xxx.o(i.mpu6xxx_read_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = mpu6xxx_read_regs &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_i2c_transfer
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_send_then_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_write_bits
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_write_bit
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_read_bits
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_read_bit
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_get_temp_raw
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_get_param
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_get_gyro_raw
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_get_accel_raw
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_init
</UL>

<P><STRONG><a name="[192]"></a>mpu6xxx_test</STRONG> (Thumb, 496 bytes, Stack size 48 bytes, mpu6xxx.o(i.mpu6xxx_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = mpu6xxx_test &rArr; mpu6xxx_init &rArr; mpu6xxx_get_param &rArr; mpu6xxx_read_bits &rArr; mpu6xxx_read_regs &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_msleep
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_set_param
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_init
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_get_temp
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_get_gyro
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_get_accel
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_deinit
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mpu6xxx.o(FSymTab)
</UL>
<P><STRONG><a name="[69b]"></a>mpu6xxx_write_bit</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, mpu6xxx.o(i.mpu6xxx_write_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = mpu6xxx_write_bit &rArr; mpu6xxx_read_regs &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_write_reg
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_read_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_set_param
</UL>

<P><STRONG><a name="[698]"></a>mpu6xxx_write_bits</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, mpu6xxx.o(i.mpu6xxx_write_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = mpu6xxx_write_bits &rArr; mpu6xxx_read_regs &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_write_reg
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_read_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_set_param
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_init
</UL>

<P><STRONG><a name="[69a]"></a>mpu6xxx_write_reg</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, mpu6xxx.o(i.mpu6xxx_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = mpu6xxx_write_reg &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_i2c_transfer
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_spi_send_then_send
</UL>
<BR>[Called By]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_write_bits
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_write_bit
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_set_param
</UL>

<P><STRONG><a name="[4fb]"></a>_mpu6xxx_acc_set_mode</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, sensor_inven_mpu6xxx.o(i._mpu6xxx_acc_set_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = _mpu6xxx_acc_set_mode &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_control
</UL>

<P><STRONG><a name="[4fc]"></a>_mpu6xxx_init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, sensor_inven_mpu6xxx.o(i._mpu6xxx_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = _mpu6xxx_init &rArr; mpu6xxx_init &rArr; mpu6xxx_get_param &rArr; mpu6xxx_read_bits &rArr; mpu6xxx_read_regs &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_init
</UL>
<BR>[Called By]<UL><LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_mpu6xxx_init
</UL>

<P><STRONG><a name="[4fe]"></a>_mpu6xxx_polling_get_data</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, sensor_inven_mpu6xxx.o(i._mpu6xxx_polling_get_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = _mpu6xxx_polling_get_data &rArr; mpu6xxx_get_temp &rArr; mpu6xxx_get_temp_raw &rArr; mpu6xxx_read_regs &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_get_temp
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_get_gyro
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_get_accel
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_fetch_data
</UL>

<P><STRONG><a name="[503]"></a>_mpu6xxx_set_power</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, sensor_inven_mpu6xxx.o(i._mpu6xxx_set_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = _mpu6xxx_set_power &rArr; mpu6xxx_set_param &rArr; mpu6xxx_write_bits &rArr; mpu6xxx_read_regs &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_set_param
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_control
</UL>

<P><STRONG><a name="[505]"></a>_mpu6xxx_set_range</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, sensor_inven_mpu6xxx.o(i._mpu6xxx_set_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = _mpu6xxx_set_range &rArr; mpu6xxx_set_param &rArr; mpu6xxx_write_bits &rArr; mpu6xxx_read_regs &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_set_param
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6xxx_control
</UL>

<P><STRONG><a name="[24]"></a>mpu6xxx_control</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, sensor_inven_mpu6xxx.o(i.mpu6xxx_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = mpu6xxx_control &rArr; _mpu6xxx_set_range &rArr; mpu6xxx_set_param &rArr; mpu6xxx_write_bits &rArr; mpu6xxx_read_regs &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mpu6xxx_set_range
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mpu6xxx_set_power
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mpu6xxx_acc_set_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensor_inven_mpu6xxx.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>mpu6xxx_fetch_data</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sensor_inven_mpu6xxx.o(i.mpu6xxx_fetch_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = mpu6xxx_fetch_data &rArr; _mpu6xxx_polling_get_data &rArr; mpu6xxx_get_temp &rArr; mpu6xxx_get_temp_raw &rArr; mpu6xxx_read_regs &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mpu6xxx_polling_get_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensor_inven_mpu6xxx.o(.data)
</UL>
<P><STRONG><a name="[638]"></a>sha1</STRONG> (Thumb, 632 bytes, Stack size 408 bytes, hmac_sha1.o(i.sha1))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = sha1 &rArr; rotl
</UL>
<BR>[Calls]<UL><LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotl
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft
</UL>
<BR>[Called By]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha1
</UL>

<P><STRONG><a name="[6b9]"></a>get_device_resigter_state</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, onenet_mqtts.o(i.get_device_resigter_state))
<BR><BR>[Called By]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_entry
</UL>

<P><STRONG><a name="[6a0]"></a>mqtt_subscribe_message_handlers_init</STRONG> (Thumb, 264 bytes, Stack size 824 bytes, onenet_mqtts.o(i.mqtt_subscribe_message_handlers_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = mqtt_subscribe_message_handlers_init &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_init
</UL>

<P><STRONG><a name="[6ac]"></a>onenet_device_link</STRONG> (Thumb, 78 bytes, Stack size 208 bytes, onenet_mqtts.o(i.onenet_device_link))
<BR><BR>[Stack]<UL><LI>Max Depth = 5548 + Unknown Stack Size
<LI>Call Chain = onenet_device_link &rArr; onenet_authorization &rArr; hmac_sha1 &rArr; sha1 &rArr; rotl
</UL>
<BR>[Calls]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_authorization
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_client_connect
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_link
</UL>

<P><STRONG><a name="[6b0]"></a>onenet_message_queue_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, onenet_mqtts.o(i.onenet_message_queue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = onenet_message_queue_init &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mq_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_entry
</UL>

<P><STRONG><a name="[6ad]"></a>onenet_mqtts_client_connect</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, onenet_mqtts.o(i.onenet_mqtts_client_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = onenet_mqtts_client_connect &rArr; MQTTConnect &rArr; MQTTConnectWithResults &rArr; waitfor &rArr; cycle &rArr; keepalive &rArr; TimerInit &rArr; os_timer_create &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_device_link
</UL>

<P><STRONG><a name="[6b2]"></a>onenet_mqtts_client_publish</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, onenet_mqtts.o(i.onenet_mqtts_client_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = onenet_mqtts_client_publish &rArr; MQTTPublish &rArr; waitfor &rArr; cycle &rArr; keepalive &rArr; TimerInit &rArr; os_timer_create &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_publish
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;submessage_cmd_request_arrived_handler
</UL>

<P><STRONG><a name="[6b3]"></a>onenet_mqtts_client_subscribe</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, onenet_mqtts.o(i.onenet_mqtts_client_subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = onenet_mqtts_client_subscribe &rArr; MQTTSubscribe &rArr; MQTTSubscribeWithResults &rArr; waitfor &rArr; cycle &rArr; keepalive &rArr; TimerInit &rArr; os_timer_create &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribe
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTIsConnected
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_subscribe
</UL>

<P><STRONG><a name="[6b7]"></a>onenet_mqtts_device_entry</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, onenet_mqtts.o(i.onenet_mqtts_device_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 6652 + Unknown Stack Size
<LI>Call Chain = onenet_mqtts_device_entry &rArr; onenet_mqtts_device_register &rArr; onenet_authorization &rArr; hmac_sha1 &rArr; sha1 &rArr; rotl
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_msleep
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_init
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_subscribe
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_register
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_publish
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_link
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_is_connected
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_disconnect
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_get_device_info
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_event_callback
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_onenet_state
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_device_resigter_state
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_yield
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_message_queue_init
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_device_resigter_state
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_thread_func
</UL>

<P><STRONG><a name="[73]"></a>onenet_mqtts_device_thread_func</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, onenet_mqtts.o(i.onenet_mqtts_device_thread_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 6660 + Unknown Stack Size
<LI>Call Chain = onenet_mqtts_device_thread_func &rArr; onenet_mqtts_device_entry &rArr; onenet_mqtts_device_register &rArr; onenet_authorization &rArr; hmac_sha1 &rArr; sha1 &rArr; rotl
</UL>
<BR>[Calls]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> onenet_mqtts.o(i.onenet_mqtts_device_start)
</UL>
<P><STRONG><a name="[6c0]"></a>onenet_mqtts_device_yield</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, onenet_mqtts.o(i.onenet_mqtts_device_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = onenet_mqtts_device_yield &rArr; MQTTYield &rArr; cycle &rArr; keepalive &rArr; TimerInit &rArr; os_timer_create &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTYield
</UL>
<BR>[Called By]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_entry
</UL>

<P><STRONG><a name="[7f]"></a>oneos_disconnect</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, onenet_mqtts.o(i.oneos_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = oneos_disconnect &rArr; closesocket &rArr; mo_closesocket &rArr; mo_netconn_destroy &rArr; get_netconn_ops &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> onenet_mqtts.o(i.register_network_init)
</UL>
<P><STRONG><a name="[7d]"></a>oneos_read</STRONG> (Thumb, 202 bytes, Stack size 64 bytes, onenet_mqtts.o(i.oneos_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = oneos_read &rArr; recv &rArr; mo_recv &rArr; mo_recvfrom &rArr; module_recv_tcp &rArr; mo_netconn_recvfrom &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_get
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_from_ms
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> onenet_mqtts.o(i.register_network_init)
</UL>
<P><STRONG><a name="[7e]"></a>oneos_write</STRONG> (Thumb, 146 bytes, Stack size 56 bytes, onenet_mqtts.o(i.oneos_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = oneos_write &rArr; send &rArr; mo_send &rArr; mo_sendto &rArr; module_udp_sendto &rArr; mo_netconn_sendto &rArr; get_netconn_ops &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_get
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_from_ms
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> onenet_mqtts.o(i.register_network_init)
</UL>
<P><STRONG><a name="[6c2]"></a>register_network_connect</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, onenet_mqtts.o(i.register_network_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = register_network_connect &rArr; connect &rArr; mo_connect &rArr; mo_netconn_connect &rArr; get_netconn_ops &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostbyname
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_register
</UL>

<P><STRONG><a name="[6c1]"></a>register_network_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, onenet_mqtts.o(i.register_network_init))
<BR><BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_register
</UL>

<P><STRONG><a name="[6bb]"></a>set_device_resigter_state</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, onenet_mqtts.o(i.set_device_resigter_state))
<BR><BR>[Called By]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_entry
</UL>

<P><STRONG><a name="[6b6]"></a>set_onenet_state</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, onenet_mqtts.o(i.set_onenet_state))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_end
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_device_entry
</UL>

<P><STRONG><a name="[72]"></a>submessage_arrived_default_handler</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, onenet_mqtts.o(i.submessage_arrived_default_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = submessage_arrived_default_handler &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> onenet_mqtts.o(i.onenet_mqtts_client_subscribe)
</UL>
<P><STRONG><a name="[6f]"></a>submessage_cmd_request_arrived_handler</STRONG> (Thumb, 224 bytes, Stack size 208 bytes, onenet_mqtts.o(i.submessage_cmd_request_arrived_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = submessage_cmd_request_arrived_handler &rArr; onenet_mqtts_client_publish &rArr; MQTTPublish &rArr; waitfor &rArr; cycle &rArr; keepalive &rArr; TimerInit &rArr; os_timer_create &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_mqtts_client_publish
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> onenet_mqtts.o(i.mqtt_subscribe_message_handlers_init)
</UL>
<P><STRONG><a name="[70]"></a>submessage_cmd_response_result_arrived_handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, onenet_mqtts.o(i.submessage_cmd_response_result_arrived_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = submessage_cmd_response_result_arrived_handler &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> onenet_mqtts.o(i.mqtt_subscribe_message_handlers_init)
</UL>
<P><STRONG><a name="[71]"></a>submessage_image_arrived_handler</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, onenet_mqtts.o(i.submessage_image_arrived_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = submessage_image_arrived_handler &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> onenet_mqtts.o(i.mqtt_subscribe_message_handlers_init)
</UL>
<P><STRONG><a name="[6d]"></a>submessage_pubdata_accepted_arrived_handler</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, onenet_mqtts.o(i.submessage_pubdata_accepted_arrived_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = submessage_pubdata_accepted_arrived_handler &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> onenet_mqtts.o(i.mqtt_subscribe_message_handlers_init)
</UL>
<P><STRONG><a name="[6e]"></a>submessage_pubdata_rejected_arrived_handler</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, onenet_mqtts.o(i.submessage_pubdata_rejected_arrived_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = submessage_pubdata_rejected_arrived_handler &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> onenet_mqtts.o(i.mqtt_subscribe_message_handlers_init)
</UL>
<P><STRONG><a name="[6ab]"></a>ota_url_encode</STRONG> (Thumb, 246 bytes, Stack size 64 bytes, token.o(i.ota_url_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ota_url_encode &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onenet_authorization
</UL>

<P><STRONG><a name="[59b]"></a>NewMessageData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mqttclient.o(i.NewMessageData))
<BR><BR>[Called By]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deliverMessage
</UL>

<P><STRONG><a name="[77e]"></a>decodePacket</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, mqttclient.o(i.decodePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = decodePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPacket
</UL>

<P><STRONG><a name="[3c6]"></a>getNextPacketId</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mqttclient.o(i.getNextPacketId))
<BR><BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribeWithResults
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
</UL>

<P><STRONG><a name="[59a]"></a>isTopicMatched</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, mqttclient.o(i.isTopicMatched))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isTopicMatched
</UL>
<BR>[Called By]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deliverMessage
</UL>

<P><STRONG><a name="[597]"></a>readPacket</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, mqttclient.o(i.readPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = readPacket &rArr; TimerCountdown &rArr; TimerCountdownMS &rArr; TimerSetTimeOutState &rArr; os_timer_start &rArr; _k_timer_activate &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLeftMS
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCountdown
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[3b3]"></a>sendPacket</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, mqttclient.o(i.sendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = sendPacket &rArr; TimerCountdown &rArr; TimerCountdownMS &rArr; TimerSetTimeOutState &rArr; os_timer_start &rArr; _k_timer_activate &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLeftMS
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIsExpired
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCountdown
</UL>
<BR>[Called By]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keepalive
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribeWithResults
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnectWithResults
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
</UL>

<P><STRONG><a name="[4f]"></a>MQTT_net_connect</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, mqttoneos.o(i.MQTT_net_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = MQTT_net_connect &rArr; mqtt_connect_tcp &rArr; connect &rArr; mo_connect &rArr; mo_netconn_connect &rArr; get_netconn_ops &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_connect_tcp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqttoneos.o(i.MQTTNetworkInit)
</UL>
<P><STRONG><a name="[4e]"></a>MQTT_net_disconnect</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, mqttoneos.o(i.MQTT_net_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = MQTT_net_disconnect &rArr; mqtt_disconnect_tcp &rArr; closesocket &rArr; mo_closesocket &rArr; mo_netconn_destroy &rArr; get_netconn_ops &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_disconnect_tcp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqttoneos.o(i.MQTTNetworkInit)
</UL>
<P><STRONG><a name="[4c]"></a>MQTT_net_read</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, mqttoneos.o(i.MQTT_net_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
<LI>Call Chain = MQTT_net_read &rArr; mqtt_read_tcp &rArr; select &rArr; mo_select &rArr; mo_selscan &rArr; mo_get_socket &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_read_tcp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqttoneos.o(i.MQTTNetworkInit)
</UL>
<P><STRONG><a name="[4d]"></a>MQTT_net_write</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, mqttoneos.o(i.MQTT_net_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 984 + Unknown Stack Size
<LI>Call Chain = MQTT_net_write &rArr; mqtt_write_tcp &rArr; select &rArr; mo_select &rArr; mo_selscan &rArr; mo_get_socket &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_write_tcp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqttoneos.o(i.MQTTNetworkInit)
</UL>
<P><STRONG><a name="[3de]"></a>mqtt_connect_tcp</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, mqttoneos.o(i.mqtt_connect_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = mqtt_connect_tcp &rArr; connect &rArr; mo_connect &rArr; mo_netconn_connect &rArr; get_netconn_ops &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostbyname
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_net_connect
</UL>

<P><STRONG><a name="[3df]"></a>mqtt_disconnect_tcp</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, mqttoneos.o(i.mqtt_disconnect_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = mqtt_disconnect_tcp &rArr; closesocket &rArr; mo_closesocket &rArr; mo_netconn_destroy &rArr; get_netconn_ops &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_net_disconnect
</UL>

<P><STRONG><a name="[3e0]"></a>mqtt_read_tcp</STRONG> (Thumb, 320 bytes, Stack size 72 bytes, mqttoneos.o(i.mqtt_read_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = mqtt_read_tcp &rArr; select &rArr; mo_select &rArr; mo_selscan &rArr; mo_get_socket &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_from_ms
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRelease
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeOutState
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCheckForTimeOut
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_net_read
</UL>

<P><STRONG><a name="[3e1]"></a>mqtt_write_tcp</STRONG> (Thumb, 468 bytes, Stack size 80 bytes, mqttoneos.o(i.mqtt_write_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = mqtt_write_tcp &rArr; select &rArr; mo_select &rArr; mo_selscan &rArr; mo_get_socket &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_from_ms
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRelease
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeOutState
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCheckForTimeOut
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_net_write
</UL>

<P><STRONG><a name="[28]"></a>aht10_humi_control</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, aht10.o(i.aht10_humi_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = aht10_humi_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aht10.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>aht10_humi_fetch_data</STRONG> (Thumb, 346 bytes, Stack size 80 bytes, aht10.o(i.aht10_humi_fetch_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = aht10_humi_fetch_data &rArr; calibration_enabled &rArr; aht10_read_user_reg &rArr; os_i2c_client_read &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_enabled
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aht10_write_user_reg
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aht10_read_user_reg
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_aht10_humi_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aht10.o(.data)
</UL>
<P><STRONG><a name="[532]"></a>aht10_init</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, aht10.o(i.aht10_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = aht10_init &rArr; aht10_write_user_reg &rArr; os_i2c_client_write &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_msleep
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_create
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_i2c_bus_device_find
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aht10_write_user_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_aht10_temp_init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_aht10_humi_init
</UL>

<P><STRONG><a name="[52f]"></a>aht10_read_user_reg</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, aht10.o(i.aht10_read_user_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = aht10_read_user_reg &rArr; os_i2c_client_read &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_i2c_client_read
</UL>
<BR>[Called By]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_enabled
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aht10_temp_fetch_data
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aht10_humi_fetch_data
</UL>

<P><STRONG><a name="[26]"></a>aht10_temp_control</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, aht10.o(i.aht10_temp_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = aht10_temp_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aht10.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>aht10_temp_fetch_data</STRONG> (Thumb, 362 bytes, Stack size 88 bytes, aht10.o(i.aht10_temp_fetch_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = aht10_temp_fetch_data &rArr; calibration_enabled &rArr; aht10_read_user_reg &rArr; os_i2c_client_read &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_enabled
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aht10_write_user_reg
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aht10_read_user_reg
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_aht10_temp_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aht10.o(.data)
</UL>
<P><STRONG><a name="[52d]"></a>aht10_write_user_reg</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, aht10.o(i.aht10_write_user_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = aht10_write_user_reg &rArr; os_i2c_client_write &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_i2c_client_write
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aht10_temp_fetch_data
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aht10_init
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aht10_humi_fetch_data
</UL>

<P><STRONG><a name="[52e]"></a>calibration_enabled</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, aht10.o(i.calibration_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = calibration_enabled &rArr; aht10_read_user_reg &rArr; os_i2c_client_read &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aht10_read_user_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aht10_temp_fetch_data
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aht10_humi_fetch_data
</UL>

<P><STRONG><a name="[161]"></a>os_hw_aht10_humi_init</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, aht10.o(i.os_hw_aht10_humi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = os_hw_aht10_humi_init &rArr; aht10_humi_fetch_data &rArr; calibration_enabled &rArr; aht10_read_user_reg &rArr; os_i2c_client_read &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_sensor_register
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aht10_init
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aht10_humi_fetch_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aht10.o(.init_call.4.3)
</UL>
<P><STRONG><a name="[160]"></a>os_hw_aht10_temp_init</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, aht10.o(i.os_hw_aht10_temp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = os_hw_aht10_temp_init &rArr; aht10_temp_fetch_data &rArr; calibration_enabled &rArr; aht10_read_user_reg &rArr; os_i2c_client_read &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_sensor_register
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aht10_temp_fetch_data
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aht10_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aht10.o(.init_call.4.3)
</UL>
<P><STRONG><a name="[2d]"></a>ap3216c_fetch_ir_data</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, ap3216c.o(i.ap3216c_fetch_ir_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = ap3216c_fetch_ir_data &rArr; ap3216c_read_ir_data &rArr; read_low_and_high &rArr; read_regs &rArr; os_i2c_client_read &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_read_ir_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ap3216c.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>ap3216c_fetch_light_data</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, ap3216c.o(i.ap3216c_fetch_light_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = ap3216c_fetch_light_data &rArr; ap3216c_read_ambient_light &rArr; ap3216c_get_param &rArr; read_regs &rArr; os_i2c_client_read &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_read_ambient_light
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ap3216c.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>ap3216c_fetch_proximity_data</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, ap3216c.o(i.ap3216c_fetch_proximity_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = ap3216c_fetch_proximity_data &rArr; ap3216c_read_ps_data &rArr; read_low_and_high &rArr; read_regs &rArr; os_i2c_client_read &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_read_ps_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ap3216c.o(.data)
</UL>
<P><STRONG><a name="[53e]"></a>ap3216c_get_param</STRONG> (Thumb, 530 bytes, Stack size 32 bytes, ap3216c.o(i.ap3216c_get_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = ap3216c_get_param &rArr; read_regs &rArr; os_i2c_client_read &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_read_ambient_light
</UL>

<P><STRONG><a name="[540]"></a>ap3216c_init</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, ap3216c.o(i.ap3216c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = ap3216c_init &rArr; ap3216c_set_param &rArr; write_reg &rArr; os_i2c_client_write_byte &rArr; os_i2c_client_write &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_calloc
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_msleep
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_i2c_bus_device_find
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_sensor
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_set_param
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_ap3216c_proximity_init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_ap3216c_light_init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_ap3216c_ir_init
</UL>

<P><STRONG><a name="[2e]"></a>ap3216c_ir_control</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ap3216c.o(i.ap3216c_ir_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ap3216c_ir_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ap3216c.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>ap3216c_light_control</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ap3216c.o(i.ap3216c_light_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ap3216c_light_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ap3216c.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>ap3216c_proximity_control</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ap3216c.o(i.ap3216c_proximity_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ap3216c_proximity_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ap3216c.o(.data)
</UL>
<P><STRONG><a name="[542]"></a>ap3216c_set_param</STRONG> (Thumb, 670 bytes, Stack size 32 bytes, ap3216c.o(i.ap3216c_set_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = ap3216c_set_param &rArr; write_reg &rArr; os_i2c_client_write_byte &rArr; os_i2c_client_write &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_init
</UL>

<P><STRONG><a name="[164]"></a>os_hw_ap3216c_ir_init</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, ap3216c.o(i.os_hw_ap3216c_ir_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = os_hw_ap3216c_ir_init &rArr; ap3216c_init &rArr; ap3216c_set_param &rArr; write_reg &rArr; os_i2c_client_write_byte &rArr; os_i2c_client_write &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_sensor_register
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ap3216c.o(.init_call.4.3)
</UL>
<P><STRONG><a name="[162]"></a>os_hw_ap3216c_light_init</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, ap3216c.o(i.os_hw_ap3216c_light_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = os_hw_ap3216c_light_init &rArr; ap3216c_init &rArr; ap3216c_set_param &rArr; write_reg &rArr; os_i2c_client_write_byte &rArr; os_i2c_client_write &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_sensor_register
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ap3216c.o(.init_call.4.3)
</UL>
<P><STRONG><a name="[163]"></a>os_hw_ap3216c_proximity_init</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, ap3216c.o(i.os_hw_ap3216c_proximity_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = os_hw_ap3216c_proximity_init &rArr; ap3216c_init &rArr; ap3216c_set_param &rArr; write_reg &rArr; os_i2c_client_write_byte &rArr; os_i2c_client_write &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_sensor_register
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ap3216c.o(.init_call.4.3)
</UL>
<P><STRONG><a name="[543]"></a>read_low_and_high</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ap3216c.o(i.read_low_and_high))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = read_low_and_high &rArr; read_regs &rArr; os_i2c_client_read &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_read_ps_data
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_read_ir_data
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_read_ambient_light
</UL>

<P><STRONG><a name="[53f]"></a>read_regs</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, ap3216c.o(i.read_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = read_regs &rArr; os_i2c_client_read &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_i2c_client_read
</UL>
<BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_low_and_high
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_set_param
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_get_param
</UL>

<P><STRONG><a name="[541]"></a>reset_sensor</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ap3216c.o(i.reset_sensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = reset_sensor &rArr; write_reg &rArr; os_i2c_client_write_byte &rArr; os_i2c_client_write &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_init
</UL>

<P><STRONG><a name="[545]"></a>write_reg</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ap3216c.o(i.write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = write_reg &rArr; os_i2c_client_write_byte &rArr; os_i2c_client_write &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_i2c_client_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_sensor
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3216c_set_param
</UL>

<P><STRONG><a name="[16a]"></a>os_hw_mpu6xxx_port</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mpu6xxx_port.o(i.os_hw_mpu6xxx_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = os_hw_mpu6xxx_port &rArr; os_hw_mpu6xxx_init &rArr; _mpu6xxx_init &rArr; mpu6xxx_init &rArr; mpu6xxx_get_param &rArr; mpu6xxx_read_bits &rArr; mpu6xxx_read_regs &rArr; os_i2c_transfer &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_hw_mpu6xxx_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mpu6xxx_port.o(.init_call.6.1)
</UL>
<P><STRONG><a name="[7c]"></a>irq_callback</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, sensor.o(i.irq_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = irq_callback &rArr; os_sensor_cb &rArr; os_device_recv_notify &rArr; os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sensor_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensor.o(i.os_sensor_irq_init)
</UL>
<P><STRONG><a name="[13d]"></a>os_sensor_control</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, sensor.o(i.os_sensor_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = os_sensor_control &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensor.o(.constdata)
</UL>
<P><STRONG><a name="[13b]"></a>os_sensor_deinit</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, sensor.o(i.os_sensor_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = os_sensor_deinit &rArr; os_pin_irq_enable &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_irq_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensor.o(.constdata)
</UL>
<P><STRONG><a name="[13a]"></a>os_sensor_init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, sensor.o(i.os_sensor_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = os_sensor_init &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensor.o(.constdata)
</UL>
<P><STRONG><a name="[202]"></a>os_sensor_irq_init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, sensor.o(i.os_sensor_irq_init), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = os_sensor_irq_init &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_mode
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlog_output
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_irq_enable
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pin_attach_irq
</UL>

<P><STRONG><a name="[13c]"></a>os_sensor_read</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, sensor.o(i.os_sensor_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = os_sensor_read &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensor.o(.constdata)
</UL>
<P><STRONG><a name="[197]"></a>sh_help</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, shell_buildin_cmd.o(i.sh_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = sh_help &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_get_cmd_table
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell_buildin_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[196]"></a>sh_set_prompt</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, shell_buildin_cmd.o(i.sh_set_prompt))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = sh_set_prompt &rArr; sh_do_set_prompt &rArr; os_malloc &rArr; os_memheap_alloc &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_do_set_prompt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell_buildin_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[788]"></a>sh_connect_console</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, shell_main.o(i.sh_connect_console))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = sh_connect_console &rArr; sh_do_connect_console &rArr; os_device_control &rArr; os_sem_wait &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_msleep
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_do_connect_console
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_task_entry
</UL>

<P><STRONG><a name="[78a]"></a>sh_copy_history_cmd</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, shell_main.o(i.sh_copy_history_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = sh_copy_history_cmd &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_handle_tab_key
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_handle_right_key
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_handle_normal_character
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_handle_left_key
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_handle_enter_key
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_handle_backspace_key
</UL>

<P><STRONG><a name="[789]"></a>sh_do_connect_console</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, shell_main.o(i.sh_do_connect_console))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = sh_do_connect_console &rArr; os_device_control &rArr; os_sem_wait &rArr; os_is_schedule_locked &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_control
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_console_get_device
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_connect_console
</UL>

<P><STRONG><a name="[79a]"></a>sh_get_char</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, shell_main.o(i.sh_get_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = sh_get_char &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_wait
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_read_nonblock
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_task_entry
</UL>

<P><STRONG><a name="[79b]"></a>sh_handle_backspace_key</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, shell_main.o(i.sh_handle_backspace_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = sh_handle_backspace_key &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_copy_history_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_handle_control_key
</UL>

<P><STRONG><a name="[79c]"></a>sh_handle_control_key</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, shell_main.o(i.sh_handle_control_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = sh_handle_control_key &rArr; sh_handle_tab_key &rArr; sh_auto_complete &rArr; sh_auto_complete_path &rArr; sh_do_auto_complete_path &rArr; opendir &rArr; vfs_opendir &rArr; do_opendir &rArr; vfs_mount_point_find_and_ref &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_handle_up_key
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_handle_tab_key
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_handle_right_key
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_handle_left_key
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_handle_enter_key
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_handle_down_key
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_handle_backspace_key
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_task_entry
</UL>

<P><STRONG><a name="[79e]"></a>sh_handle_down_key</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, shell_main.o(i.sh_handle_down_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = sh_handle_down_key &rArr; sh_print_history &rArr; sh_get_prompt &rArr; getcwd &rArr; vfs_getcwd &rArr; working_dir_get &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_print_history
</UL>
<BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_handle_control_key
</UL>

<P><STRONG><a name="[7a2]"></a>sh_handle_enter_key</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, shell_main.o(i.sh_handle_enter_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = sh_handle_enter_key &rArr; sh_get_prompt &rArr; getcwd &rArr; vfs_getcwd &rArr; working_dir_get &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_do_exec
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_get_prompt
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_push_history
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_copy_history_cmd
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_handle_control_key
</UL>

<P><STRONG><a name="[79f]"></a>sh_handle_left_key</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, shell_main.o(i.sh_handle_left_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = sh_handle_left_key &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_copy_history_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_handle_control_key
</UL>

<P><STRONG><a name="[7a5]"></a>sh_handle_normal_character</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, shell_main.o(i.sh_handle_normal_character))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = sh_handle_normal_character &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_copy_history_cmd
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_task_entry
</UL>

<P><STRONG><a name="[7a0]"></a>sh_handle_right_key</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, shell_main.o(i.sh_handle_right_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = sh_handle_right_key &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_copy_history_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_handle_control_key
</UL>

<P><STRONG><a name="[7a1]"></a>sh_handle_tab_key</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, shell_main.o(i.sh_handle_tab_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = sh_handle_tab_key &rArr; sh_auto_complete &rArr; sh_auto_complete_path &rArr; sh_do_auto_complete_path &rArr; opendir &rArr; vfs_opendir &rArr; do_opendir &rArr; vfs_mount_point_find_and_ref &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_auto_complete
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_copy_history_cmd
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_handle_control_key
</UL>

<P><STRONG><a name="[79d]"></a>sh_handle_up_key</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, shell_main.o(i.sh_handle_up_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = sh_handle_up_key &rArr; sh_print_history &rArr; sh_get_prompt &rArr; getcwd &rArr; vfs_getcwd &rArr; working_dir_get &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_print_history
</UL>
<BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_handle_control_key
</UL>

<P><STRONG><a name="[7a3]"></a>sh_print_history</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, shell_main.o(i.sh_print_history))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = sh_print_history &rArr; sh_get_prompt &rArr; getcwd &rArr; vfs_getcwd &rArr; working_dir_get &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_get_prompt
</UL>
<BR>[Called By]<UL><LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_handle_up_key
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_handle_down_key
</UL>

<P><STRONG><a name="[7a4]"></a>sh_push_history</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, shell_main.o(i.sh_push_history))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sh_push_history &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_handle_enter_key
</UL>

<P><STRONG><a name="[85]"></a>sh_rx_ind</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, shell_main.o(i.sh_rx_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = sh_rx_ind &rArr; os_sem_post &rArr; k_kernel_exit_check &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell_main.o(i.sh_system_init)
</UL>
<P><STRONG><a name="[169]"></a>sh_system_init</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, shell_main.o(i.sh_system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = sh_system_init &rArr; os_task_init &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_init
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_init
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_startup
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_init
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_init_cmd_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell_main.o(.init_call.5.3)
</UL>
<P><STRONG><a name="[84]"></a>sh_task_entry</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, shell_main.o(i.sh_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = sh_task_entry &rArr; sh_handle_control_key &rArr; sh_handle_tab_key &rArr; sh_auto_complete &rArr; sh_auto_complete_path &rArr; sh_do_auto_complete_path &rArr; opendir &rArr; vfs_opendir &rArr; do_opendir &rArr; vfs_mount_point_find_and_ref &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_get_prompt
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_handle_normal_character
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_handle_control_key
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_get_char
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_connect_console
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell_main.o(i.sh_system_init)
</UL>
<P><STRONG><a name="[782]"></a>sh_auto_complete_path</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, shell_process.o(i.sh_auto_complete_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = sh_auto_complete_path &rArr; sh_do_auto_complete_path &rArr; opendir &rArr; vfs_opendir &rArr; do_opendir &rArr; vfs_mount_point_find_and_ref &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_do_auto_complete_path
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_auto_complete
</UL>

<P><STRONG><a name="[786]"></a>sh_do_auto_complete_path</STRONG> (Thumb, 408 bytes, Stack size 48 bytes, shell_process.o(i.sh_do_auto_complete_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = sh_do_auto_complete_path &rArr; opendir &rArr; vfs_opendir &rArr; do_opendir &rArr; vfs_mount_point_find_and_ref &rArr; dlog_output &rArr; dlog_voutput &rArr; dlog_tag_lvl_filter_get &rArr; dlog_unlock &rArr; os_mutex_unlock &rArr; os_kernel_print &rArr; os_get_klog_tag_lvl &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_free
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_malloc
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_string_same_part_length
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_auto_complete_path
</UL>

<P><STRONG><a name="[796]"></a>sh_do_exec_cmd</STRONG> (Thumb, 168 bytes, Stack size 72 bytes, shell_process.o(i.sh_do_exec_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = sh_do_exec_cmd &rArr; sh_split &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_irq_disable
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_split
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_get_cmd_func
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_do_exec
</UL>

<P><STRONG><a name="[797]"></a>sh_get_cmd_func</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, shell_process.o(i.sh_get_cmd_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sh_get_cmd_func &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_get_cmd_table
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_do_exec_cmd
</UL>

<P><STRONG><a name="[798]"></a>sh_split</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, shell_process.o(i.sh_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = sh_split &rArr; os_kprintf &rArr; os_vsnprintf &rArr; print_number &rArr; divide &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_do_exec_cmd
</UL>

<P><STRONG><a name="[784]"></a>sh_string_same_part_length</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, shell_process.o(i.sh_string_same_part_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sh_string_same_part_length
</UL>
<BR>[Called By]<UL><LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_do_auto_complete_path
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_auto_complete
</UL>

<P><STRONG><a name="[434]"></a>SWAPBYTE</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, proto_usbd_ctlreq.o(i.SWAPBYTE))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SWAPBYTE
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ParseSetupRequest
</UL>

<P><STRONG><a name="[421]"></a>USBD_ClrFeature</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, proto_usbd_ctlreq.o(i.USBD_ClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_ClrFeature &rArr; USBD_CtlError
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[424]"></a>USBD_GetConfig</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, proto_usbd_ctlreq.o(i.USBD_GetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_GetConfig &rArr; USBD_CtlSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[426]"></a>USBD_GetDescriptor</STRONG> (Thumb, 508 bytes, Stack size 24 bytes, proto_usbd_ctlreq.o(i.USBD_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_GetDescriptor &rArr; USBD_CtlSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[427]"></a>USBD_GetStatus</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, proto_usbd_ctlreq.o(i.USBD_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_GetStatus &rArr; USBD_CtlSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[435]"></a>USBD_SetAddress</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, proto_usbd_ctlreq.o(i.USBD_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_SetAddress &rArr; USBD_CtlError
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[436]"></a>USBD_SetConfig</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, proto_usbd_ctlreq.o(i.USBD_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_SetConfig &rArr; USBD_CtlError
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetClassConfig
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[439]"></a>USBD_SetFeature</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, proto_usbd_ctlreq.o(i.USBD_SetFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_SetFeature &rArr; USBD_CtlSendStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[25d]"></a>_tm_carry</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _tm_carry
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>

<P><STRONG><a name="[81d]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[810]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[25e]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[37]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[26c]"></a>_fp_value</STRONG> (Thumb, 588 bytes, Stack size 96 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[38]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
